import { pki } from 'node-forge';
import { Ctx } from './core/definitions';
import { Environment } from './core/definitions';
import { FullSignatureRes } from './core/types/walletTypes';
declare enum WalletScheme {
    CGGMP = "CGGMP",
    DKLS = "DKLS"
}
export declare enum RecoveryStatus {
    INITIATED = "INITIATED",
    READY = "READY",
    EXPIRED = "EXPIRED",
    FINISHED = "FINISHED",
    CANCELLED = "CANCELLED"
}
export interface Wallet {
    id: string;
    signer: string;
    address?: string;
    publicKey?: string;
    scheme?: WalletScheme;
}
export interface ConstructorOpts {
    useStorageOverrides?: boolean;
    disableWorkers?: boolean;
    offloadMPCComputationURL?: string;
    useLocalFiles?: boolean;
    localStorageGetItemOverride?: (key: string) => Promise<string | null>;
    localStorageSetItemOverride?: (key: string, value: string) => Promise<void>;
    sessionStorageGetItemOverride?: (key: string) => Promise<string | null>;
    sessionStorageSetItemOverride?: (key: string, value: string) => Promise<void>;
    sessionStorageRemoveItemOverride?: (key: string) => Promise<void>;
    clearStorageOverride?: () => Promise<void>;
    portalBackgroundColor?: string;
    portalPrimaryButtonColor?: string;
    portalTextColor?: string;
    portalPrimaryButtonTextColor?: string;
    useDKLSForCreation?: boolean;
}
/**
 * Main entry point class.
 *
 * Deprecated. Use `CapsuleWeb` instead.
 * @internal
 **/
export declare class Capsule {
    ctx: Ctx;
    private email?;
    private userId?;
    loginEncryptionKeyPair?: pki.rsa.KeyPair;
    private wallets;
    portalBackgroundColor?: string;
    portalPrimaryButtonColor?: string;
    portalTextColor?: string;
    portalPrimaryButtonTextColor?: string;
    private sessionCookie?;
    private localStorageGetItem;
    private localStorageSetItem;
    private sessionStorageGetItem;
    private sessionStorageSetItem;
    private sessionStorageRemoveItem;
    retrieveSessionCookie: () => string | undefined;
    persistSessionCookie: (cookie: string) => void;
    clearStorage: () => Promise<void>;
    private convertBigInt;
    private convertEncryptionKeyPair;
    private requireApiKey;
    constructor(env: Environment, apiKey?: string, opts?: ConstructorOpts);
    init(): Promise<void>;
    generatePaillierKey(): Promise<void>;
    setEmail(email: string): Promise<void>;
    setUserId(userId: string): Promise<void>;
    setWallets(wallets: Record<string, Wallet>): Promise<void>;
    setLoginEncryptionKeyPair(keyPair: pki.rsa.KeyPair): Promise<void>;
    private deleteLoginEncryptionKeyPair;
    getEmail(): string | undefined;
    getWallets(): Record<string, Wallet>;
    private getPartnerURL;
    getPortalURL(partnerId?: string): Promise<string>;
    private getWebAuthURLForCreate;
    private getShortUrl;
    shortenLoginLink(link: string): Promise<string>;
    getWebAuthURLForLogin(sessionId: string, loginEncryptionPublicKey: string, partnerId?: string, newDeviceSessionId?: string, newDeviceEncryptionKey?: string): Promise<string>;
    fetchWallets(): Promise<any[]>;
    private populateWalletAddresses;
    checkIfUserExists(email: string): Promise<boolean>;
    createUser(email: string): Promise<void>;
    verifyEmail(verificationCode: string): Promise<string>;
    verify2FA(email: string, verificationCode: string): Promise<{
        address?: string;
        initiatedAt?: Date;
        status?: RecoveryStatus;
        userId: string;
        walletId: string;
    }>;
    setup2FA(): Promise<{
        uri?: string;
    }>;
    enable2FA(verificationCode: string): Promise<void>;
    check2FAStatus(): Promise<{
        isSetup: boolean;
    }>;
    resendVerificationCode(): Promise<void>;
    getSetUpBiometricsURL(isForNewDevice: boolean): Promise<string>;
    isSessionActive(): Promise<boolean>;
    isFullyLoggedIn(): Promise<boolean>;
    initiateUserLogin(email: string): Promise<string>;
    refreshSession(shouldOpenPopup: boolean): Promise<string>;
    userSetupAfterLogin(): Promise<void>;
    getTransmissionKeyShares(isForNewDevice?: boolean): Promise<any>;
    setupAfterLogin(temporaryShares?: any[]): Promise<void>;
    distributeNewWalletShare(walletId: string, userShare: string): Promise<string>;
    createWallet(skipDistribute: boolean, customFunction: (params?: any) => void): Promise<[Wallet, string | null]>;
    private getTransactionReviewUrl;
    signMessage(walletId: string, messageBase64: string): Promise<FullSignatureRes>;
    signTransaction(walletId: string, rlpEncodedTxBase64: string, chainId: string): Promise<FullSignatureRes>;
    sendTransaction(walletId: string, rlpEncodedTxBase64: string, chainId: string): Promise<FullSignatureRes>;
    logout(): Promise<void>;
    toString(): string;
}
export {};
