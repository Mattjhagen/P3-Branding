import { LocalStorage } from './LocalStorage';
import { SessionStorage } from './SessionStorage';
import { keygen } from './wallet/keygen';
import { signMessage, sendTransaction, signTransaction } from './wallet/signing';
export class WebUtils {
    constructor() {
        this.localStorage = new LocalStorage();
        this.sessionStorage = new SessionStorage();
        this.secureStorage = null;
        this.isSyncStorage = true;
        this.disableProviderModal = false;
    }
    keygen(ctx, userId, secretKey, // should be acceptable as null in RN as we don't pre-gen them
    customFunction, sessionCookie) {
        return keygen(ctx, userId, secretKey, true, customFunction, sessionCookie);
    }
    signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
        return signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS);
    }
    signTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
        return signTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS);
    }
    sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
        return sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS);
    }
    signHash(_address, _hash) {
        throw new Error('not implemented');
    }
    openPopup(popupUrl) {
        window.open(popupUrl, 'popup', 'popup=true,width=400,height=500');
    }
}
