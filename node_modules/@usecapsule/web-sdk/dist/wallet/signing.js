var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { setupWorker } from '../workers/workerWrapper';
export function signTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const worker = yield setupWorker(ctx, (sendTransactionRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(sendTransactionRes);
                worker.terminate();
            }));
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                params: { share, walletId, userId, tx, chainId },
                functionType: 'SIGN_TRANSACTION',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                useDKLS: isDKLS,
            });
        }));
    });
}
export function sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const worker = yield setupWorker(ctx, (sendTransactionRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(sendTransactionRes);
                worker.terminate();
            }));
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                params: { share, walletId, userId, tx, chainId },
                functionType: 'SEND_TRANSACTION',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                useDKLS: isDKLS,
            });
        }));
    });
}
export function signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const worker = yield setupWorker(ctx, (signMessageRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(signMessageRes);
                worker.terminate();
            }));
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                params: { share, walletId, userId, message },
                functionType: 'SIGN_MESSAGE',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                useDKLS: isDKLS,
            });
        }));
    });
}
