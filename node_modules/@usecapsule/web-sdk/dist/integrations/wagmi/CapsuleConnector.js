var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { InjectedConnector } from 'wagmi/connectors/injected';
import { CapsuleEIP1193Provider } from './CapsuleEIP1193Provider';
export class CapsuleConnector extends InjectedConnector {
    constructor({ chains, options, capsule, disableModal, appName, storageOverride }) {
        if (chains.length === 0) {
            throw new Error('Must provide at least one chain');
        }
        const provider = new CapsuleEIP1193Provider({
            capsule,
            chainId: `${chains[0].id}`,
            chains,
            disableModal,
            appName,
            storageOverride,
        });
        const optionsWithProvider = Object.assign({ name: 'Capsule', getProvider() {
                return provider;
            } }, options);
        super({ chains, options: optionsWithProvider });
        this.capsule = capsule;
    }
    disconnect() {
        const _super = Object.create(null, {
            disconnect: { get: () => super.disconnect }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.disconnect.call(this);
            this.capsule.logout();
        });
    }
}
