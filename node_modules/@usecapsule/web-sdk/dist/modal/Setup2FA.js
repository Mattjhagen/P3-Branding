var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { VStack, Spacer, Button, Box, Text, useTheme, Input } from '@chakra-ui/react';
import { useEffect, useState, useContext } from 'react';
import QRCode from 'react-qr-code';
import { ModalStep } from './steps';
import FlowContext from './FlowContext';
export function Setup2FA({ setCurrentStep, capsule, }) {
    const [qrCodeValue, setQrCodeValue] = useState(null);
    const [verificationCode, setVerificationCode] = useState('');
    const [incorrectCode, setIncorrectCode] = useState(false);
    const { colors: { brand: { dimmed: bgColor, background: fgColor }, }, } = useTheme();
    useEffect(() => {
        function fetchOtpAuthUrl() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const { uri } = yield capsule.setup2FA();
                    setQrCodeValue(uri);
                }
                catch (error) {
                    console.error('Error fetching OTPAuth URL:', error);
                }
            });
        }
        fetchOtpAuthUrl();
    }, []);
    const { isLogin } = useContext(FlowContext);
    const nextStep = () => {
        if (isLogin) {
            setCurrentStep(ModalStep.LOGIN_DONE);
        }
        else {
            setCurrentStep(ModalStep.ACCOUNT_CREATION_DONE);
        }
    };
    return (_jsxs(VStack, { flex: 1, alignItems: "center", children: [_jsx(Text, { fontSize: "22px", children: "Optional: Set up 2FA" }), _jsxs(Box, { display: 'flex', flexDirection: 'column', alignItems: 'center', width: '274px', children: [_jsx(Text, { lineHeight: '18px', fontWeight: 500, textAlign: 'center', marginTop: '8px', children: "Add extra protection to your account and enable faster recovery." }), _jsx(Text, { lineHeight: '18px', fontWeight: 500, textAlign: 'center', marginTop: '16px', children: "Open your preferred Two Factor Auth App and scan the code to complete." }), qrCodeValue ? (_jsxs(VStack, { width: '100%', children: [_jsx(Box, { cursor: "pointer", backgroundColor: "brand.dimmed", borderRadius: "12px", padding: "12px", width: '188px', height: '188px', marginTop: '16px', children: _jsx(QRCode, { fgColor: fgColor, bgColor: bgColor, size: 165, value: qrCodeValue }) }), _jsx(Spacer, {}), _jsx(Text, { alignSelf: "start", fontSize: "12px", fontWeight: 500, lineHeight: '16px', textColor: "#838587", marginBottom: "-4px !important" // sorry!
                                , children: "2FA code" }), _jsx(Input, { type: "string", errorBorderColor: 'red.500', isInvalid: incorrectCode, borderColor: "brand.frameColor", textColor: "brand.text", background: "rgba(255, 255, 255, 0.05)", border: "1px solid rgba(255, 255, 255, 0.1)", borderRadius: "5px", focusBorderColor: "brand.text", placeholder: "Enter code", onChange: (e) => __awaiter(this, void 0, void 0, function* () {
                                    setVerificationCode(e.target.value);
                                }) }), incorrectCode && _jsx(Text, { alignSelf: "flex-start", color: "red.500", fontSize: "x-small", children: "Incorrect Code" })] }))
                        : _jsx(Box, { mb: '128px', mt: '128px', children: _jsx(Text, { children: "Loading..." }) }), _jsx(Spacer, {}), _jsx(Button, { w: "100%", onClick: () => __awaiter(this, void 0, void 0, function* () {
                            if (verificationCode.length === 6 && /^\d+$/.test(verificationCode)) {
                                try {
                                    yield capsule.enable2FA(verificationCode);
                                    setIncorrectCode(false);
                                    nextStep();
                                }
                                catch (e) {
                                    setIncorrectCode(true);
                                }
                            }
                            else {
                                setIncorrectCode(true);
                            }
                        }), marginTop: '14px', children: "Continue" }), _jsx(Button, { variant: 'link', onClick: () => nextStep(), children: _jsx(Text, { fontSize: '12px', fontWeight: 500, lineHeight: '16px', textColor: '#838587', position: 'relative', bottom: '-8px', children: "Skip for now" }) })] })] }));
}
