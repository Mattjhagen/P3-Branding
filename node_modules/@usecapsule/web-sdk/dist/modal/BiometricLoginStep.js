var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ModalStep } from './steps';
import { Box, Text, useTheme, VStack } from '@chakra-ui/react';
import QRCode from 'react-qr-code';
import { useEffect, useState } from 'react';
import { upload } from '../core/transmission/transmissionUtils';
import { openPopup } from './utils';
import CustomButton from '../components/CustomButton';
const SHORTENING_AVAILABLE = true;
export function BiometricLoginStep({ currentStep, webAuthURLForLogin, capsule, }) {
    const { colors: { brand: { dimmed: bgColor, background: fgColor }, }, } = useTheme();
    const [shortLoginLink, setShortLoginLink] = useState(webAuthURLForLogin);
    useEffect(() => {
        if (currentStep !== ModalStep.BIOMETRIC_LOGIN) {
            setShortLoginLink(null);
        }
        if (!webAuthURLForLogin) {
            return;
        }
        function shortenUrl() {
            return __awaiter(this, void 0, void 0, function* () {
                const url = yield upload(webAuthURLForLogin, capsule.ctx.capsuleClient);
                // @ts-ignore
                setShortLoginLink(capsule.getShortUrl(url));
            });
        }
        if (SHORTENING_AVAILABLE) {
            shortenUrl();
        }
        else {
            setShortLoginLink(webAuthURLForLogin);
        }
    }, [webAuthURLForLogin]);
    if (currentStep !== ModalStep.BIOMETRIC_LOGIN || !shortLoginLink) {
        return null;
    }
    return (_jsxs(VStack, { flex: 1, alignItems: "center", children: [_jsx(Text, { position: 'relative', top: '-4px', fontSize: "22px", children: "Finish login" }), _jsx(Box, { cursor: "pointer", backgroundColor: "brand.dimmed", borderRadius: "12px", padding: "12px", onClick: () => openPopup(shortLoginLink), width: '188px', height: '188px', children: _jsx(QRCode, { fgColor: fgColor, bgColor: bgColor, size: 165, value: shortLoginLink }) }), _jsxs(Box, { width: "274px", children: [_jsx(Text, { marginTop: '20px', fontSize: '20px', textAlign: 'center', children: "Click or scan this QR Code to login from the same device you used." }), _jsx(CustomButton, { openPopup: openPopup, webAuthURL: shortLoginLink, text: "Use passkey" })] })] }));
}
