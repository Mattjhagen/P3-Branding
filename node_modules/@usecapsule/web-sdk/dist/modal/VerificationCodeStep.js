var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ModalStep } from './steps';
import { useEffect, useState } from 'react';
import { Box, Button, Input, Spacer, Text, VStack, } from '@chakra-ui/react';
import Console from './assets/console';
import './css/modal.css';
export function VerificationCodeStep({ setWebAuthURLForCreate, setCurrentStep, currentStep, capsule, email, }) {
    const [verificationCode, setVerificationCode] = useState('');
    const [incorrectCode, setIncorrectCode] = useState(false);
    const [tooManyAttempts, setTooManyAttempts] = useState(false);
    const [resendStatus, setResendStatus] = useState('Resend Code');
    const [isResendButtonDisabled, setResendButtonDisabled] = useState(false);
    const handleClick = () => __awaiter(this, void 0, void 0, function* () {
        setResendStatus("Code Resent!");
        setResendButtonDisabled(true);
        yield capsule.resendVerificationCode();
        setTimeout(() => {
            setResendStatus("Resend Code");
            setResendButtonDisabled(false);
        }, 3000);
    });
    const [fontSize, setFontSize] = useState("20px");
    useEffect(() => {
        if (!email) {
            setFontSize("20px");
            return;
        }
        else if (email.length > 30) {
            setFontSize("14px");
            return;
        }
        else if (email.length > 28) {
            setFontSize("16px");
            return;
        }
        else if (email.length > 24) {
            setFontSize("18px");
            return;
        }
        else {
            setFontSize("20px");
            return;
        }
    }, [email]);
    if (currentStep !== ModalStep.VERIFICATION_CODE) {
        return null;
    }
    return (_jsx(_Fragment, { children: _jsxs(VStack, { flex: 1, children: [_jsx(Text, { position: 'relative', top: '-4px', textColor: "brand.content", fontSize: "22px", children: "Verify email" }), _jsx(Box, { position: "relative", top: "-10px", children: _jsx(Console, {}) }), _jsxs(Box, { position: 'relative', top: '-10px', display: "flex", flexDirection: 'column', alignItems: 'center', children: [_jsxs(Box, { width: "274px", children: [_jsxs(Text, { top: "8px", position: "relative", textAlign: "center", textColor: "brand.content", fontSize: "20px", children: ["Enter the 6-digit authentication code sent to", ' ', _jsx(Box, { as: "span", display: "inline-block", maxWidth: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap", children: _jsx(Text, { as: "b", display: "inline", fontSize: fontSize, children: email }) })] }), _jsx(Text, { alignSelf: "start", fontSize: "12px", fontWeight: 500, lineHeight: '16px', textColor: "#838587", marginTop: "24px", children: "6-digit code" }), _jsx(Input, { marginTop: '4px', type: "string", errorBorderColor: 'red.500', isInvalid: incorrectCode, isDisabled: tooManyAttempts, borderColor: "brand.frameColor", textColor: "brand.text", background: "rgba(255, 255, 255, 0.05)", border: "1px solid rgba(255, 255, 255, 0.1)", borderRadius: "5px", focusBorderColor: "brand.text", placeholder: "Enter code", onChange: (e) => __awaiter(this, void 0, void 0, function* () {
                                        setVerificationCode(e.target.value);
                                    }) }), incorrectCode && _jsx(Text, { alignSelf: "flex-start", color: "red.500", fontSize: "x-small", children: "Incorrect Code" }), tooManyAttempts && _jsx(Text, { alignSelf: "flex-start", color: "red.500", fontSize: "x-small", children: "Too many incorrect attempts. Please try again in 10 minutes." }), _jsx(Spacer, {}), _jsx(Button, { marginTop: "48px", width: "100%", onClick: () => __awaiter(this, void 0, void 0, function* () {
                                        if (verificationCode.length === 6 && /^\d+$/.test(verificationCode)) {
                                            try {
                                                setWebAuthURLForCreate(yield capsule.verifyEmail(verificationCode));
                                                setIncorrectCode(false);
                                                setCurrentStep(ModalStep.BIOMETRIC_CREATION);
                                            }
                                            catch (e) {
                                                if (e.message.includes('429')) {
                                                    setIncorrectCode(false);
                                                    setTooManyAttempts(true);
                                                }
                                                else {
                                                    setIncorrectCode(true);
                                                    setTooManyAttempts(false);
                                                }
                                            }
                                        }
                                        else {
                                            setIncorrectCode(true);
                                        }
                                    }), children: "Continue" })] }), _jsx(Button, { variant: "link", onClick: () => __awaiter(this, void 0, void 0, function* () {
                                yield handleClick();
                            }), isDisabled: isResendButtonDisabled || tooManyAttempts, marginTop: '8px', children: _jsx(Text, { fontSize: 11, children: resendStatus }) })] })] }) }));
}
