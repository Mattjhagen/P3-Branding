var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ModalStep } from './steps';
import './css/modal.css';
import { Button, VStack, Input, Text, Box, } from '@chakra-ui/react';
import { useContext } from 'react';
import WalletCreation from './assets/walletCreation';
import FlowContext from './FlowContext';
export function EmailCollectionStep({ setEmail, email, capsule, appName, setIsCreateAccountType, setWebAuthURLForLogin, setCurrentStep, currentStep, }) {
    const { setIsLogin } = useContext(FlowContext);
    if (currentStep !== ModalStep.EMAIL_COLLECTION) {
        return null;
    }
    return (_jsx(_Fragment, { children: _jsxs(VStack, { alignItems: "center", display: "flex", flex: 1, children: [_jsx(WalletCreation, {}), _jsxs(Box, { style: { marginTop: 12, width: '324px' }, display: "flex", flexDirection: "column", alignItems: "center", children: [_jsx(Text, { textColor: "brand.text", fontSize: "22px", children: "Create Wallet for" }), _jsx(Text, { textColor: "brand.text", fontSize: "22px", fontWeight: "bold", children: appName })] }), _jsxs(Box, { width: '274px', children: [_jsx(Text, { marginTop: '24px', textColor: "brand.text", fontSize: "20px", textAlign: "center", children: "Start signing up by entering your email" }), _jsx(Input, { marginTop: '28px', placeholder: "Email", type: "email", borderColor: "brand.frameColor", textColor: "brand.text", background: "rgba(255, 255, 255, 0.05)", border: "1px solid rgba(255, 255, 255, 0.1)", borderRadius: "5px", focusBorderColor: "brand.text", onChange: (e) => __awaiter(this, void 0, void 0, function* () {
                                const email = e.target.value;
                                setEmail(email);
                            }), value: email || '' }), _jsxs(Text, { marginTop: '12px', textColor: "brand.content", fontSize: "s", children: ["This wallet can be used across websites. Visit ", _jsx("a", { href: 'https://usecapsule.com', target: '_blank', rel: 'noreferrer', children: _jsx("u", { children: "usecapsule.com" }) }), " to view the list."] }), _jsx(Box, { flex: 1, height: "32px" }), _jsx(Button, { width: "100%", onClick: () => __awaiter(this, void 0, void 0, function* () {
                                // TODO move to a function :sweat_smile:
                                // TODO: add regex check here or in backend (or both)
                                if (!email) {
                                    throw new Error('email is required');
                                }
                                capsule.clearStorage();
                                const userExists = yield capsule.checkIfUserExists(email);
                                if (userExists) {
                                    const webAuthUrlForLogin = yield capsule.initiateUserLogin(email);
                                    setIsLogin(true);
                                    setCurrentStep(ModalStep.BIOMETRIC_LOGIN);
                                    setWebAuthURLForLogin(webAuthUrlForLogin);
                                    return;
                                }
                                yield capsule.createUser(email);
                                setIsLogin(false);
                                setCurrentStep(ModalStep.VERIFICATION_CODE);
                                setIsCreateAccountType(true);
                            }), children: "Continue" })] })] }) }));
}
