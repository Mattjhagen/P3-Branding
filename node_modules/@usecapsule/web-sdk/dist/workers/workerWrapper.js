var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getPortalBaseURL } from '../core/definitions';
import { handleMessage } from './worker';
export function setupWorker(ctx, resFunction, customFunction) {
    return __awaiter(this, void 0, void 0, function* () {
        const onmessage = (event) => {
            if (event.data.functionType === 'CUSTOM' && customFunction) {
                customFunction(event.data.params);
                return;
            }
            resFunction(event.data);
        };
        if (ctx.disableWorkers) {
            const syncWorker = {
                postMessage: function (message) {
                    (function () {
                        return __awaiter(this, void 0, void 0, function* () {
                            yield handleMessage({ data: message }, data => onmessage({ data }));
                        });
                    })();
                },
                terminate: () => { return; },
            };
            return syncWorker;
        }
        let worker;
        if (ctx.useLocalFiles) {
            // worker = new Worker(new URL('./worker.js', import.meta.url));
            throw new Error('useLocalFiles only supported locally');
        }
        else {
            const workerRes = yield fetch(`${getPortalBaseURL(ctx)}/static/js/mpcWorker-bundle.js`);
            const workerBlob = new Blob([yield workerRes.text()], { type: 'application/javascript' });
            const workerScriptURL = URL.createObjectURL(workerBlob);
            worker = new Worker(workerScriptURL);
        }
        worker.onmessage = onmessage;
        return worker;
    });
}
