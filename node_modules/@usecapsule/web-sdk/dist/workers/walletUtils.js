var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { SignatureScheme } from '@usecapsule/user-management-client';
import { getBaseMPCNetworkUrl } from '../core/external/capsuleClient';
const configCGGMPBase = (serverUrl, walletId, id) => `{"ServerUrl":"${serverUrl}", "WalletId": "${walletId}", "Id":"${id}", "Ids":["USER","CAPSULE"], "Threshold":1}`;
const configDKLSBase = (walletId, id) => `{"walletId": "${walletId}", "id":"${id}", "otherId":"CAPSULE", "isReceiver": false}`;
function keygenRequest(ctx, userId, walletId, protocolId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield ctx.mpcComputationClient.post('/wallets', {
            userId,
            walletId,
            protocolId,
        });
        return data;
    });
}
function signMessageRequest(ctx, userId, walletId, protocolId, message, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield ctx.mpcComputationClient.post(`/wallets/${walletId}/messages/sign`, {
            userId,
            protocolId,
            message,
            signer,
        });
        return data;
    });
}
function sendTransactionRequest(ctx, userId, walletId, protocolId, transaction, signer, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield ctx.mpcComputationClient.post(`/wallets/${walletId}/transactions/send`, {
            userId,
            protocolId,
            transaction,
            signer,
            chainId,
        });
        return data;
    });
}
export function keygen(ctx, userId, secretKey, callCustomFunction) {
    return __awaiter(this, void 0, void 0, function* () {
        const { walletId, protocolId } = yield ctx.capsuleClient.createWallet(userId, { useTwoSigners: true, scheme: ctx.useDKLS ? SignatureScheme.DKLS : SignatureScheme.CGGMP });
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return {
                signer: (yield keygenRequest(ctx, userId, walletId, protocolId)).signer,
                walletId,
            };
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, true);
        const signerConfigUser = ctx.useDKLS ?
            configDKLSBase(walletId, 'USER') :
            configCGGMPBase(serverUrl, walletId, 'USER');
        const createAccountFn = ctx.useDKLS ?
            global.dklsCreateAccount :
            global.createAccountV2;
        const newSigner = (yield new Promise((resolve, reject) => createAccountFn(signerConfigUser, serverUrl, protocolId, secretKey, callCustomFunction, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        })));
        return { signer: newSigner, walletId };
    });
}
export function signMessage(ctx, share, walletId, userId, message) {
    return __awaiter(this, void 0, void 0, function* () {
        const { protocolId, pendingTransactionId } = yield ctx.capsuleClient.preSignMessage(userId, walletId, message);
        if (pendingTransactionId) {
            console.log('sign message denied');
            return { pendingTransactionId };
        }
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return signMessageRequest(ctx, userId, walletId, protocolId, message, share);
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, true);
        const signMessageFn = ctx.useDKLS ?
            global.dklsSignMessage :
            global.signMessage;
        return new Promise((resolve, reject) => signMessageFn(share, serverUrl, message, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve({ signature: result });
        }));
    });
}
export function signTransaction(ctx, share, walletId, userId, tx, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { protocolId, pendingTransactionId } } = yield ctx.capsuleClient.signTransaction(userId, walletId, { transaction: tx, chainId });
        if (pendingTransactionId) {
            console.log('send transaction denied');
            return { pendingTransactionId };
        }
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return sendTransactionRequest(ctx, userId, walletId, protocolId, tx, share, chainId);
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, true);
        const signTransactionFn = ctx.useDKLS ?
            global.dklsSendTransaction :
            global.sendTransaction;
        return new Promise((resolve, reject) => signTransactionFn(share, serverUrl, tx, chainId, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve({ signature: result });
        }));
    });
}
export function sendTransaction(ctx, share, walletId, userId, tx, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { protocolId, pendingTransactionId } } = yield ctx.capsuleClient.sendTransaction(userId, walletId, { transaction: tx, chainId });
        if (pendingTransactionId) {
            console.log('send transaction denied');
            return { pendingTransactionId };
        }
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return sendTransactionRequest(ctx, userId, walletId, protocolId, tx, share, chainId);
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, true);
        const sendTransactionFn = ctx.useDKLS ?
            global.dklsSendTransaction :
            global.sendTransaction;
        return new Promise((resolve, reject) => sendTransactionFn(share, serverUrl, tx, chainId, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve({ signature: result });
        }));
    });
}
export function refresh(ctx, share, walletId, userId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { protocolId }, } = yield ctx.capsuleClient.refreshKeys(userId, walletId);
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, true);
        const refreshFn = ctx.useDKLS ?
            global.dklsRefresh :
            global.refresh;
        return new Promise((resolve, reject) => refreshFn(share, serverUrl, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        }));
    });
}
