// ANY CHANGES TO THIS FILE REQUIRE A REBUILD OF THE WORKER
// FILE IN THE PORTAL!
// run `yarn build-webpack` to rebuild the worker file
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import '../wasm/wasm_exec.js';
import * as walletUtils from './walletUtils';
import { getPortalBaseURL } from '../core/definitions';
import { initClient } from '../core/external/capsuleClient';
import * as mpcComputationClient from '../core/external/mpcComputationClient';
/* eslint-disable no-restricted-globals */
function loadWasm(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore
        const goWasm = new self.Go();
        const newRes = yield WebAssembly.instantiateStreaming(fetch(`${getPortalBaseURL(ctx)}/static/js/main.wasm`), goWasm.importObject);
        goWasm.run(newRes.instance);
    });
}
function executeMessage(ctx, message, callCustomFunction) {
    return __awaiter(this, void 0, void 0, function* () {
        const { functionType, params } = message;
        switch (functionType) {
            case 'KEYGEN': {
                const { userId, secretKey } = params;
                const keygenRes = yield walletUtils.keygen(ctx, userId, secretKey, callCustomFunction);
                return keygenRes;
            }
            case 'SIGN_TRANSACTION': {
                const { share, walletId, userId, tx, chainId } = params;
                return walletUtils.signTransaction(ctx, share, walletId, userId, tx, chainId);
            }
            case 'SEND_TRANSACTION': {
                const { share, walletId, userId, tx, chainId } = params;
                return walletUtils.sendTransaction(ctx, share, walletId, userId, tx, chainId);
            }
            case 'SIGN_MESSAGE': {
                const { share, walletId, userId, message } = params;
                return walletUtils.signMessage(ctx, share, walletId, userId, message);
            }
            case 'REFRESH': {
                const { share, walletId, userId } = params;
                return walletUtils.refresh(ctx, share, walletId, userId);
            }
            default: {
                throw new Error(`functionType: ${functionType} not supported`);
            }
        }
    });
}
export function handleMessage(e, postMessage, useFetchAdapter) {
    return __awaiter(this, void 0, void 0, function* () {
        const { env, apiKey, offloadMPCComputationURL, disableWorkers, sessionCookie, useDKLS } = e.data;
        if (!env) {
            // this means a message we didn't send was received and we want to ignore it
            return true;
        }
        const ctx = {
            env,
            apiKey,
            capsuleClient: initClient(env, apiKey, useFetchAdapter, () => sessionCookie),
            offloadMPCComputationURL: offloadMPCComputationURL,
            mpcComputationClient: offloadMPCComputationURL ? mpcComputationClient.initClient(offloadMPCComputationURL, !!disableWorkers) : undefined,
            useDKLS,
        };
        if (!ctx.offloadMPCComputationURL || ctx.useDKLS) {
            yield loadWasm(ctx);
        }
        function callCustomFunction(params) {
            postMessage({
                functionType: 'CUSTOM',
                params,
            });
        }
        const result = yield executeMessage(ctx, e.data, callCustomFunction);
        postMessage(result);
        return false;
    });
}
addEventListener('message', (e) => __awaiter(void 0, void 0, void 0, function* () {
    const skipClose = yield handleMessage(e, self.postMessage);
    if (skipClose) {
        return;
    }
    self.close();
}));
