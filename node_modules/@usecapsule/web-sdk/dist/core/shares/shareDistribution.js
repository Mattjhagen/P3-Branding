var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EncryptorType, KeyType } from '@usecapsule/user-management-client';
import { encryptWithDerivedPublicKey } from '../cryptography/utils';
import { sendRecoveryForShare } from './recovery';
// function to call on new user share to perform all necessary distribution
export function distributeNewShare(ctx, userId, walletId, userShare, ignoreRedistributingBackupEncryptedShare = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const publicKeysRes = yield ctx.capsuleClient.getSessionPublicKeys(userId);
        const biometricEncryptedShares = publicKeysRes.data.keys
            .map((key) => {
            if (!key.publicKey) {
                return;
            }
            const { encryptedMessageHex, encryptedKeyHex } = encryptWithDerivedPublicKey(key.sigDerivedPublicKey, userShare);
            return {
                encryptedShare: encryptedMessageHex,
                encryptedKey: encryptedKeyHex,
                type: KeyType.USER,
                encryptor: EncryptorType.BIOMETRICS,
                biometricPublicKey: key.sigDerivedPublicKey,
            };
        })
            .filter(Boolean);
        return yield sendRecoveryForShare(ctx, userId, walletId, biometricEncryptedShares, userShare, ignoreRedistributingBackupEncryptedShare);
    });
}
