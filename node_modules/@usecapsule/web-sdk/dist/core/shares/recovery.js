var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EncryptorType, KeyType, } from '@usecapsule/user-management-client';
import { KeyContainer } from './KeyContainer';
export function sendRecoveryForShare(ctx, userId, walletId, otherEncryptedShares, userSigner, ignoreRedistributingBackupEncryptedShare = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const recoveryPrivateKeyContainer = new KeyContainer(walletId, '', '');
        const encryptedUserBackup = recoveryPrivateKeyContainer.encryptForSelf(userSigner);
        const userBackupKeyShareOpts = {
            encryptedShare: encryptedUserBackup,
            type: KeyType.USER,
            encryptor: EncryptorType.RECOVERY,
        };
        yield ctx.capsuleClient.uploadKeyshares(userId, walletId, [
            ...otherEncryptedShares,
            ...(ignoreRedistributingBackupEncryptedShare
                ? []
                : [userBackupKeyShareOpts]),
        ]);
        yield ctx.capsuleClient.distributeCapsuleShare(userId, walletId, ctx.useDKLS);
        return JSON.stringify(recoveryPrivateKeyContainer);
    });
}
