import forge from 'node-forge';
import { Ctx } from '../definitions';
interface EncryptedShare {
    walletId: string;
    encryptedShare: string;
    encryptedKey: string;
}
export declare function getSHA256HashHex(str: string): string;
export declare function getPublicKeyHex(keyPair: forge.pki.rsa.KeyPair): string;
export declare function getAsymmetricKeyPair(ctx: Ctx, seedValue?: string): Promise<forge.pki.rsa.KeyPair>;
export declare function getPublicKeyFromSignature(ctx: Ctx, userHandle: Uint8Array): Promise<string>;
export declare function symmetricKeyEncryptMessage(message: string): {
    key: string;
    encryptedMessageHex: string;
};
export declare function decryptWithKeyPair(keyPair: forge.pki.rsa.KeyPair, encryptedMessageHex: string, encryptedKeyHex: string): string;
export declare function getDerivedPrivateKeyAndDecrypt(ctx: Ctx, seedValue: string, encryptedShares: EncryptedShare[]): Promise<{
    walletId: string;
    signer: string;
}[]>;
export declare function encryptWithDerivedPublicKey(publicKeyHex: string, message: string): {
    encryptedMessageHex: string;
    encryptedKeyHex: string;
};
export {};
