"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyType = exports.EncryptorType = exports.Chain = exports.SignatureScheme = exports.PublicKeyType = exports.PublicKeyStatus = exports.USER_NOT_MATCHING_ERROR = exports.USER_NOT_AUTHENTICATED_ERROR = exports.USER_NOT_VERIFIED = void 0;
var axios_1 = __importDefault(require("axios"));
exports.USER_NOT_VERIFIED = 'user must verify biometrics';
exports.USER_NOT_AUTHENTICATED_ERROR = 'user must be authenticated';
exports.USER_NOT_MATCHING_ERROR = 'route param userId must match session userId';
var PublicKeyStatus;
(function (PublicKeyStatus) {
    PublicKeyStatus["PENDING"] = "PENDING";
    PublicKeyStatus["COMPLETE"] = "COMPLETE";
})(PublicKeyStatus = exports.PublicKeyStatus || (exports.PublicKeyStatus = {}));
var PublicKeyType;
(function (PublicKeyType) {
    PublicKeyType["MOBILE"] = "MOBILE";
    PublicKeyType["WEB"] = "WEB";
})(PublicKeyType = exports.PublicKeyType || (exports.PublicKeyType = {}));
var SignatureScheme;
(function (SignatureScheme) {
    SignatureScheme["DKLS"] = "DKLS";
    SignatureScheme["CGGMP"] = "CGGMP";
})(SignatureScheme = exports.SignatureScheme || (exports.SignatureScheme = {}));
var Chain;
(function (Chain) {
    Chain["ETH"] = "ETH";
    Chain["CELO"] = "CELO";
    Chain["MATIC"] = "MATIC";
})(Chain = exports.Chain || (exports.Chain = {}));
var EncryptorType;
(function (EncryptorType) {
    EncryptorType["USER"] = "USER";
    EncryptorType["RECOVERY"] = "RECOVERY";
    EncryptorType["BIOMETRICS"] = "BIOMETRICS";
})(EncryptorType = exports.EncryptorType || (exports.EncryptorType = {}));
exports.KeyType = {
    USER: 'USER',
    RECOVERY: 'RECOVERY',
};
var SESSION_COOKIE_HEADER_NAME = 'x-capsule-sid';
var Client = /** @class */ (function () {
    function Client(_a) {
        var userManagementHost = _a.userManagementHost, apiKey = _a.apiKey, opts = _a.opts, retrieveSessionCookie = _a.retrieveSessionCookie, persistSessionCookie = _a.persistSessionCookie;
        var _this = this;
        this.createUser = function (body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users", body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        }); };
        this.checkUserExists = function (email) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/exists?email=".concat(encodeURIComponent(email)))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /users/:userId/verify-email
        this.verifyEmail = function (userId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/verify-email"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /users/:userId/biometrics/key
        this.addSessionPublicKey = function (userId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/biometrics/key"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // GET /users/:userId/biometrics/keys
        this.getSessionPublicKeys = function (userId) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/biometrics/keys"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // GET /users/:userId/biometrics/:biometricId
        this.getSessionPublicKey = function (userId, biometricId) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/biometrics/").concat(biometricId))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // PATCH /users/:userId/biometrics/:biometricId
        this.patchSessionPublicKey = function (userId, biometricId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.patch("/users/".concat(userId, "/biometrics/").concat(biometricId), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // GET /biometrics/challenge?email&publicKey
        this.getWebChallenge = function (email, publicKey) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/biometrics/challenge?email=".concat(email).concat(publicKey ? "&publicKey=".concat(publicKey) : ''))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /touch
        this.touchSession = function (regenerate) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/touch?regenerate=".concat(!!regenerate))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /biometrics/verify
        this.verifyWebChallenge = function (body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/biometrics/verify", body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // GET /users/:userId/biometrics/challenge
        this.getSessionChallenge = function (userId) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/biometrics/challenge"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /users/:userId/biometrics/verify
        this.verifySessionChallenge = function (userId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/biometrics/verify"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /users/:userId/wallets
        this.createWallet = function (userId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        }); };
        // POST /users/:userId/wallets/:walletId/transactions/send
        this.sendTransaction = function (userId, walletId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId, "/transactions/send"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // functionality changed to only sign transactions and not send them
        // POST /users/:userId/wallets/:walletId/transactions/sign
        this.signTransaction = function (userId, walletId, body) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId, "/transactions/sign"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /users/:userId/wallets/:walletId/refresh
        this.refreshKeys = function (userId, walletId) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId, "/refresh"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // PATCH /users/:userId/wallets/:walletId
        this.updateWallet = function (userId, walletId) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // GET /users/:userId/wallets
        this.getWallets = function (userId) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/wallets"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /login
        this.login = function (email) { return __awaiter(_this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { email: email };
                        return [4 /*yield*/, this.baseRequest.post('/login', body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /login
        this.verifyLogin = function (verificationCode) { return __awaiter(_this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { verificationCode: verificationCode };
                        return [4 /*yield*/, this.baseRequest.post('/login/verify-email', body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // GET /logout
        this.logout = function () { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get('/logout')];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /recovery/verification
        this.recoveryVerification = function (email, verificationCode) { return __awaiter(_this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { email: email, verificationCode: verificationCode };
                        return [4 /*yield*/, this.baseRequest.post('/recovery/verification', body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        // POST /recovery
        this.recoveryInit = function (email) { return __awaiter(_this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { email: email };
                        return [4 /*yield*/, this.baseRequest.post('/recovery', body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        }); };
        this.preSignMessage = function (userId, walletId, tx) { return __awaiter(_this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { message: tx };
                        return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId, "/messages/sign"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        }); };
        // TODO remove after this is not optional anymore
        var headers = apiKey ? { "X-External-API-Key": apiKey } : undefined;
        var axiosConfig = {
            baseURL: userManagementHost,
            withCredentials: true,
            headers: headers,
        };
        if (retrieveSessionCookie) {
            var defaultTransformRequest = Array.isArray(axios_1.default.defaults.transformRequest) ?
                axios_1.default.defaults.transformRequest :
                [axios_1.default.defaults.transformRequest];
            axiosConfig.transformRequest = __spreadArray([
                function (data, headers) {
                    if (!headers) {
                        headers = {};
                    }
                    var currentSessionCookie = retrieveSessionCookie();
                    if (currentSessionCookie) {
                        headers[SESSION_COOKIE_HEADER_NAME] = currentSessionCookie;
                    }
                    return data;
                }
            ], defaultTransformRequest, true);
        }
        if (persistSessionCookie) {
            var defaultTransformResponse = Array.isArray(axios_1.default.defaults.transformResponse) ?
                axios_1.default.defaults.transformResponse :
                [axios_1.default.defaults.transformResponse];
            axiosConfig.transformResponse = __spreadArray(__spreadArray([], defaultTransformResponse, true), [
                function (data, headers) {
                    if (headers === null || headers === void 0 ? void 0 : headers[SESSION_COOKIE_HEADER_NAME]) {
                        persistSessionCookie(headers[SESSION_COOKIE_HEADER_NAME]);
                    }
                    return data;
                },
            ], false);
        }
        this.baseRequest = axios_1.default.create(axiosConfig);
        if (opts === null || opts === void 0 ? void 0 : opts.useFetchAdapter) {
            axios_1.default.defaults.adapter = function (config) {
                return fetch(config.baseURL + config.url.substring(1), {
                    method: config.method,
                    headers: config.headers,
                    body: config.data,
                    credentials: config.withCredentials ? 'include' : undefined
                }).then(function (response) {
                    return response.text().then(function (text) { return ({
                        data: text,
                        status: response.status,
                        statusText: response.statusText,
                        headers: response.headers,
                        config: config,
                        request: fetch
                    }); });
                }).catch(function (reason) {
                    throw reason;
                });
            };
        }
    }
    // DEPRECATED: use uploadUserKeyShares instead
    // POST /users/:userId/wallets/:walletId/key-shares
    Client.prototype.uploadKeyshares = function (userId, walletId, encryptedKeyshares) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { keyShares: encryptedKeyshares };
                        return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId, "/key-shares"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST /users/:userId/wallets/:walletId/key-shares
    Client.prototype.uploadUserKeyShares = function (userId, encryptedKeyshares) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { keyShares: encryptedKeyshares };
                        return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/key-shares"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // GET /users/:userId/wallets/:walletId/key-shares
    Client.prototype.getKeyshare = function (userId, walletId, type, encryptor) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/wallets/").concat(walletId, "/key-shares?type=").concat(type).concat(encryptor ? "&encryptor=".concat(encryptor) : ''))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // GET /users/:userId/biometrics/key-shares
    Client.prototype.getBiometricKeyshares = function (userId, biometricPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/biometrics/key-shares?publicKey=").concat(biometricPublicKey))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST '/users/:userId/temporary-shares',
    Client.prototype.uploadTransmissionKeyshares = function (userId, shares) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { shares: shares };
                        return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/temporary-shares"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // GET /users/:userId/temporary-shares returns { temporaryShares: { userId: string, walletId: string, encryptedShare: string, encryptedKey?: string }[] }
    Client.prototype.getTransmissionKeyshares = function (userId, sessionLookupId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/temporary-shares?sessionLookupId=").concat(sessionLookupId))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // get /users/:userId/wallets/:walletId/capsule-share
    Client.prototype.getCapsuleShare = function (userId, walletId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/wallets/").concat(walletId, "/capsule-share"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST '/users/:userId/resend-verification-code
    Client.prototype.resendVerificationCode = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/resend-verification-code"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST recovery/cancel
    Client.prototype.cancelRecoveryAttempt = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("recovery/cancel", { email: email })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // GET '/2fa/users/:userId/check-status'
    Client.prototype.check2FAStatus = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/2fa/users/".concat(userId, "/check-status"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST '/2fa/users/:userId/enable'
    Client.prototype.enable2FA = function (userId, verificationCode) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/2fa/users/".concat(userId, "/enable"), { verificationCode: verificationCode })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST '/2fa/users/:userId/setup'
    Client.prototype.setup2FA = function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/2fa/users/".concat(userId, "/setup"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST /recovery/init
    Client.prototype.initializeRecovery = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/recovery/init", { email: email })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST /recovery/users/:userId/wallets/:walletId/finish
    Client.prototype.finalizeRecovery = function (userId, walletId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/recovery/users/".concat(userId, "/wallets/").concat(walletId, "/finish"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // GET /recovery/users/:userId/wallets/:walletId/key-shares
    Client.prototype.recoverUserShare = function (userId, walletId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/recovery/users/".concat(userId, "/wallets/").concat(walletId, "/key-shares?type=USER&encryptor=RECOVERY"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST /recovery/verify-email
    Client.prototype.verifyEmailForRecovery = function (email, verificationCode) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { email: email, verificationCode: verificationCode };
                        return [4 /*yield*/, this.baseRequest.post("/recovery/verify-email", body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // POST /2fa/verify
    Client.prototype.verify2FA = function (email, verificationCode) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { email: email, verificationCode: verificationCode };
                        return [4 /*yield*/, this.baseRequest.post('/2fa/verify', body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.tempTrasmissionInit = function (message, userId) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { message: message, userId: userId };
                        return [4 /*yield*/, this.baseRequest.post('/temporary-transmissions', body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.tempTrasmission = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/temporary-transmissions/".concat(id))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.getPartner = function (partnerId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/partners/".concat(partnerId))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.acceptScopes = function (userId, body) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/scopes/accept"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.getPendingTransaction = function (userId, pendingTransactionid) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/pending-transactions/").concat(pendingTransactionid))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.acceptPendingTransaction = function (userId, pendingTransactionId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/pending-transactions/").concat(pendingTransactionId, "/accept"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.getPolicyPermissions = function (userId, policyId) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.baseRequest.get("/users/".concat(userId, "/policies/").concat(policyId, "/permissions"))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    Client.prototype.distributeCapsuleShare = function (userId, walletId, useDKLS) {
        return __awaiter(this, void 0, void 0, function () {
            var body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = { useDKLS: useDKLS };
                        return [4 /*yield*/, this.baseRequest.post("/users/".concat(userId, "/wallets/").concat(walletId, "/capsule-share/distribute"), body)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return Client;
}());
exports.default = Client;
// GET /users/:userId/wallets/:walletId/send (NOTE: endpoint not found in server)
// NOT USED IN DEMO
// POST /users/:userId/wallets/:walletId/presign
// POST /users/:userId/wallets/:walletId/presign-online
// POST /auth/signup/web
// GET /logout
// POST /users/:userId/wallets/:walletId/key
// GET /users/:userId/wallets/:walletId/key
// GET /users/:userId/configurations
// POST /users/:userId/permissions
// GET /
//# sourceMappingURL=client.js.map