/**
 * Returns the decoded date of a field.
 *
 * @param value The field value.
 *
 * @returns The decoded date.
 */
declare function getFieldDate(value: string): Date | null;

/**
 * Form data info type.
 */
type FormDataInfo = Partial<{
    arrays: string[];
    booleans: string[];
    dates: string[];
    files: string[];
    numbers: string[];
}>;

/**
 * Returns the decoded value of a field.
 *
 * @param templateName The template name.
 * @param value The field value.
 * @param info The form data info.
 *
 * @returns The decoded value.
 */
declare function getFieldValue(info: FormDataInfo | undefined, templateName: string, value: FormDataEntryValue): number | boolean | Date | FormDataEntryValue | null;

/**
 * Returns the value of a path and supplements empty arrays and objects.
 *
 * @param pathKeys The path keys.
 * @param templateKeys The template keys.
 * @param values The values object.
 *
 * @returns The path value.
 */
declare function getPathObject(pathKeys: string[], templateKeys: string[], values: any): any;

/**
 * Returns every possible value path.
 *
 * @param templateName The template name.
 * @param values The values object.
 *
 * @returns Every value path.
 */
declare function getValuePaths(templateName: string, values: any): string[];

/**
 * Decodes the form data entries. Information that is lost during the transfer
 * via HTTP can be supplemented.
 *
 * @param formData The form data object.
 * @param info The form data info.
 *
 * @returns The decoded form values.
 */
declare function decode<TOutput extends Record<string, any> = Record<string, unknown>>(formData: FormData, info?: FormDataInfo): TOutput;

export { decode, getFieldDate, getFieldValue, getPathObject, getValuePaths };
