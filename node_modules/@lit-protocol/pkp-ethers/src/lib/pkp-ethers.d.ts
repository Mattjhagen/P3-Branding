import { Provider, TransactionRequest } from '@ethersproject/abstract-provider';
import { ExternallyOwnedAccount, Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from '@ethersproject/abstract-signer';
import { Bytes } from '@ethersproject/bytes';
import { ProgressCallback } from '@ethersproject/json-wallets';
import { Wordlist } from '@ethersproject/wordlists';
import { ethers, Wallet } from 'ethers';
import { PKPClientHelpers, PKPEthersWalletProp } from '@lit-protocol/types';
import { PKPBase } from '@lit-protocol/pkp-base';
import { ETHRequestSigningPayload } from './pkp-ethers-types';
export declare class PKPEthersWallet extends PKPBase implements Signer, ExternallyOwnedAccount, TypedDataSigner, PKPClientHelpers {
    readonly address: string;
    readonly _isSigner: boolean;
    rpcProvider: ethers.providers.JsonRpcProvider;
    provider: Provider;
    manualGasPrice?: string;
    manualGasLimit?: string;
    nonce?: string;
    chainId?: number;
    constructor(prop: PKPEthersWalletProp);
    getRpc: () => string;
    setRpc: (rpc: string) => Promise<void>;
    handleRequest: <T = string | ethers.Transaction>(payload: ETHRequestSigningPayload) => Promise<T>;
    setGasPrice: (gasPrice: string) => void;
    setGasLimit: (gasLimit: string) => void;
    setNonce: (nonce: string) => void;
    setChainId: (chainId: number) => void;
    resetManualSettings: () => void;
    get publicKey(): string;
    getAddress(): Promise<string>;
    connect(): never;
    signTransaction(transaction: TransactionRequest): Promise<string>;
    signMessage(message: Bytes | string): Promise<string>;
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
    encrypt(password: Bytes | string, options?: any, progressCallback?: ProgressCallback): Promise<string>;
    sendTransaction(transaction: TransactionRequest | any): Promise<any>;
    /**
     *  Static methods to create Wallet instances.
     */
    static createRandom(options?: any): Wallet;
    static fromEncryptedJson(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<Wallet>;
    static fromEncryptedJsonSync(json: string, password: Bytes | string): Wallet;
    static fromMnemonic(mnemonic: string, path?: string, wordlist?: Wordlist): Wallet;
    getBalance(blockTag?: ethers.providers.BlockTag | undefined): Promise<ethers.BigNumber>;
    getTransactionCount(blockTag?: ethers.providers.BlockTag | undefined): Promise<number>;
    estimateGas(transaction: ethers.utils.Deferrable<TransactionRequest>): Promise<ethers.BigNumber>;
    call(transaction: ethers.utils.Deferrable<TransactionRequest>, blockTag?: ethers.providers.BlockTag | undefined): Promise<string>;
    getChainId(): Promise<number>;
    getGasPrice(): Promise<ethers.BigNumber>;
    getFeeData(): Promise<ethers.providers.FeeData>;
    resolveName(name: string): Promise<string>;
    checkTransaction(transaction: ethers.utils.Deferrable<TransactionRequest>): ethers.utils.Deferrable<TransactionRequest>;
    populateTransaction(transaction: ethers.utils.Deferrable<TransactionRequest>): Promise<TransactionRequest>;
    _checkProvider(operation?: string | undefined): void;
    get mnemonic(): never;
    get privateKey(): string;
}
