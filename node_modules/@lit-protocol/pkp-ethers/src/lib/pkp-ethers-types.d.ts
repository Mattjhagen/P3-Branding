import { PKPEthersWallet } from './pkp-ethers';
import { TypedDataField, TypedDataSigner } from '@ethersproject/abstract-signer';
import { Transaction } from 'ethers';
export declare type LitTypeDataSigner = PKPEthersWallet | TypedDataSigner;
export interface EIP712TypedData {
    types: {
        Person: TypedDataField[];
        Mail: TypedDataField[];
        [key: string]: TypedDataField[];
    };
    primaryType: string;
    domain: {
        name: string;
        version: string;
        chainId: number;
        verifyingContract: string;
    };
    message: {
        from: {
            name: string;
            wallet: string;
        };
        to: {
            name: string;
            wallet: string;
        };
        contents: string;
    };
}
export declare type SupportedETHSigningMethods = 'eth_sign' | 'personal_sign' | 'eth_signTransaction' | 'eth_signTypedData' | 'eth_signTypedData_v1' | 'eth_signTypedData_v3' | 'eth_signTypedData_v4' | 'eth_sendTransaction' | 'eth_sendRawTransaction';
export interface ETHRequestSigningPayload {
    method: SupportedETHSigningMethods;
    params: any[];
}
export declare type ETHHandlerReq = {
    signer: LitTypeDataSigner;
    payload: ETHRequestSigningPayload;
};
export declare type ETHRequestHandler = (request: ETHHandlerReq) => Promise<ETHHandlerRes>;
export declare type UnknownETHMethod = Record<string, Function>;
export declare type ETHSignature = string;
export declare type ETHTxRes = Transaction;
export declare type ETHHandlerRes = {
    signature: ETHSignature;
} | {
    txRes: Transaction;
};
