/**
 * This module defines the PKPBase class, which provides a base implementation for wallet functionality
 * that can be shared between Ethers and Cosmos signers. The class is responsible for managing public key
 * compression, initializing and connecting to the LIT node, and running LIT actions based on provided properties.
 * The class also includes debug functions for logging and error handling.
 *
 * The module exports the PKPBase class, as well as the PKPBaseProp type definition used for
 * initializing the class instances.
 */
import { PKPBaseProp, AuthSig, PKPBaseDefaultParams, GetSessionSigsProps, SessionSigs, RPCUrls, AuthMethod } from '@lit-protocol/types';
import { LitNodeClient } from '@lit-protocol/lit-node-client';
/**
 * A base class that can be shared between Ethers and Cosmos signers.
 */
export declare class PKPBase<T = PKPBaseDefaultParams> {
    rpcs?: RPCUrls;
    controllerAuthSig?: AuthSig;
    controllerAuthMethods?: AuthMethod[];
    controllerSessionSigs?: SessionSigs;
    sessionSigsExpiration?: string;
    uncompressedPubKey: string;
    uncompressedPubKeyBuffer: Uint8Array;
    compressedPubKey: string;
    compressedPubKeyBuffer: Uint8Array;
    litNodeClient: LitNodeClient;
    litNodeClientReady: boolean;
    litActionCode?: string;
    litActionIPFS?: string;
    litActionJsParams: T;
    debug: boolean;
    useAction: boolean | undefined;
    private PREFIX;
    private orange;
    private reset;
    private red;
    /**
     * Constructor for the PKPBase class.
     * Initializes the instance with the provided properties.
     *
     * @param { PKPBaseProp } prop - The properties for the PKPBase instance.
     */
    constructor(prop: PKPBaseProp);
    /**
     * Sets the uncompressed public key and its buffer representation.
     *
     * @param { PKPBaseProp } prop - The properties for the PKPBase instance.
     */
    setUncompressPubKeyAndBuffer(prop: PKPBaseProp): void | never;
    /**
     * Sets the compressed public key and its buffer representation.
     *
     * @param {PKPBaseProp} prop - The properties for the PKPBase instance.
     */
    setCompressedPubKeyAndBuffer(prop: PKPBaseProp): void | never;
    /**
     * Sets the Lit action to be executed by the LitNode client.
     *
     * @param {PKPBaseProp} prop - An object containing the parameters for the Lit action.
     *
     * @returns {never | void} - If both `litActionCode` and `litActionIPFS` are present, throws an Error. Otherwise, does not return a value.
     */
    setLitAction(prop: PKPBaseProp): never | void;
    /**
     * A function that sets the value of the litActionJsParams property to the given params object.
     * @template CustomType - A generic type that extends T, where T is the type of the litActionJsParams property.
     * @param { CustomType } params - An object of type CustomType that contains the parameters to be set as litActionJsParams.
     * @returns { void }
     * @memberOf SomeClass
     */
    setLitActionJsParams<CustomType extends T = T>(params: CustomType): void;
    /**
     * Creates and sets the session sigs and their expiration.
     *
     * @param {GetSessionSigsProps} sessionParams - The parameters for generating session sigs.
     */
    createAndSetSessionSigs(sessionParams: GetSessionSigsProps): Promise<void | never>;
    /**
     * Base method to be overridden by subclasses.
     *
     * @returns {Promise<string>} - Address associated with concrete type of PKPBase
     */
    getAddress(): Promise<string>;
    /**
     * Initializes the PKPBase instance by connecting to the LIT node.
     */
    init(): Promise<void | never>;
    /**
     * Runs the specified Lit action with the given parameters.
     *
     * @param {Uint8Array} toSign - The data to be signed by the Lit action.
     * @param {string} sigName - The name of the signature to be returned by the Lit action.
     *
     * @returns {Promise<any>} - A Promise that resolves with the signature returned by the Lit action.
     *
     * @throws {Error} - Throws an error if `pkpPubKey` is not provided, if `controllerAuthSig` or `controllerSessionSigs` is not provided, if `controllerSessionSigs` is not an object, if `executeJsArgs` does not have either `code` or `ipfsId`, or if an error occurs during the execution of the Lit action.
     */
    runLitAction(toSign: Uint8Array, sigName: string): Promise<any>;
    runSign(toSign: Uint8Array): Promise<any>;
    /**
     * Ensures that the LitNode client is ready for use by waiting for initialization if necessary.
     * If the client is already ready, this function does nothing.
     *
     * @returns {Promise<void>} - A Promise that resolves when the LitNode client is ready for use.
     */
    ensureLitNodeClientReady(): Promise<void>;
    /**
     * Logs the provided arguments to the console, but only if debugging is enabled.
     *
     * @param {...any[]} args - The values to be logged to the console.
     *
     * @returns {void} - This function does not return a value.
     */
    log(...args: any[]): void;
    /**
     * Logs an error message to the console and throws an Error with the same message.
     *
     * @param {string} message - The error message to be logged and thrown.
     *
     * @returns {never} - This function does not return a value since it always throws an Error.
     */
    throwError: (message: string) => never;
}
