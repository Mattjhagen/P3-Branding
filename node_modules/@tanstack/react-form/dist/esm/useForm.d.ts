import { FormApi, FormOptions, FormState, Validator } from '@tanstack/form-core';
import { ReactNode } from 'rehackt';
import { FieldComponent, UseField } from './useField.js';
import { NoInfer } from '@tanstack/react-store';

declare module '@tanstack/form-core' {
    interface FormApi<TFormData, TFormValidator> {
        Field: FieldComponent<TFormData, TFormValidator>;
        useField: UseField<TFormData, TFormValidator>;
        useStore: <TSelected = NoInfer<FormState<TFormData>>>(selector?: (state: NoInfer<FormState<TFormData>>) => TSelected) => TSelected;
        Subscribe: <TSelected = NoInfer<FormState<TFormData>>>(props: {
            /**
            TypeScript versions <=5.0.4 have a bug that prevents
            the type of the `TSelected` generic from being inferred
            from the return type of this method.
      
            In these versions, `TSelected` will fall back to the default
            type (or `unknown` if that's not defined).
      
            @see {@link https://github.com/TanStack/form/pull/606/files#r1506715714 | This discussion on GitHub for the details}
            @see {@link https://github.com/microsoft/TypeScript/issues/52786 | The bug report in `microsoft/TypeScript`}
            */
            selector?: (state: NoInfer<FormState<TFormData>>) => TSelected;
            children: ((state: NoInfer<TSelected>) => ReactNode) | ReactNode;
        }) => JSX.Element;
    }
}
export declare function useForm<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined>(opts?: FormOptions<TFormData, TFormValidator>): FormApi<TFormData, TFormValidator>;
