import { Field, useField } from './useField.js';
import { ValidateFormData } from './validateFormData.js';
import { FormApi, FormOptions, Validator } from '@tanstack/form-core';

export type FormFactory<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> = {
    useForm: (opts?: FormOptions<TFormData, TFormValidator>) => FormApi<TFormData, TFormValidator>;
    useField: typeof useField;
    Field: typeof Field;
    validateFormData: ValidateFormData<TFormData, TFormValidator>;
    initialFormState: Partial<FormApi<TFormData, TFormValidator>['state']>;
};
export declare function createFormFactory<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined>(defaultOpts?: FormOptions<TFormData, TFormValidator>): FormFactory<TFormData, TFormValidator>;
