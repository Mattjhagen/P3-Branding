{"version":3,"file":"validateFormData.cjs","sources":["../../src/validateFormData.ts"],"sourcesContent":["import { decode } from 'decode-formdata'\nimport type {\n  FormApi,\n  FormOptions,\n  ValidationError,\n  Validator,\n} from '@tanstack/form-core'\n\ntype OnServerValidateFn<TFormData> = (props: {\n  value: TFormData\n}) => ValidationError\n\ntype OnServerValidateOrFn<\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n> = TFormValidator extends Validator<TFormData, infer FFN>\n  ? FFN | OnServerValidateFn<TFormData>\n  : OnServerValidateFn<TFormData>\n\ndeclare module '@tanstack/form-core' {\n  // eslint-disable-next-line no-shadow\n  interface FormOptions<\n    TFormData,\n    TFormValidator extends\n      | Validator<TFormData, unknown>\n      | undefined = undefined,\n  > {\n    onServerValidate?: OnServerValidateOrFn<TFormData, TFormValidator>\n  }\n}\n\nexport type ValidateFormData<\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n> = (\n  formData: FormData,\n  info?: Parameters<typeof decode>[1],\n) => Promise<Partial<FormApi<TFormData, TFormValidator>['state']>>\n\nexport const getValidateFormData = <\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n>(\n  defaultOpts?: FormOptions<TFormData, TFormValidator>,\n) =>\n  (async (\n    formData: FormData,\n    info?: Parameters<typeof decode>[1],\n  ): Promise<Partial<FormApi<TFormData, TFormValidator>['state']>> => {\n    const { validatorAdapter, onServerValidate } = defaultOpts || {}\n\n    const runValidator = (propsValue: { value: TFormData }) => {\n      if (validatorAdapter && typeof onServerValidate !== 'function') {\n        return validatorAdapter().validate(propsValue, onServerValidate)\n      }\n\n      return (onServerValidate as OnServerValidateFn<TFormData>)(propsValue)\n    }\n\n    const data = decode(formData, info) as never as TFormData\n\n    const onServerError = runValidator({ value: data })\n\n    return {\n      errorMap: {\n        onServer: onServerError,\n      },\n      errors: onServerError ? [onServerError] : [],\n    }\n  }) as ValidateFormData<TFormData, TFormValidator>\n"],"names":["decode"],"mappings":";;;AAuCO,MAAM,sBAAsB,CAIjC,gBAEC,OACC,UACA,SACkE;AAClE,QAAM,EAAE,kBAAkB,qBAAqB,eAAe,CAAA;AAExD,QAAA,eAAe,CAAC,eAAqC;AACrD,QAAA,oBAAoB,OAAO,qBAAqB,YAAY;AAC9D,aAAO,iBAAiB,EAAE,SAAS,YAAY,gBAAgB;AAAA,IACjE;AAEA,WAAQ,iBAAmD,UAAU;AAAA,EAAA;AAGjE,QAAA,OAAOA,eAAAA,OAAO,UAAU,IAAI;AAElC,QAAM,gBAAgB,aAAa,EAAE,OAAO,KAAM,CAAA;AAE3C,SAAA;AAAA,IACL,UAAU;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ,gBAAgB,CAAC,aAAa,IAAI,CAAC;AAAA,EAAA;AAE/C;;"}