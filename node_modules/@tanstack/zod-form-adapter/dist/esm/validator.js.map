{"version":3,"file":"validator.js","sources":["../../src/validator.ts"],"sourcesContent":["import type { SafeParseError, ZodType, ZodTypeAny } from 'zod'\nimport type { ValidationError, Validator } from '@tanstack/form-core'\n\nexport const zodValidator = () => {\n  return {\n    validate({ value }: { value: unknown }, fn: ZodType): ValidationError {\n      // Call Zod on the value here and return the error message\n      const result = (fn as ZodTypeAny).safeParse(value)\n      if (!result.success) {\n        return (result as SafeParseError<any>).error.issues\n          .map((issue) => issue.message)\n          .join(', ')\n      }\n      return\n    },\n    async validateAsync(\n      { value }: { value: unknown },\n      fn: ZodType,\n    ): Promise<ValidationError> {\n      // Call Zod on the value here and return the error message\n      const result = await (fn as ZodTypeAny).safeParseAsync(value)\n      if (!result.success) {\n        return (result as SafeParseError<any>).error.issues\n          .map((issue) => issue.message)\n          .join(', ')\n      }\n      return\n    },\n  }\n}\n"],"names":[],"mappings":"AAGO,MAAM,eAAe,MAAM;AACzB,SAAA;AAAA,IACL,SAAS,EAAE,MAAM,GAAuB,IAA8B;AAE9D,YAAA,SAAU,GAAkB,UAAU,KAAK;AAC7C,UAAA,CAAC,OAAO,SAAS;AACX,eAAA,OAA+B,MAAM,OAC1C,IAAI,CAAC,UAAU,MAAM,OAAO,EAC5B,KAAK,IAAI;AAAA,MACd;AACA;AAAA,IACF;AAAA,IACA,MAAM,cACJ,EAAE,SACF,IAC0B;AAE1B,YAAM,SAAS,MAAO,GAAkB,eAAe,KAAK;AACxD,UAAA,CAAC,OAAO,SAAS;AACX,eAAA,OAA+B,MAAM,OAC1C,IAAI,CAAC,UAAU,MAAM,OAAO,EAC5B,KAAK,IAAI;AAAA,MACd;AACA;AAAA,IACF;AAAA,EAAA;AAEJ;"}