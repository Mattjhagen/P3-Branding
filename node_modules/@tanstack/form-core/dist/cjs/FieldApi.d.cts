import { Store } from '@tanstack/store';
import { FieldInfo, FormApi } from './FormApi.cjs';
import { ValidationCause, ValidationError, ValidationErrorMap, Validator } from './types.cjs';
import { Updater } from './utils.cjs';
import { DeepKeys, DeepValue, NoInfer } from './util-types.cjs';

export type FieldValidateFn<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> = (props: {
    value: TData;
    fieldApi: FieldApi<TParentData, TName, TFieldValidator, TFormValidator, TData>;
}) => ValidationError;
export type FieldValidateOrFn<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> = TFieldValidator extends Validator<TData, infer TFN> ? TFN | FieldValidateFn<TParentData, TName, TFieldValidator, TFormValidator, TData> : TFormValidator extends Validator<TParentData, infer FFN> ? FFN | FieldValidateFn<TParentData, TName, TFieldValidator, TFormValidator, TData> : FieldValidateFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
export type FieldValidateAsyncFn<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> = (options: {
    value: TData;
    fieldApi: FieldApi<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    signal: AbortSignal;
}) => ValidationError | Promise<ValidationError>;
export type FieldAsyncValidateOrFn<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> = TFieldValidator extends Validator<TData, infer TFN> ? TFN | FieldValidateAsyncFn<TParentData, TName, TFieldValidator, TFormValidator, TData> : TFormValidator extends Validator<TParentData, infer FFN> ? FFN | FieldValidateAsyncFn<TParentData, TName, TFieldValidator, TFormValidator, TData> : FieldValidateAsyncFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
export interface FieldValidators<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> {
    onMount?: FieldValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    onChange?: FieldValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    onChangeAsync?: FieldAsyncValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    onChangeAsyncDebounceMs?: number;
    onChangeListenTo?: DeepKeys<TParentData>[];
    onBlur?: FieldValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    onBlurAsync?: FieldAsyncValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    onBlurAsyncDebounceMs?: number;
    onBlurListenTo?: DeepKeys<TParentData>[];
    onSubmit?: FieldValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    onSubmitAsync?: FieldAsyncValidateOrFn<TParentData, TName, TFieldValidator, TFormValidator, TData>;
}
export interface FieldOptions<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> {
    name: TName;
    defaultValue?: NoInfer<TData>;
    asyncDebounceMs?: number;
    asyncAlways?: boolean;
    preserveValue?: boolean;
    validatorAdapter?: TFieldValidator;
    validators?: FieldValidators<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    defaultMeta?: Partial<FieldMeta>;
}
export interface FieldApiOptions<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> extends FieldOptions<TParentData, TName, TFieldValidator, TFormValidator, TData> {
    form: FormApi<TParentData, TFormValidator>;
}
export type FieldMeta = {
    isTouched: boolean;
    isPristine: boolean;
    isDirty: boolean;
    touchedErrors: ValidationError[];
    errors: ValidationError[];
    errorMap: ValidationErrorMap;
    isValidating: boolean;
};
export type FieldState<TData> = {
    value: TData;
    meta: FieldMeta;
};
export type ResolveName<TParentData> = unknown extends TParentData ? string : DeepKeys<TParentData>;
export declare class FieldApi<TParentData, TName extends DeepKeys<TParentData>, TFieldValidator extends Validator<DeepValue<TParentData, TName>, unknown> | undefined = undefined, TFormValidator extends Validator<TParentData, unknown> | undefined = undefined, TData extends DeepValue<TParentData, TName> = DeepValue<TParentData, TName>> {
    form: FieldApiOptions<TParentData, TName, TFieldValidator, TFormValidator, TData>['form'];
    name: DeepKeys<TParentData>;
    options: FieldApiOptions<TParentData, TName, TFieldValidator, TFormValidator, TData>;
    store: Store<FieldState<TData>>;
    state: FieldState<TData>;
    prevState: FieldState<TData>;
    constructor(opts: FieldApiOptions<TParentData, TName, TFieldValidator, TFormValidator, TData>);
    runValidator<TValue extends {
        value: TData;
        fieldApi: FieldApi<any, any, any, any>;
    }, TType extends 'validate' | 'validateAsync'>(props: {
        validate: TType extends 'validate' ? FieldValidateOrFn<any, any, any, any> : FieldAsyncValidateOrFn<any, any, any, any>;
        value: TValue;
        type: TType;
    }): ReturnType<ReturnType<Validator<any>>[TType]>;
    mount: () => () => void;
    update: (opts: FieldApiOptions<TParentData, TName, TFieldValidator, TFormValidator, TData>) => void;
    getValue: () => TData;
    setValue: (updater: Updater<TData>, options?: {
        touch?: boolean;
        notify?: boolean;
    }) => void;
    _getMeta: () => FieldMeta | undefined;
    getMeta: () => FieldMeta;
    setMeta: (updater: Updater<FieldMeta>) => void;
    getInfo: () => FieldInfo<TParentData, TFormValidator>;
    pushValue: (value: TData extends any[] ? TData[number] : never) => void;
    insertValue: (index: number, value: TData extends any[] ? TData[number] : never) => void;
    removeValue: (index: number) => void;
    swapValues: (aIndex: number, bIndex: number) => void;
    getLinkedFields: (cause: ValidationCause) => FieldApi<any, any, any, any, any>[];
    moveValue: (aIndex: number, bIndex: number) => void;
    validateSync: (cause: ValidationCause) => {
        hasErrored: boolean;
    };
    validateAsync: (cause: ValidationCause) => Promise<ValidationError[]>;
    validate: (cause: ValidationCause) => ValidationError[] | Promise<ValidationError[]>;
    handleChange: (updater: Updater<TData>) => void;
    handleBlur: () => void;
}
