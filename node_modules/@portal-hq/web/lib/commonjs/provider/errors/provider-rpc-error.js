"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcErrorCodes = void 0;
var RpcErrorCodes;
(function (RpcErrorCodes) {
    RpcErrorCodes[RpcErrorCodes["UserRejectedRequest"] = 4001] = "UserRejectedRequest";
    RpcErrorCodes[RpcErrorCodes["Unauthorized"] = 4100] = "Unauthorized";
    RpcErrorCodes[RpcErrorCodes["UnsupportedMethod"] = 4200] = "UnsupportedMethod";
    RpcErrorCodes[RpcErrorCodes["Disconnected"] = 4900] = "Disconnected";
    RpcErrorCodes[RpcErrorCodes["ChainDisconnected"] = 4901] = "ChainDisconnected";
})(RpcErrorCodes = exports.RpcErrorCodes || (exports.RpcErrorCodes = {}));
const providerErrors = {
    4001: {
        name: 'User Rejected Request',
        description: 'The user rejected the request.',
    },
    4100: {
        name: 'Unauthorized',
        description: 'The requested method and/or account has not been authorized by the user.',
    },
    4200: {
        name: 'Unsupported Method',
        description: 'The Provider does not support the requested method.',
    },
    4900: {
        name: 'Disconnected',
        description: 'The Provider is disconnected from all chains.',
    },
    4901: {
        name: 'Chain Disconnected',
        description: 'The Provider is not connected to the requested chain.',
    },
};
class ProviderRpcError extends Error {
    constructor({ code, data }) {
        const log = console;
        const definition = providerErrors[code];
        if (!definition) {
            log.warn(`[Portal] ProviderRpcError instantiated with unknown error code ${code}. Attempting to continue with limited context.`);
        }
        const message = definition
            ? `${definition.name} - ${definition.description}`
            : '';
        super(`[Portal] RPC Error: ${code} ${message}`);
        // Set the prototype explicitly.
        Object.setPrototypeOf(this, ProviderRpcError.prototype);
        this.code = code;
        this.data = data;
        this.definition = definition;
    }
}
exports.default = ProviderRpcError;
