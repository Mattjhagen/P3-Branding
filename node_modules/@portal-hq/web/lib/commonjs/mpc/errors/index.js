"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalMpcError = exports.PortalErrorCodeTypes = exports.PortalErrorCodes = exports.MpcError = exports.MpcErrorCodes = void 0;
var MpcErrorCodes;
(function (MpcErrorCodes) {
    MpcErrorCodes["CLIENT_NOT_VERIFIED"] = "CLIENT_NOT_VERIFIED";
    MpcErrorCodes["GOOGLE_UNAUTHENTICATED"] = "GOOGLE_UNAUTHENTICATED";
    MpcErrorCodes["KEYCHAIN_UNAVAILABLE"] = "KEYCHAIN_UNAVAILABLE";
    MpcErrorCodes["MPC_MODULE_NOT_FOUND"] = "MPC_MODULE_NOT_FOUND";
    MpcErrorCodes["STORAGE_UNAVAILABLE"] = "STORAGE_UNAVAILABLE";
    MpcErrorCodes["UNABLE_TO_READ_SIGNING_STORAGE"] = "UNABLE_TO_READ_SIGNING_STORAGE";
    MpcErrorCodes["UNEXPECTED_ERROR"] = "UNEXPECTED_ERROR";
    MpcErrorCodes["UNSUPPORTED_MPC_VERSION"] = "UNSUPPORTED_MPC_VERSION";
    MpcErrorCodes["UNSUPPORTED_STORAGE_METHOD"] = "UNSUPPORTED_STORAGE_METHODS";
    MpcErrorCodes["WALLET_MODIFICATION_ALREADY_IN_PROGRESS"] = "WALLET_MODIFICATION_ALREADY_IN_PROGRESS";
})(MpcErrorCodes = exports.MpcErrorCodes || (exports.MpcErrorCodes = {}));
const MpcErrorMetadata = {
    [MpcErrorCodes.CLIENT_NOT_VERIFIED]: {
        code: MpcErrorCodes.CLIENT_NOT_VERIFIED,
        message: (_) => `[PortalMpc] Unable to verify client`,
    },
    [MpcErrorCodes.GOOGLE_UNAUTHENTICATED]: {
        code: MpcErrorCodes.GOOGLE_UNAUTHENTICATED,
        message: (_) => `[PortalMpc] Unable to authenticate with Google`,
    },
    [MpcErrorCodes.KEYCHAIN_UNAVAILABLE]: {
        code: MpcErrorCodes.KEYCHAIN_UNAVAILABLE,
        message: (_) => `[PortalMpc] Keychain is unavailable`,
    },
    [MpcErrorCodes.MPC_MODULE_NOT_FOUND]: {
        code: MpcErrorCodes.MPC_MODULE_NOT_FOUND,
        message: (_) => `[PortalMpc] The MPC module could not be found. This is usually an issue with React Native linking. Please verify that the 'PortalReactNative' module is properly linked to this project.`,
    },
    [MpcErrorCodes.STORAGE_UNAVAILABLE]: {
        code: MpcErrorCodes.STORAGE_UNAVAILABLE,
        message: (_) => `[PortalMpc] Storage is unavailable`,
    },
    [MpcErrorCodes.UNABLE_TO_READ_SIGNING_STORAGE]: {
        code: MpcErrorCodes.UNABLE_TO_READ_SIGNING_STORAGE,
        message: (_) => `[PortalMpc] Unable to read signing share from storage`,
    },
    [MpcErrorCodes.UNEXPECTED_ERROR]: {
        code: MpcErrorCodes.UNEXPECTED_ERROR,
        message: (error) => `[PortalMpc] Unexpected error on ${error}`,
    },
    [MpcErrorCodes.UNSUPPORTED_MPC_VERSION]: {
        code: MpcErrorCodes.UNSUPPORTED_MPC_VERSION,
        message: (version) => `[PortalMpc] Unsupported MPC version ${version}`,
    },
    [MpcErrorCodes.UNSUPPORTED_STORAGE_METHOD]: {
        code: MpcErrorCodes.UNSUPPORTED_STORAGE_METHOD,
        message: (method) => `[PortalMpc] Unsupported storage method ${method}`,
    },
    [MpcErrorCodes.WALLET_MODIFICATION_ALREADY_IN_PROGRESS]: {
        code: MpcErrorCodes.WALLET_MODIFICATION_ALREADY_IN_PROGRESS,
        message: (_) => `[PortalMpc] Wallet modification already in progress`,
    },
};
class MpcError extends Error {
    constructor(code, context) {
        const error = MpcErrorMetadata[code];
        // Init the actual error
        super(error.message(context));
        // Custom error context
        this.code = error.code;
        if (context) {
            this.context = context;
        }
    }
}
exports.MpcError = MpcError;
var PortalErrorCodes;
(function (PortalErrorCodes) {
    PortalErrorCodes[PortalErrorCodes["InvalidRankAndThreshold"] = 100] = "InvalidRankAndThreshold";
    PortalErrorCodes[PortalErrorCodes["FailedToStartDkg"] = 101] = "FailedToStartDkg";
    PortalErrorCodes[PortalErrorCodes["FailedToFinishDkg"] = 102] = "FailedToFinishDkg";
    PortalErrorCodes[PortalErrorCodes["FailedToConvertDkgResult"] = 103] = "FailedToConvertDkgResult";
    PortalErrorCodes[PortalErrorCodes["FailedToStartReshare"] = 104] = "FailedToStartReshare";
    PortalErrorCodes[PortalErrorCodes["FailedToFinishReshare"] = 105] = "FailedToFinishReshare";
    PortalErrorCodes[PortalErrorCodes["FailedToConvertReshareResult"] = 106] = "FailedToConvertReshareResult";
    PortalErrorCodes[PortalErrorCodes["FailedToStartSign"] = 107] = "FailedToStartSign";
    PortalErrorCodes[PortalErrorCodes["FailedToFinishSign"] = 108] = "FailedToFinishSign";
    PortalErrorCodes[PortalErrorCodes["FailedToConvertSignResult"] = 109] = "FailedToConvertSignResult";
    PortalErrorCodes[PortalErrorCodes["DkgProcessError"] = 110] = "DkgProcessError";
    PortalErrorCodes[PortalErrorCodes["FailedToParseSocketMessage"] = 111] = "FailedToParseSocketMessage";
    PortalErrorCodes[PortalErrorCodes["FailedToAddMessageToChannel"] = 112] = "FailedToAddMessageToChannel";
    PortalErrorCodes[PortalErrorCodes["RefreshShareMismatch"] = 113] = "RefreshShareMismatch";
    PortalErrorCodes[PortalErrorCodes["RefreshProcessError"] = 114] = "RefreshProcessError";
    PortalErrorCodes[PortalErrorCodes["FailedToGetPaillierKeys"] = 115] = "FailedToGetPaillierKeys";
    PortalErrorCodes[PortalErrorCodes["SigningShareMismatch"] = 116] = "SigningShareMismatch";
    PortalErrorCodes[PortalErrorCodes["SigningProcessError"] = 117] = "SigningProcessError";
    // Network Errors
    PortalErrorCodes[PortalErrorCodes["FailedToSendSignRequest"] = 200] = "FailedToSendSignRequest";
    PortalErrorCodes[PortalErrorCodes["BadRequest"] = 201] = "BadRequest";
    PortalErrorCodes[PortalErrorCodes["InvalidApiKey"] = 202] = "InvalidApiKey";
    PortalErrorCodes[PortalErrorCodes["NotFound"] = 203] = "NotFound";
    PortalErrorCodes[PortalErrorCodes["FailedToReceive101StatusCode"] = 204] = "FailedToReceive101StatusCode";
    PortalErrorCodes[PortalErrorCodes["FailedToCreateWebsocket"] = 205] = "FailedToCreateWebsocket";
    PortalErrorCodes[PortalErrorCodes["DkgNetworkError"] = 206] = "DkgNetworkError";
    PortalErrorCodes[PortalErrorCodes["FailedToReadPartialPublicKeyFromSocket"] = 207] = "FailedToReadPartialPublicKeyFromSocket";
    PortalErrorCodes[PortalErrorCodes["FailedToWritePartialPublicKeyToSocket"] = 208] = "FailedToWritePartialPublicKeyToSocket";
    PortalErrorCodes[PortalErrorCodes["FailedToReadFromSocketInListen"] = 209] = "FailedToReadFromSocketInListen";
    PortalErrorCodes[PortalErrorCodes["RefreshNetworkError"] = 210] = "RefreshNetworkError";
    PortalErrorCodes[PortalErrorCodes["SigningNetworkError"] = 211] = "SigningNetworkError";
    PortalErrorCodes[PortalErrorCodes["BlockedAddressByDefault"] = 212] = "BlockedAddressByDefault";
    PortalErrorCodes[PortalErrorCodes["BlockedAddressByEnvironment"] = 213] = "BlockedAddressByEnvironment";
    // General Errors
    PortalErrorCodes[PortalErrorCodes["FailedToComputeEthAddress"] = 300] = "FailedToComputeEthAddress";
    PortalErrorCodes[PortalErrorCodes["FailedToCreateShareObject"] = 301] = "FailedToCreateShareObject";
    PortalErrorCodes[PortalErrorCodes["IncorrectInputToSign"] = 302] = "IncorrectInputToSign";
    PortalErrorCodes[PortalErrorCodes["FailedToConvertPublicKeyBytes"] = 303] = "FailedToConvertPublicKeyBytes";
    PortalErrorCodes[PortalErrorCodes["FailedToComputeSignature"] = 304] = "FailedToComputeSignature";
    PortalErrorCodes[PortalErrorCodes["FailedToParseInputShareObject"] = 305] = "FailedToParseInputShareObject";
    PortalErrorCodes[PortalErrorCodes["IncorrectShareObjectType"] = 306] = "IncorrectShareObjectType";
    PortalErrorCodes[PortalErrorCodes["FailedToConvertStringToBigInt"] = 307] = "FailedToConvertStringToBigInt";
    PortalErrorCodes[PortalErrorCodes["FailedToPopulateTransaction"] = 308] = "FailedToPopulateTransaction";
    PortalErrorCodes[PortalErrorCodes["FailedToBuildMessage"] = 309] = "FailedToBuildMessage";
    PortalErrorCodes[PortalErrorCodes["UnsupportedEthMethod"] = 310] = "UnsupportedEthMethod";
    PortalErrorCodes[PortalErrorCodes["NodeRpcError"] = 311] = "NodeRpcError";
    PortalErrorCodes[PortalErrorCodes["FailedToInitializePublicKey"] = 312] = "FailedToInitializePublicKey";
    PortalErrorCodes[PortalErrorCodes["FailedToCalculateSelfPublicKey"] = 313] = "FailedToCalculateSelfPublicKey";
    PortalErrorCodes[PortalErrorCodes["FailedToUnmarshalPartialPublicKeyFromSocket"] = 314] = "FailedToUnmarshalPartialPublicKeyFromSocket";
    PortalErrorCodes[PortalErrorCodes["FailedToMarshalPartialPublicKey"] = 315] = "FailedToMarshalPartialPublicKey";
    // Encrypt/Decrypt Errors
    PortalErrorCodes[PortalErrorCodes["FailedToCreateRandomDekBytes"] = 400] = "FailedToCreateRandomDekBytes";
    PortalErrorCodes[PortalErrorCodes["FailedToCreateCipherBlock"] = 401] = "FailedToCreateCipherBlock";
    PortalErrorCodes[PortalErrorCodes["FailedToCreateGcmCipher"] = 402] = "FailedToCreateGcmCipher";
    PortalErrorCodes[PortalErrorCodes["FailedToReadNonceIntoBuffer"] = 403] = "FailedToReadNonceIntoBuffer";
    PortalErrorCodes[PortalErrorCodes["FailedToDecodeKeyHexString"] = 404] = "FailedToDecodeKeyHexString";
    PortalErrorCodes[PortalErrorCodes["FailedToDecodeCipherHexString"] = 405] = "FailedToDecodeCipherHexString";
    PortalErrorCodes[PortalErrorCodes["FailedToGetNonceSize"] = 406] = "FailedToGetNonceSize";
    PortalErrorCodes[PortalErrorCodes["FailedToDecryptCipher"] = 407] = "FailedToDecryptCipher";
})(PortalErrorCodes = exports.PortalErrorCodes || (exports.PortalErrorCodes = {}));
exports.PortalErrorCodeTypes = {
    MpcErrors: Array.from({ length: 100 }, (_, i) => i + 100),
    NetworkErrors: Array.from({ length: 100 }, (_, i) => i + 200),
    GeneralErrors: Array.from({ length: 100 }, (_, i) => i + 300),
    EncryptDecryptErrors: Array.from({ length: 100 }, (_, i) => i + 400),
};
class PortalMpcError extends Error {
    constructor(error) {
        super(error.message);
        this.code = error.code;
    }
}
exports.PortalMpcError = PortalMpcError;
exports.default = MpcError;
