{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/fireblocks/signer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,GAEnB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,sBAAsB,GAEvB,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EACL,kBAAkB,EAClB,MAAM,GAKP,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAYnD,MAAM,OAAO,gBAAgB;IAW3B,YACE,MAAoE;QAJtE;;;;;WAA8B;QACtB;;;;;WAAuC;QAatC;;;;mBAAa,GAAG,gBAAgB,YAAY;WAAC;QAEtD;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/C,IAAI,OAAO,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAEzD,OAAO,OAAe,CAAC;YACzB,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAe,KAAK,IAAI,EAAE;gBACxB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAE7D,IAAI,CAAC,MAAM,GAAG,IAAI,kBAAkB,CAClC,kBAAkB,CAAC;oBACjB,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;iBAC9B,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC;YAC7E,CAAC;WAAC;QAEF;;;;mBAAiB,KAAK,IAAI,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC;YAC7E,CAAC;WAAC;QArDA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;CAgDF","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport {\n  FireblocksWeb3Provider,\n  type FireblocksProviderConfig,\n} from \"@fireblocks/fireblocks-web3-provider\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\nimport type {\n  FireblocksAuthenticationParams,\n  FireblocksUserInfo,\n} from \"./types.js\";\n\n/**\n * This class requires the `@fireblocks/fireblocks-web3-provider` dependency.\n * `@alchemy/aa-signers` lists it as an optional dependency.\n *\n * @see https://github.com/fireblocks/fireblocks-web3-provider\n */\nexport class FireblocksSigner\n  implements\n    SmartAccountAuthenticator<\n      FireblocksAuthenticationParams,\n      FireblocksUserInfo,\n      FireblocksWeb3Provider\n    >\n{\n  inner: FireblocksWeb3Provider;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(\n    params: FireblocksProviderConfig | { inner: FireblocksWeb3Provider }\n  ) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      return;\n    }\n\n    this.inner = new FireblocksWeb3Provider(params);\n  }\n\n  readonly signerType = `${signerTypePrefix}fireblocks`;\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = await this.signer.getAddress();\n    if (address == null) throw new Error(\"No address found\");\n\n    return address as Hash;\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async () => {\n    if (this.inner == null) throw new Error(\"No provider found\");\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(this.inner),\n      }),\n      this.signerType\n    );\n\n    return { addresses: await this.inner.request({ method: \"eth_accounts\" }) };\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return { addresses: await this.inner.request({ method: \"eth_accounts\" }) };\n  };\n}\n"]}