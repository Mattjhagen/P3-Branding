import { WalletClientSigner, } from "@alchemy/aa-core";
import { ParticleNetwork, } from "@particle-network/auth";
import { ParticleProvider } from "@particle-network/provider";
import { createWalletClient, custom, } from "viem";
import { signerTypePrefix } from "../constants.js";
export class ParticleSigner {
    constructor(params) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: `${signerTypePrefix}particle`
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                const address = await this.signer.getAddress();
                if (address == null)
                    throw new Error("No address found");
                return address;
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signTypedData(params);
            }
        });
        Object.defineProperty(this, "authenticate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params = {
                loginOptions: {},
                login: async (loginOptions) => {
                    this.inner.auth.login(loginOptions);
                },
            }) => {
                if (this.inner == null)
                    throw new Error("No provider found");
                await params.login(params.loginOptions);
                this.signer = new WalletClientSigner(createWalletClient({
                    transport: custom(this.provider),
                }), this.signerType);
                const userInfo = this.inner.auth.getUserInfo();
                if (userInfo == null)
                    throw new Error("No user info found");
                return userInfo;
            }
        });
        Object.defineProperty(this, "getAuthDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                const userInfo = this.inner.auth.getUserInfo();
                if (userInfo == null)
                    throw new Error("No user info found");
                return userInfo;
            }
        });
        if ("inner" in params) {
            this.inner = params.inner;
            this.provider =
                params.provider != null
                    ? params.provider
                    : new ParticleProvider(this.inner.auth);
            if (this.inner.auth.isLogin()) {
                this.signer = new WalletClientSigner(createWalletClient({
                    transport: custom(this.provider),
                }), this.signerType);
            }
            return;
        }
        this.inner = new ParticleNetwork(params);
        this.provider = new ParticleProvider(this.inner.auth);
        if (this.inner.auth.isLogin()) {
            this.signer = new WalletClientSigner(createWalletClient({
                transport: custom(this.provider),
            }), this.signerType);
        }
    }
}
//# sourceMappingURL=signer.js.map