import { WalletClientSigner, } from "@alchemy/aa-core";
import { TurnkeyClient } from "@turnkey/http";
import { createAccount } from "@turnkey/viem";
import { createWalletClient, } from "viem";
import { signerTypePrefix } from "../constants.js";
export class TurnkeySigner {
    constructor(params) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "subOrganization", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: `${signerTypePrefix}turnkey`
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.getAddress();
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signTypedData(params);
            }
        });
        Object.defineProperty(this, "authenticate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                this.subOrganization = await params.resolveSubOrganization();
                this.signer = new WalletClientSigner(createWalletClient({
                    account: (await createAccount({
                        client: this.inner,
                        organizationId: this.subOrganization.subOrganizationId,
                        signWith: this.subOrganization.signWith,
                    })),
                    transport: params.transport,
                }), this.signerType);
                return this.inner.getWhoami({
                    organizationId: this.subOrganization.subOrganizationId,
                });
            }
        });
        Object.defineProperty(this, "getAuthDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer || !this.subOrganization)
                    throw new Error("Not authenticated");
                return this.inner.getWhoami({
                    organizationId: this.subOrganization.subOrganizationId,
                });
            }
        });
        if ("inner" in params) {
            this.inner = params.inner;
            return;
        }
        this.inner = new TurnkeyClient({ baseUrl: params.apiUrl }, params.stamper);
    }
}
//# sourceMappingURL=signer.js.map