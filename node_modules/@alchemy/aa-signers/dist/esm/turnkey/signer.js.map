{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/turnkey/signer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,GAEnB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAC9C,OAAO,EACL,kBAAkB,GAKnB,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAenD,MAAM,OAAO,aAAa;IAYxB,YAAY,MAAsD;QAJlE;;;;;WAAqB;QACb;;;;;WAAuC;QACvC;;;;;WAAoD;QAWnD;;;;mBAAa,GAAG,gBAAgB,SAAS;WAAC;QAEnD;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAClC,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAe,KAAK,EAAE,MAAyB,EAAE,EAAE;gBACjD,IAAI,CAAC,eAAe,GAAG,MAAM,MAAM,CAAC,sBAAsB,EAAE,CAAC;gBAC7D,IAAI,CAAC,MAAM,GAAG,IAAI,kBAAkB,CAClC,kBAAkB,CAAC;oBACjB,OAAO,EAAE,CAAC,MAAM,aAAa,CAAC;wBAC5B,MAAM,EAAE,IAAI,CAAC,KAAK;wBAClB,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,iBAAiB;wBACtD,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ;qBACxC,CAAC,CAAiB;oBACnB,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC5B,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;oBAC1B,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,iBAAiB;iBACvD,CAAC,CAAC;YACL,CAAC;WAAC;QAEF;;;;mBAAiB,KAAK,IAAI,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe;oBACvC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;oBAC1B,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,iBAAiB;iBACvD,CAAC,CAAC;YACL,CAAC;WAAC;QA3DA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7E,CAAC;CAsDF","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport { TurnkeyClient } from \"@turnkey/http\";\nimport { createAccount } from \"@turnkey/viem\";\nimport {\n  createWalletClient,\n  type LocalAccount,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\nimport type {\n  TurnkeyAuthParams,\n  TurnkeyClientParams,\n  TurnkeySubOrganization,\n  TurnkeyUserMetadata,\n} from \"./types.js\";\n\n/**\n * This class requires the `@turnkey/http` and `@turnkey/viem` dependencies.\n * `@alchemy/aa-signers` lists them as optional dependencies.\n *\n * @see https://github.com/tkhq/sdk/tree/main/packages/http\n * @see https://github.com/tkhq/sdk/tree/main/packages/viem\n */\nexport class TurnkeySigner\n  implements\n    SmartAccountAuthenticator<\n      TurnkeyAuthParams,\n      TurnkeyUserMetadata,\n      TurnkeyClient\n    >\n{\n  inner: TurnkeyClient;\n  private signer: WalletClientSigner | undefined;\n  private subOrganization: TurnkeySubOrganization | undefined;\n\n  constructor(params: TurnkeyClientParams | { inner: TurnkeyClient }) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      return;\n    }\n\n    this.inner = new TurnkeyClient({ baseUrl: params.apiUrl }, params.stamper);\n  }\n\n  readonly signerType = `${signerTypePrefix}turnkey`;\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.getAddress();\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async (params: TurnkeyAuthParams) => {\n    this.subOrganization = await params.resolveSubOrganization();\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        account: (await createAccount({\n          client: this.inner,\n          organizationId: this.subOrganization.subOrganizationId,\n          signWith: this.subOrganization.signWith,\n        })) as LocalAccount,\n        transport: params.transport,\n      }),\n      this.signerType\n    );\n\n    return this.inner.getWhoami({\n      organizationId: this.subOrganization.subOrganizationId,\n    });\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer || !this.subOrganization)\n      throw new Error(\"Not authenticated\");\n\n    return this.inner.getWhoami({\n      organizationId: this.subOrganization.subOrganizationId,\n    });\n  };\n}\n"]}