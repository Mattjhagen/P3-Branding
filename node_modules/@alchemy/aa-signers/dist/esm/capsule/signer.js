import { WalletClientSigner, } from "@alchemy/aa-core";
import Capsule, { createCapsuleViemClient } from "@usecapsule/web-sdk";
import { createWalletClient, custom, } from "viem";
import { signerTypePrefix } from "../constants.js";
export class CapsuleSigner {
    constructor(params) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: `${signerTypePrefix}capsule`
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                const address = await this.signer.getAddress();
                if (address == null)
                    throw new Error("No address found");
                return address;
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signTypedData(params);
            }
        });
        Object.defineProperty(this, "authenticate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (this.inner == null)
                    throw new Error("No provider found");
                this.signer = new WalletClientSigner(createWalletClient({
                    transport: custom(this.client),
                }), this.signerType);
                return this.inner.getWallets();
            }
        });
        Object.defineProperty(this, "getAuthDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.inner.getWallets();
            }
        });
        if ("inner" in params) {
            this.inner = params.inner;
            this.client = params.client;
            return;
        }
        this.inner = new Capsule(params.env, params.apiKey, params.opts);
        this.client = createCapsuleViemClient(this.inner, params.walletConfig, params.viemClientOpts);
    }
}
//# sourceMappingURL=signer.js.map