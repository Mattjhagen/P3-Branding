{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/magic/signer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,GAEnB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,KAAK,EAA0B,MAAM,WAAW,CAAC;AAC1D,OAAO,EACL,kBAAkB,EAClB,MAAM,GAKP,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AASnD,MAAM,OAAO,WAAW;IAOtB,YAAY,MAAyC;QAHrD;;;;;WAAa;QACL;;;;;WAAuC;QAWtC;;;;mBAAa,GAAG,gBAAgB,OAAO;WAAC;QAEjD;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,aAAa,CAAC;gBAChE,IAAI,OAAO,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAEzD,OAAO,OAAe,CAAC;YACzB,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAe,KAAK,EAAE,MAAuB,EAAE,EAAE;gBAC/C,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;gBAE5B,IAAI,CAAC,MAAM,GAAG,IAAI,kBAAkB,CAClC,kBAAkB,CAAC;oBACjB,SAAS,EAAE,MAAM,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;iBACzD,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACnC,CAAC;WAAC;QAEF;;;;mBAAiB,KAAK,IAAI,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACnC,CAAC;WAAC;QArDA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACxD,CAAC;CAgDF","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport { Magic, type MagicUserMetadata } from \"magic-sdk\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\nimport type { MagicAuthParams, MagicSDKParams } from \"./types.js\";\n\n/**\n * This class requires the `magic-sdk` dependency.\n * `@alchemy/aa-signers` lists it as an optional dependency.\n *\n * @see https://github.com/magiclabs/magic-js)\n */\nexport class MagicSigner\n  implements\n    SmartAccountAuthenticator<MagicAuthParams, MagicUserMetadata, Magic>\n{\n  inner: Magic;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(params: MagicSDKParams | { inner: Magic }) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      return;\n    }\n\n    this.inner = new Magic(params.apiKey, params.options);\n  }\n\n  readonly signerType = `${signerTypePrefix}magic`;\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = (await this.inner.user.getInfo()).publicAddress;\n    if (address == null) throw new Error(\"No address found\");\n\n    return address as Hash;\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async (params: MagicAuthParams) => {\n    await params.authenticate();\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(await this.inner.wallet.getProvider()),\n      }),\n      this.signerType\n    );\n\n    return this.inner.user.getInfo();\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.inner.user.getInfo();\n  };\n}\n"]}