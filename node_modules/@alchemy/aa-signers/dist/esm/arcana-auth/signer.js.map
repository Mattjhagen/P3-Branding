{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/arcana-auth/signer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,GAEnB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,YAAY,GAGb,MAAM,cAAc,CAAC;AACtB,OAAO,EACL,kBAAkB,EAClB,MAAM,GAKP,MAAM,MAAM,CAAC;AASd,MAAM,OAAO,gBAAgB;IAW3B,YACE,MAE2B;QAN7B;;;;;WAAoB;QACZ;;;;;WAAuC;QAetC;;;;mBAAa,aAAa;WAAC;QAEpC;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/C,IAAI,OAAO,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAEzD,OAAO,OAAe,CAAC;YACzB,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAe,KAAK,EAClB,SAAyC;gBACvC,IAAI,EAAE,KAAK,IAAI,EAAE;oBACf,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBAC1B,CAAC;gBACD,OAAO,EAAE,KAAK,IAAI,EAAE;oBAClB,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;aACF,EACD,EAAE;gBACF,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBACpB,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;gBAEvB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEtE,IAAI,CAAC,MAAM,GAAG,IAAI,kBAAkB,CAClC,kBAAkB,CAAC;oBACjB,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;iBACvC,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAC9B,CAAC;WAAC;QAEF;;;;mBAAiB,KAAK,IAAI,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YAC9B,CAAC;WAAC;QAjEA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;CA4DF","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport {\n  AuthProvider,\n  type ConstructorParams,\n  type UserInfo,\n} from \"@arcana/auth\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport type { ArcanaAuthAuthenticationParams } from \"./types\";\n\n/**\n * This class requires the `@arcana/auth` package as a dependency.\n * `@alchemy/aa-signers` lists it as optional dependencies.\n *\n * @see https://github.com/arcana-network/auth\n */\nexport class ArcanaAuthSigner\n  implements\n    SmartAccountAuthenticator<\n      ArcanaAuthAuthenticationParams,\n      UserInfo,\n      AuthProvider\n    >\n{\n  inner: AuthProvider;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(\n    params:\n      | { clientId: string; params: Partial<ConstructorParams> }\n      | { inner: AuthProvider }\n  ) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      return;\n    }\n\n    this.inner = new AuthProvider(params.clientId, params.params);\n  }\n\n  readonly signerType = \"arcana-auth\";\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = await this.signer.getAddress();\n    if (address == null) throw new Error(\"No address found\");\n\n    return address as Hash;\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async (\n    params: ArcanaAuthAuthenticationParams = {\n      init: async () => {\n        await this.inner.init();\n      },\n      connect: async () => {\n        await this.inner.connect();\n      },\n    }\n  ) => {\n    await params.init();\n    await params.connect();\n\n    if (this.inner.provider == null) throw new Error(\"No provider found\");\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(this.inner.provider),\n      }),\n      this.signerType\n    );\n\n    return this.inner.getUser();\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.inner.getUser();\n  };\n}\n"]}