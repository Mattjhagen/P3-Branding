"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurnkeySigner = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const http_1 = require("@turnkey/http");
const viem_1 = require("@turnkey/viem");
const viem_2 = require("viem");
const constants_js_1 = require("../constants.js");
class TurnkeySigner {
    constructor(params) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "subOrganization", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: `${constants_js_1.signerTypePrefix}turnkey`
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.getAddress();
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signTypedData(params);
            }
        });
        Object.defineProperty(this, "authenticate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                this.subOrganization = await params.resolveSubOrganization();
                this.signer = new aa_core_1.WalletClientSigner((0, viem_2.createWalletClient)({
                    account: (await (0, viem_1.createAccount)({
                        client: this.inner,
                        organizationId: this.subOrganization.subOrganizationId,
                        signWith: this.subOrganization.signWith,
                    })),
                    transport: params.transport,
                }), this.signerType);
                return this.inner.getWhoami({
                    organizationId: this.subOrganization.subOrganizationId,
                });
            }
        });
        Object.defineProperty(this, "getAuthDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer || !this.subOrganization)
                    throw new Error("Not authenticated");
                return this.inner.getWhoami({
                    organizationId: this.subOrganization.subOrganizationId,
                });
            }
        });
        if ("inner" in params) {
            this.inner = params.inner;
            return;
        }
        this.inner = new http_1.TurnkeyClient({ baseUrl: params.apiUrl }, params.stamper);
    }
}
exports.TurnkeySigner = TurnkeySigner;
//# sourceMappingURL=signer.js.map