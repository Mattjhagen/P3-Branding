{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/web3auth/signer.ts"],"names":[],"mappings":";;;AAAA,8CAG0B;AAC1B,2CAAiE;AACjE,+BAOc;AACd,kDAAmD;AAanD,MAAa,cAAc;IAWzB,YAAY,MAA6C;QAHzD;;;;;WAAgB;QACR;;;;;WAAuC;QAWtC;;;;mBAAa,GAAG,+BAAgB,UAAU;WAAC;QAEpD;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/C,IAAI,OAAO,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAEzD,OAAO,OAAe,CAAC;YACzB,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAe,KAAK,EAClB,SAAuC;gBACrC,IAAI,EAAE,KAAK,IAAI,EAAE;oBACf,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;gBAC/B,CAAC;gBACD,OAAO,EAAE,KAAK,IAAI,EAAE;oBAClB,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;aACF,EACD,EAAE;gBACF,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBACpB,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;gBAEvB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEtE,IAAI,CAAC,MAAM,GAAG,IAAI,4BAAkB,CAClC,IAAA,yBAAkB,EAAC;oBACjB,SAAS,EAAE,IAAA,aAAM,EAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;iBACvC,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YAClC,CAAC;WAAC;QAEF;;;;mBAAiB,KAAK,IAAI,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YAClC,CAAC;WAAC;QAjEA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,gBAAQ,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;CA4DF;AA9ED,wCA8EC","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport { Web3Auth, type Web3AuthOptions } from \"@web3auth/modal\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\nimport type {\n  Web3AuthAuthenticationParams,\n  Web3AuthUserInfo,\n} from \"./types.js\";\n\n/**\n * This class requires the `@web3auth/modal` and `@web3auth/base dependencies.\n * `@alchemy/aa-signers` lists them as optional dependencies.\n *\n * @see https://github.com/Web3Auth/web3auth-web/tree/master/packages/modal\n * @see https://github.com/Web3Auth/web3auth-web/tree/master/packages/base\n */\nexport class Web3AuthSigner\n  implements\n    SmartAccountAuthenticator<\n      Web3AuthAuthenticationParams,\n      Web3AuthUserInfo,\n      Web3Auth\n    >\n{\n  inner: Web3Auth;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(params: Web3AuthOptions | { inner: Web3Auth }) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      return;\n    }\n\n    this.inner = new Web3Auth(params);\n  }\n\n  readonly signerType = `${signerTypePrefix}web3auth`;\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = await this.signer.getAddress();\n    if (address == null) throw new Error(\"No address found\");\n\n    return address as Hash;\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async (\n    params: Web3AuthAuthenticationParams = {\n      init: async () => {\n        await this.inner.initModal();\n      },\n      connect: async () => {\n        await this.inner.connect();\n      },\n    }\n  ) => {\n    await params.init();\n    await params.connect();\n\n    if (this.inner.provider == null) throw new Error(\"No provider found\");\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(this.inner.provider),\n      }),\n      this.signerType\n    );\n\n    return this.inner.getUserInfo();\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.inner.getUserInfo();\n  };\n}\n"]}