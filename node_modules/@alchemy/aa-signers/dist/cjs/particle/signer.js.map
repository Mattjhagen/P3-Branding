{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/particle/signer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport {\n  ParticleNetwork,\n  type Config,\n  type LoginOptions,\n} from \"@particle-network/auth\";\nimport { ParticleProvider } from \"@particle-network/provider\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\nimport type {\n  ParticleAuthenticationParams,\n  ParticleUserInfo,\n} from \"./types.js\";\n\n/**\n * This class requires the `@particle-network/auth` and `@particle-network/provider` dependencies.\n * `@alchemy/aa-signers` lists thems as an optional dependencies.\n *\n * @see https://docs.particle.network/developers/auth-service/sdks/web\n */\nexport class ParticleSigner\n  implements\n    SmartAccountAuthenticator<\n      ParticleAuthenticationParams,\n      ParticleUserInfo,\n      ParticleNetwork\n    >\n{\n  inner: ParticleNetwork;\n  private provider: ParticleProvider;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(\n    params: Config | { inner: ParticleNetwork; provider?: ParticleProvider }\n  ) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      this.provider =\n        params.provider != null\n          ? params.provider\n          : new ParticleProvider(this.inner.auth);\n\n      if (this.inner.auth.isLogin()) {\n        this.signer = new WalletClientSigner(\n          createWalletClient({\n            transport: custom(this.provider),\n          }),\n          this.signerType\n        );\n      }\n\n      return;\n    }\n\n    this.inner = new ParticleNetwork(params);\n    this.provider = new ParticleProvider(this.inner.auth);\n\n    if (this.inner.auth.isLogin()) {\n      this.signer = new WalletClientSigner(\n        createWalletClient({\n          transport: custom(this.provider),\n        }),\n        this.signerType\n      );\n    }\n  }\n\n  readonly signerType = `${signerTypePrefix}particle`;\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = await this.signer.getAddress();\n    if (address == null) throw new Error(\"No address found\");\n\n    return address as Hash;\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async (\n    params: ParticleAuthenticationParams = {\n      loginOptions: {},\n      login: async (loginOptions: LoginOptions) => {\n        this.inner.auth.login(loginOptions);\n      },\n    }\n  ) => {\n    if (this.inner == null) throw new Error(\"No provider found\");\n\n    await params.login(params.loginOptions);\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(this.provider),\n      }),\n      this.signerType\n    );\n\n    const userInfo = this.inner.auth.getUserInfo();\n\n    if (userInfo == null) throw new Error(\"No user info found\");\n\n    return userInfo;\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const userInfo = this.inner.auth.getUserInfo();\n\n    if (userInfo == null) throw new Error(\"No user info found\");\n\n    return userInfo;\n  };\n}\n"]}