"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArcanaAuthSigner = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const auth_1 = require("@arcana/auth");
const viem_1 = require("viem");
class ArcanaAuthSigner {
    constructor(params) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "arcana-auth"
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                const address = await this.signer.getAddress();
                if (address == null)
                    throw new Error("No address found");
                return address;
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.signer.signTypedData(params);
            }
        });
        Object.defineProperty(this, "authenticate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params = {
                init: async () => {
                    await this.inner.init();
                },
                connect: async () => {
                    await this.inner.connect();
                },
            }) => {
                await params.init();
                await params.connect();
                if (this.inner.provider == null)
                    throw new Error("No provider found");
                this.signer = new aa_core_1.WalletClientSigner((0, viem_1.createWalletClient)({
                    transport: (0, viem_1.custom)(this.inner.provider),
                }), this.signerType);
                return this.inner.getUser();
            }
        });
        Object.defineProperty(this, "getAuthDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.signer)
                    throw new Error("Not authenticated");
                return this.inner.getUser();
            }
        });
        if ("inner" in params) {
            this.inner = params.inner;
            return;
        }
        this.inner = new auth_1.AuthProvider(params.clientId, params.params);
    }
}
exports.ArcanaAuthSigner = ArcanaAuthSigner;
//# sourceMappingURL=signer.js.map