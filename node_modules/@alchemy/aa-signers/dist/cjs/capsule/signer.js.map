{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/capsule/signer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAG0B;AAC1B,+DAAuE;AACvE,+BAQc;AACd,kDAAmD;AAanD,MAAa,aAAa;IAYxB,YACE,MAAgE;QALlE;;;;;WAAe;QACP;;;;;WAAqB;QACrB;;;;;WAAuC;QAmBtC;;;;mBAAa,GAAG,+BAAgB,SAAS;WAAC;QAEnD;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/C,IAAI,OAAO,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAEzD,OAAO,OAAe,CAAC;YACzB,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAe,KAAK,IAAI,EAAE;gBACxB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAE7D,IAAI,CAAC,MAAM,GAAG,IAAI,4BAAkB,CAClC,IAAA,yBAAkB,EAAC;oBACjB,SAAS,EAAE,IAAA,aAAM,EAAC,IAAI,CAAC,MAAM,CAAC;iBAC/B,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;YACjC,CAAC;WAAC;QAEF;;;;mBAAiB,KAAK,IAAI,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;YACjC,CAAC;WAAC;QA3DA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,iBAAO,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,GAAG,IAAA,iCAAuB,EACnC,IAAI,CAAC,KAAK,EACV,MAAM,CAAC,YAAmB,EAC1B,MAAM,CAAC,cAAc,CACK,CAAC;IAC/B,CAAC;CAgDF;AA3ED,sCA2EC","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport Capsule, { createCapsuleViemClient } from \"@usecapsule/web-sdk\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n  type WalletClient,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\nimport type {\n  CapsuleAuthenticationParams,\n  CapsuleConfig,\n  CapsuleUserInfo,\n} from \"./types.js\";\n\n/**\n * This class requires the `@usecapsule/web-sdk` dependency.\n * `@alchemy/aa-signers` lists it as an optional dependency.\n *\n * @see https://docs.usecapsule.com/getting-started/initial-setup\n */\nexport class CapsuleSigner\n  implements\n    SmartAccountAuthenticator<\n      CapsuleAuthenticationParams,\n      CapsuleUserInfo,\n      Capsule\n    >\n{\n  inner: Capsule;\n  private client: WalletClient;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(\n    params: CapsuleConfig | { inner: Capsule; client: WalletClient }\n  ) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      this.client = params.client;\n      return;\n    }\n\n    this.inner = new Capsule(params.env, params.apiKey, params.opts);\n    this.client = createCapsuleViemClient(\n      this.inner,\n      params.walletConfig as any, // TODO: Capsule team to address lint error\n      params.viemClientOpts\n    ) as unknown as WalletClient; // TODO: Capsule team to address lint error\n  }\n\n  readonly signerType = `${signerTypePrefix}capsule`;\n\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = await this.signer.getAddress();\n    if (address == null) throw new Error(\"No address found\");\n\n    return address as Hash;\n  };\n\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  authenticate = async () => {\n    if (this.inner == null) throw new Error(\"No provider found\");\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(this.client),\n      }),\n      this.signerType\n    );\n\n    return this.inner.getWallets();\n  };\n\n  getAuthDetails = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.inner.getWallets();\n  };\n}\n"]}