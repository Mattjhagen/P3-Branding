import { type SmartAccountAuthenticator } from "@alchemy/aa-core";
import type { PassportAuthenticationParams, PassportClientParams, PassportUserInfo } from "./types";
import { Passport } from "@0xpass/passport";
import type { TypedDataDefinition, SignableMessage } from "viem";
export declare class PassportSigner implements SmartAccountAuthenticator<PassportAuthenticationParams, PassportUserInfo, Passport> {
    inner: Passport;
    private signer;
    private authDetails;
    constructor(params: PassportClientParams | {
        inner: Passport;
    });
    readonly signerType = "aa-signers:passport";
    getAddress: () => Promise<`0x${string}`>;
    signMessage: (msg: SignableMessage) => Promise<`0x${string}`>;
    signTypedData: <const TTypedData extends Record<string, unknown>, TPrimaryType extends string = string>(params: TypedDataDefinition<TTypedData, TPrimaryType>) => Promise<`0x${string}`>;
    authenticate: (params: PassportAuthenticationParams) => Promise<PassportUserInfo>;
    getAuthDetails: () => Promise<PassportUserInfo>;
}
