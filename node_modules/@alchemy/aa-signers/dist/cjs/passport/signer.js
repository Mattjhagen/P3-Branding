"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportSigner = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const constants_js_1 = require("../constants.js");
const passport_1 = require("@0xpass/passport");
const passport_viem_alchemy_1 = require("@0xpass/passport-viem-alchemy");
const viem_1 = require("viem");
class PassportSigner {
    constructor(params) {
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "authDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: `${constants_js_1.signerTypePrefix}passport`
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.inner || !this.signer) {
                    throw new Error("Not authenticated");
                }
                return this.signer.getAddress();
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                if (!this.inner || !this.signer) {
                    throw new Error("Not authenticated");
                }
                return this.signer.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (!this.inner || !this.signer) {
                    throw new Error("Not authenticated");
                }
                return this.signer.signTypedData(params);
            }
        });
        Object.defineProperty(this, "authenticate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                if (this.inner == null)
                    throw new Error("No provider found");
                await this.inner.setupEncryption();
                const [authenticatedHeaders, address] = await this.inner.authenticate({
                    username: params.username,
                    userDisplayName: params.userDisplayName,
                });
                const fallbackProvider = (0, viem_1.http)(params.fallbackProvider);
                const client = params.endpoint
                    ? (0, passport_viem_alchemy_1.createPassportClient)(authenticatedHeaders, fallbackProvider, params.chain, params.endpoint)
                    : (0, passport_viem_alchemy_1.createPassportClient)(authenticatedHeaders, fallbackProvider, params.chain);
                this.signer = new aa_core_1.WalletClientSigner(client, this.signerType);
                this.authDetails = {
                    authenticatedHeaders: authenticatedHeaders,
                    addresses: [address],
                };
                return this.authDetails;
            }
        });
        Object.defineProperty(this, "getAuthDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.inner || !this.signer || !this.authDetails) {
                    throw new Error("Not authenticated");
                }
                return this.authDetails;
            }
        });
        if ("inner" in params) {
            this.inner = params.inner;
        }
        else {
            this.inner = new passport_1.Passport(params);
        }
    }
}
exports.PassportSigner = PassportSigner;
//# sourceMappingURL=signer.js.map