{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/fordefi/signer.ts"],"names":[],"mappings":";;;AAAA,8CAG0B;AAC1B,0DAGgC;AAChC,+BAOc;AACd,kDAAmD;AAQnD,MAAa,aAAa;IAMxB,YAAY,MAA8D;QAH1E;;;;;WAA2B;QACnB;;;;;WAAuC;QAWtC;;;;mBAAa,GAAG,+BAAgB,SAAS;WAAC;QAQnD;;;;mBAAa,KAAK,IAAI,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/C,IAAI,OAAO,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBAEzD,OAAO,OAAsB,CAAC;YAChC,CAAC;WAAC;QASF;;;;mBAAc,KAAK,EAAE,GAAoB,EAAE,EAAE;gBAC3C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;WAAC;QASF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;WAAC;QAUF;;;;mBAAe,KAAK,IAAmB,EAAE;gBACvC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAE7D,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBAE3B,IAAI,CAAC,MAAM,GAAG,IAAI,4BAAkB,CAClC,IAAA,yBAAkB,EAAC;oBACjB,SAAS,EAAE,IAAA,aAAM,EAAC,IAAI,CAAC,KAAK,CAAC;iBAC9B,CAAC,EACF,IAAI,CAAC,UAAU,CAChB,CAAC;gBAEF,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;YAC/B,CAAC;WAAC;QASF;;;;mBAAiB,KAAK,IAAmB,EAAE;gBACzC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACzD,CAAC;WAAC;QAxFA,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,mCAAmB,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;CAmFF;AAhGD,sCAgGC","sourcesContent":["import {\n  WalletClientSigner,\n  type SmartAccountAuthenticator,\n} from \"@alchemy/aa-core\";\nimport {\n  type FordefiProviderConfig,\n  FordefiWeb3Provider,\n} from \"@fordefi/web3-provider\";\nimport {\n  createWalletClient,\n  custom,\n  type Hash,\n  type SignableMessage,\n  type TypedData,\n  type TypedDataDefinition,\n} from \"viem\";\nimport { signerTypePrefix } from \"../constants.js\";\n\n/**\n * This class requires the `@fordefi/web3-provider` dependency.\n * `@alchemy/aa-signers` lists it as optional dependency.\n *\n * @see https://github.com/FordefiHQ/web3-provider\n */\nexport class FordefiSigner\n  implements SmartAccountAuthenticator<void, void, FordefiWeb3Provider>\n{\n  inner: FordefiWeb3Provider;\n  private signer: WalletClientSigner | undefined;\n\n  constructor(params: FordefiProviderConfig | { inner: FordefiWeb3Provider }) {\n    if (\"inner\" in params) {\n      this.inner = params.inner;\n      return;\n    }\n\n    this.inner = new FordefiWeb3Provider(params);\n  }\n\n  readonly signerType = `${signerTypePrefix}fordefi`;\n\n  /**\n   * Returns the address managed by this signer.\n   *\n   * @returns the address managed by this signer\n   * @throws if the provider is not authenticated, or if the address was not found\n   */\n  getAddress = async () => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    const address = await this.signer.getAddress();\n    if (address == null) throw new Error(\"No address found\");\n\n    return address satisfies Hash;\n  };\n\n  /**\n   * Signs a message with the authenticated account.\n   *\n   * @param msg the message to sign\n   * @returns the address of the authenticated account\n   * @throws if the provider is not authenticated\n   */\n  signMessage = async (msg: SignableMessage) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signMessage(msg);\n  };\n\n  /**\n   * Signs a typed data object with the authenticated account.\n   *\n   * @param params the data object to sign\n   * @returns the signed data as a hex string\n   * @throws if the provider is not authenticated\n   */\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n\n    return this.signer.signTypedData(params);\n  };\n\n  /**\n   * Authenticates with the Fordefi platform and verifies that this client\n   * is authorized to manage the account.\n   * This step is required before any signing operations can be performed.\n   *\n   * @returns void\n   * @throws if no provider was found, or if authentication failed\n   */\n  authenticate = async (): Promise<void> => {\n    if (this.inner == null) throw new Error(\"No provider found\");\n\n    await this.inner.connect();\n\n    this.signer = new WalletClientSigner(\n      createWalletClient({\n        transport: custom(this.inner),\n      }),\n      this.signerType\n    );\n\n    return this.getAuthDetails();\n  };\n\n  /**\n   * Verifies that this signer is authenticated, and throws an error otherwise.\n   * Authentication details are not available.\n   *\n   * @returns void\n   * @throws Error if this signer is not authenticated\n   */\n  getAuthDetails = async (): Promise<void> => {\n    if (!this.signer) throw new Error(\"Not authenticated\");\n  };\n}\n"]}