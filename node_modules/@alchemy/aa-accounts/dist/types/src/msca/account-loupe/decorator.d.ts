import { type GetAccountParameter, type SmartContractAccount } from "@alchemy/aa-core";
import type { Address, Chain, Client, Hash, Transport } from "viem";
import type { ExecutionFunctionConfig, ExecutionHooks, FunctionReference, PreValidationHooks } from "./types.js";
export type AccountLoupeActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
    getExecutionFunctionConfig(args: {
        selector: FunctionReference;
    } & GetAccountParameter<TAccount>): Promise<ExecutionFunctionConfig>;
    getExecutionHooks(args: {
        selector: FunctionReference;
    } & GetAccountParameter<TAccount>): Promise<ReadonlyArray<ExecutionHooks>>;
    getPreValidationHooks(args: {
        selector: Hash;
    } & GetAccountParameter<TAccount>): Promise<Readonly<PreValidationHooks>>;
    getInstalledPlugins(args: GetAccountParameter<TAccount>): Promise<ReadonlyArray<Address>>;
};
export declare const accountLoupeActions: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: Client<TTransport, TChain, TAccount>) => AccountLoupeActions<TAccount>;
//# sourceMappingURL=decorator.d.ts.map