import { type GetAccountParameter, type GetContextParameter, type GetEntryPointFromAccount, type SmartAccountClient, type SmartContractAccount, type UserOperationOverridesParameter } from "@alchemy/aa-core";
import { type Address, type Chain, type Client, type Hash, type Transport } from "viem";
import type { FunctionReference } from "../account-loupe/types.js";
export type InstallPluginParams<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends Record<string, unknown> | undefined = Record<string, unknown> | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    pluginAddress: Address;
    manifestHash?: Hash;
    pluginInitData?: Hash;
    dependencies?: FunctionReference[];
} & UserOperationOverridesParameter<TEntryPointVersion> & GetAccountParameter<TAccount> & GetContextParameter<TContext>;
export declare function installPlugin<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends Record<string, unknown> | undefined = Record<string, unknown> | undefined>(client: Client<TTransport, TChain, TAccount>, { overrides, context, account, ...params }: InstallPluginParams<TAccount, TContext>): Promise<import("@alchemy/aa-core").SendUserOperationResult<GetEntryPointFromAccount<TAccount, SmartContractAccount<string, keyof import("@alchemy/aa-core").EntryPointRegistryBase<unknown>>>>>;
export declare function encodeInstallPluginUserOperation<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: SmartAccountClient<TTransport, TChain, TAccount>, params: Omit<InstallPluginParams, "overrides" | "account" | "context">): Promise<`0x${string}`>;
//# sourceMappingURL=installPlugin.d.ts.map