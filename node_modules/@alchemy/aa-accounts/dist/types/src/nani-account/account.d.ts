import { type BaseSmartAccountParams, type DefaultEntryPointVersion, type SmartAccountSigner, type SmartContractAccountWithSigner, type ToSmartContractAccountParams } from "@alchemy/aa-core";
import { type Address, type Chain, type FallbackTransport, type Hex, type Transport } from "viem";
export type NaniSmartAccountParams<TTransport extends Transport | FallbackTransport = Transport> = Omit<BaseSmartAccountParams<TTransport>, "rpcClient"> & {
    signer: SmartAccountSigner;
    index?: bigint;
    salt?: Hex;
    transport: TTransport;
    chain: Chain;
};
export type NaniAccount = SmartContractAccountWithSigner<"NaniAccount", SmartAccountSigner, "0.6.0"> & {
    encodeExecuteDelegate: (delegate: Address, data: Hex) => Hex;
    encodeTransferOwnership: (newOwner: Address) => Hex;
};
export declare const createNaniAccount: <TTransport extends Transport>(params: Omit<NaniSmartAccountParams<TTransport>, "chain" | "rpcClient"> & Pick<ToSmartContractAccountParams<"0.6.0">, "chain" | "transport">) => Promise<NaniAccount>;
//# sourceMappingURL=account.d.ts.map