import { z } from "zod";
export declare const NaniAccountFactoryConfigSchema: z.ZodObject<{
    signer: z.ZodType<import("@alchemy/aa-core").SmartAccountSigner<any>, z.ZodTypeDef, import("@alchemy/aa-core").SmartAccountSigner<any>>;
    accountAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    initCode: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    factoryAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    salt: z.ZodOptional<z.ZodEffects<z.ZodEffects<z.ZodString, `0x${string}`, string>, `0x${string}`, string>>;
    index: z.ZodOptional<z.ZodBigInt>;
}, "strip", z.ZodTypeAny, {
    signer: import("@alchemy/aa-core").SmartAccountSigner<any>;
    accountAddress?: `0x${string}` | undefined;
    initCode?: `0x${string}` | undefined;
    factoryAddress?: `0x${string}` | undefined;
    salt?: `0x${string}` | undefined;
    index?: bigint | undefined;
}, {
    signer: import("@alchemy/aa-core").SmartAccountSigner<any>;
    accountAddress?: string | undefined;
    initCode?: string | undefined;
    factoryAddress?: string | undefined;
    salt?: string | undefined;
    index?: bigint | undefined;
}>;
//# sourceMappingURL=schema.d.ts.map