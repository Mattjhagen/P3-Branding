{"version":3,"file":"multisigAccount.js","sourceRoot":"","sources":["../../../../../src/msca/account/multisigAccount.ts"],"names":[],"mappings":";;;AAAA,8CAW0B;AAC1B,+BAOc;AACd,+FAA4F;AAC5F,6DAAoE;AACpE,0CAA6E;AAC7E,+DAAyD;AAE5C,QAAA,uBAAuB,GAAG,wBAAwB,CAAC;AAyCzD,KAAK,UAAU,4BAA4B,CAAC,EACjD,SAAS,EACT,KAAK,EACL,MAAM,EACN,cAAc,EACd,QAAQ,EACR,UAAU,GAAG,IAAA,uBAAa,EAAC,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EACvD,cAAc,GAAG,IAAA,yDAA8C,EAAC,KAAK,CAAC,EACtE,MAAM,GAAG,EAAE,EACX,IAAI,GAAG,EAAE,EACT,SAAS,GAC0B;IACnC,MAAM,MAAM,GAAG,IAAA,6BAAmB,EAAC;QACjC,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,KAAK,IAAI,EAAE;QACpC,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,QAAQ,CAAC;QAClB,CAAC;QAGD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;QAE7C,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;aACvD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,kBAAW,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;aACpC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACb,MAAM,OAAO,GAAG,IAAA,kBAAW,EAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,OAAO,GAAG,IAAA,kBAAW,EAAC,CAAC,CAAC,CAAC;YAE/B,OAAO,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEL,OAAO,IAAA,gBAAS,EAAC;YACf,cAAc;YACd,IAAA,yBAAkB,EAAC;gBACjB,GAAG,EAAE,mEAAgC;gBACrC,YAAY,EAAE,eAAe;gBAC7B,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;aAC/B,CAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,cAAc,GAAG,MAAM,IAAA,2BAAiB,EAAC;QACvC,MAAM;QACN,UAAU;QACV,cAAc,EAAE,cAAc;QAC9B,kBAAkB;KACnB,CAAC,CAAC;IAEH,MAAM,WAAW,GAAG,MAAM,IAAA,gCAAsB,EAAC;QAC/C,SAAS;QACT,KAAK;QACL,UAAU;QACV,cAAc;QACd,MAAM,EAAE,+BAAuB;QAC/B,kBAAkB;QAClB,GAAG,sCAAgB;QACnB,GAAG,IAAA,+BAAmB,EAAC;YACrB,MAAM;YACN,cAAc;YACd,SAAS;YACT,MAAM,EAAE,GAAG,EAAE,CAAC,MAAM;SACrB,CAAC;KACH,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,WAAW;QACd,iBAAiB,EAAE,GAAG,EAAE,CAAC,SAAS;QAClC,SAAS,EAAE,MAAM,MAAM,CAAC,UAAU,EAAE;QACpC,SAAS,EAAE,GAAG,EAAE,CAAC,MAAM;KACxB,CAAC;AACJ,CAAC;AAzED,oEAyEC;AAEM,MAAM,wBAAwB,GAAG,CACtC,IAA0B,EACM,EAAE;IAClC,OAAO,IAAI,CAAC,MAAM,KAAK,+BAAuB,CAAC;AACjD,CAAC,CAAC;AAJW,QAAA,wBAAwB,4BAInC","sourcesContent":["import {\n  createBundlerClient,\n  getAccountAddress,\n  getEntryPoint,\n  toSmartContractAccount,\n  type Address,\n  type EntryPointParameter,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n  type SmartContractAccountWithSigner,\n  type ToSmartContractAccountParams,\n} from \"@alchemy/aa-core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  hexToBigInt,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { MultisigModularAccountFactoryAbi } from \"../abis/MultisigModularAccountFactory.js\";\nimport { multisigSignMethods } from \"../plugins/multisig/signer.js\";\nimport { getDefaultMultisigModularAccountFactoryAddress } from \"../utils.js\";\nimport { standardExecutor } from \"./standardExecutor.js\";\n\nexport const MULTISIG_ACCOUNT_SOURCE = \"MultisigModularAccount\";\n\nexport type MultisigModularAccount<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = SmartContractAccountWithSigner<\n  typeof MULTISIG_ACCOUNT_SOURCE,\n  TSigner,\n  \"0.6.0\"\n> & {\n  getLocalThreshold: () => bigint;\n};\n\nexport type CreateMultisigModularAccountParams<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TEntryPointVersion extends \"0.6.0\" = \"0.6.0\"\n> = Pick<\n  ToSmartContractAccountParams<\n    \"MultisigModularAccount\",\n    TTransport,\n    Chain,\n    TEntryPointVersion\n  >,\n  \"transport\" | \"chain\"\n> & {\n  signer: TSigner;\n  salt?: bigint;\n  factoryAddress?: Address;\n  initCode?: Hex;\n  threshold: bigint;\n  owners?: Address[];\n  accountAddress?: Address;\n} & EntryPointParameter<TEntryPointVersion, Chain>;\n\nexport async function createMultisigModularAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  config: CreateMultisigModularAccountParams<TTransport, TSigner>\n): Promise<MultisigModularAccount<TSigner>>;\n\nexport async function createMultisigModularAccount({\n  transport,\n  chain,\n  signer,\n  accountAddress,\n  initCode,\n  entryPoint = getEntryPoint(chain, { version: \"0.6.0\" }),\n  factoryAddress = getDefaultMultisigModularAccountFactoryAddress(chain),\n  owners = [],\n  salt = 0n,\n  threshold,\n}: CreateMultisigModularAccountParams): Promise<MultisigModularAccount> {\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const getAccountInitCode = async () => {\n    if (initCode) {\n      return initCode;\n    }\n\n    // NOTE: the current signer connected will be one of the sigs as well\n    const sigAddress = await signer.getAddress();\n    // sigs need to be deduped + ordered in ascending order and !== to zero address\n    const sigs_ = Array.from(new Set([...owners, sigAddress]))\n      .filter((x) => hexToBigInt(x) !== 0n)\n      .sort((a, b) => {\n        const bigintA = hexToBigInt(a);\n        const bigintB = hexToBigInt(b);\n\n        return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;\n      });\n\n    return concatHex([\n      factoryAddress,\n      encodeFunctionData({\n        abi: MultisigModularAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [salt, sigs_, threshold],\n      }),\n    ]);\n  };\n\n  accountAddress = await getAccountAddress({\n    client,\n    entryPoint,\n    accountAddress: accountAddress,\n    getAccountInitCode,\n  });\n\n  const baseAccount = await toSmartContractAccount({\n    transport,\n    chain,\n    entryPoint,\n    accountAddress,\n    source: MULTISIG_ACCOUNT_SOURCE,\n    getAccountInitCode,\n    ...standardExecutor,\n    ...multisigSignMethods({\n      client,\n      accountAddress,\n      threshold,\n      signer: () => signer,\n    }),\n  });\n\n  return {\n    ...baseAccount,\n    getLocalThreshold: () => threshold,\n    publicKey: await signer.getAddress(),\n    getSigner: () => signer,\n  };\n}\n\nexport const isMultisigModularAccount = (\n  acct: SmartContractAccount\n): acct is MultisigModularAccount => {\n  return acct.source === MULTISIG_ACCOUNT_SOURCE;\n};\n"]}