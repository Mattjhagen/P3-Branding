{"version":3,"file":"multiOwnerAccount.js","sourceRoot":"","sources":["../../../../../src/msca/account/multiOwnerAccount.ts"],"names":[],"mappings":";;;AAMA,8CAK0B;AAC1B,+BAQc;AACd,mGAAgG;AAChG,gEAA2E;AAC3E,0CAA+E;AAC/E,+DAAyD;AAwClD,KAAK,UAAU,8BAA8B,CAAC,EACnD,SAAS,EACT,KAAK,EACL,MAAM,EACN,cAAc,EACd,QAAQ,EACR,UAAU,GAAG,IAAA,uBAAa,EAAC,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EACvD,cAAc,GAAG,IAAA,2DAAgD,EAAC,KAAK,CAAC,EACxE,MAAM,GAAG,EAAE,EACX,IAAI,GAAG,EAAE,GAC4B;IACrC,MAAM,MAAM,GAAG,IAAA,6BAAmB,EAAC;QACjC,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,KAAK,IAAI,EAAE;QACpC,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,QAAQ,CAAC;QAClB,CAAC;QAGD,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;QAE/C,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;aAC3D,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,kBAAW,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;aACpC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACb,MAAM,OAAO,GAAG,IAAA,kBAAW,EAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,OAAO,GAAG,IAAA,kBAAW,EAAC,CAAC,CAAC,CAAC;YAE/B,OAAO,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEL,OAAO,IAAA,gBAAS,EAAC;YACf,cAAc;YACd,IAAA,yBAAkB,EAAC;gBACjB,GAAG,EAAE,uEAAkC;gBACvC,YAAY,EAAE,eAAe;gBAC7B,IAAI,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;aACtB,CAAC;SACH,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,MAAM,IAAA,2BAAiB,EAAC;QAC9C,MAAM;QACN,UAAU;QACV,cAAc;QACd,kBAAkB;KACnB,CAAC,CAAC;IAEH,MAAM,WAAW,GAAG,MAAM,IAAA,gCAAsB,EAAC;QAC/C,SAAS;QACT,KAAK;QACL,UAAU;QACV,cAAc,EAAE,eAAe;QAC/B,MAAM,EAAE,0BAA0B;QAClC,kBAAkB;QAClB,GAAG,sCAAgB;QACnB,GAAG,IAAA,mCAAuB,EAAC,MAAM,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;KAClE,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,WAAW;QACd,SAAS,EAAE,MAAM,MAAM,CAAC,UAAU,EAAE;QACpC,SAAS,EAAE,GAAG,EAAE,CAAC,MAAM;KACxB,CAAC;AACJ,CAAC;AAlED,wEAkEC","sourcesContent":["import type {\n  EntryPointParameter,\n  SmartAccountSigner,\n  SmartContractAccountWithSigner,\n  ToSmartContractAccountParams,\n} from \"@alchemy/aa-core\";\nimport {\n  createBundlerClient,\n  getAccountAddress,\n  getEntryPoint,\n  toSmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  hexToBigInt,\n  type Address,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { MultiOwnerModularAccountFactoryAbi } from \"../abis/MultiOwnerModularAccountFactory.js\";\nimport { multiOwnerMessageSigner } from \"../plugins/multi-owner/signer.js\";\nimport { getDefaultMultiOwnerModularAccountFactoryAddress } from \"../utils.js\";\nimport { standardExecutor } from \"./standardExecutor.js\";\n\nexport type MultiOwnerModularAccount<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = SmartContractAccountWithSigner<\n  \"MultiOwnerModularAccount\",\n  TSigner,\n  \"0.6.0\"\n>;\n\n// [!region CreateMultiOwnerModularAccountParams]\nexport type CreateMultiOwnerModularAccountParams<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TEntryPointVersion extends \"0.6.0\" = \"0.6.0\"\n> = Pick<\n  ToSmartContractAccountParams<\n    \"MultiOwnerModularAccount\",\n    TTransport,\n    Chain,\n    TEntryPointVersion\n  >,\n  \"transport\" | \"chain\"\n> & {\n  signer: TSigner;\n  salt?: bigint;\n  factoryAddress?: Address;\n  initCode?: Hex;\n  owners?: Address[];\n  accountAddress?: Address;\n} & EntryPointParameter<TEntryPointVersion, Chain>;\n// [!endregion CreateMultiOwnerModularAccountParams]\n\nexport async function createMultiOwnerModularAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  config: CreateMultiOwnerModularAccountParams<TTransport, TSigner>\n): Promise<MultiOwnerModularAccount<TSigner>>;\n\nexport async function createMultiOwnerModularAccount({\n  transport,\n  chain,\n  signer,\n  accountAddress,\n  initCode,\n  entryPoint = getEntryPoint(chain, { version: \"0.6.0\" }),\n  factoryAddress = getDefaultMultiOwnerModularAccountFactoryAddress(chain),\n  owners = [],\n  salt = 0n,\n}: CreateMultiOwnerModularAccountParams): Promise<MultiOwnerModularAccount> {\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const getAccountInitCode = async () => {\n    if (initCode) {\n      return initCode;\n    }\n\n    // NOTE: the current signer connected will be one of the owners as well\n    const ownerAddress = await signer.getAddress();\n    // owners need to be dedupe + ordered in ascending order and not == to zero address\n    const owners_ = Array.from(new Set([...owners, ownerAddress]))\n      .filter((x) => hexToBigInt(x) !== 0n)\n      .sort((a, b) => {\n        const bigintA = hexToBigInt(a);\n        const bigintB = hexToBigInt(b);\n\n        return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;\n      });\n\n    return concatHex([\n      factoryAddress,\n      encodeFunctionData({\n        abi: MultiOwnerModularAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [salt, owners_],\n      }),\n    ]);\n  };\n\n  const _accountAddress = await getAccountAddress({\n    client,\n    entryPoint,\n    accountAddress,\n    getAccountInitCode,\n  });\n\n  const baseAccount = await toSmartContractAccount({\n    transport,\n    chain,\n    entryPoint,\n    accountAddress: _accountAddress,\n    source: `MultiOwnerModularAccount`,\n    getAccountInitCode,\n    ...standardExecutor,\n    ...multiOwnerMessageSigner(client, _accountAddress, () => signer),\n  });\n\n  return {\n    ...baseAccount,\n    publicKey: await signer.getAddress(),\n    getSigner: () => signer,\n  };\n}\n"]}