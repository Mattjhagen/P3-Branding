"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMAInitializationData = exports.getMSCAUpgradeToData = exports.getDefaultMultiOwnerModularAccountFactoryAddress = exports.getDefaultMultisigModularAccountFactoryAddress = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const viem_1 = require("viem");
const IPlugin_js_1 = require("./abis/IPlugin.js");
const MultiOwnerModularAccountFactory_js_1 = require("./abis/MultiOwnerModularAccountFactory.js");
const UpgradeableModularAccount_js_1 = require("./abis/UpgradeableModularAccount.js");
const multiOwnerAccount_js_1 = require("./account/multiOwnerAccount.js");
const plugin_js_1 = require("./plugins/multi-owner/plugin.js");
const getDefaultMultisigModularAccountFactoryAddress = (chain) => {
    switch (chain.id) {
        case aa_core_1.sepolia.id:
        case aa_core_1.baseSepolia.id:
        case aa_core_1.polygon.id:
        case aa_core_1.mainnet.id:
        case aa_core_1.polygonAmoy.id:
        case aa_core_1.optimism.id:
        case aa_core_1.optimismSepolia.id:
        case aa_core_1.arbitrum.id:
        case aa_core_1.arbitrumSepolia.id:
        case aa_core_1.base.id:
        default:
            return "0x000000000000204327E6669f00901a57CE15aE15";
    }
};
exports.getDefaultMultisigModularAccountFactoryAddress = getDefaultMultisigModularAccountFactoryAddress;
const getDefaultMultiOwnerModularAccountFactoryAddress = (chain) => {
    switch (chain.id) {
        default:
            return "0x000000e92D78D90000007F0082006FDA09BD5f11";
    }
};
exports.getDefaultMultiOwnerModularAccountFactoryAddress = getDefaultMultiOwnerModularAccountFactoryAddress;
async function getMSCAUpgradeToData(client, args) {
    const { account: account_ = client.account, multiOwnerPluginAddress } = args;
    if (!account_) {
        throw new aa_core_1.AccountNotFoundError();
    }
    const account = account_;
    const chain = client.chain;
    if (!chain) {
        throw new aa_core_1.ChainNotFoundError();
    }
    const initData = await getMAInitializationData({
        client,
        multiOwnerPluginAddress,
        signerAddress: await account.getSigner().getAddress(),
    });
    return {
        ...initData,
        createMAAccount: async () => (0, multiOwnerAccount_js_1.createMultiOwnerModularAccount)({
            transport: (0, viem_1.custom)(client.transport),
            chain: chain,
            signer: account.getSigner(),
            accountAddress: account.address,
        }),
    };
}
exports.getMSCAUpgradeToData = getMSCAUpgradeToData;
async function getMAInitializationData({ client, multiOwnerPluginAddress, signerAddress, }) {
    if (!client.chain) {
        throw new aa_core_1.ChainNotFoundError();
    }
    const factoryAddress = (0, exports.getDefaultMultiOwnerModularAccountFactoryAddress)(client.chain);
    const implAddress = await client.readContract({
        abi: MultiOwnerModularAccountFactory_js_1.MultiOwnerModularAccountFactoryAbi,
        address: factoryAddress,
        functionName: "IMPL",
    });
    const multiOwnerAddress = multiOwnerPluginAddress ?? plugin_js_1.MultiOwnerPlugin.meta.addresses[client.chain.id];
    if (!multiOwnerAddress) {
        throw new Error("could not get multi owner plugin address");
    }
    const moPluginManifest = await client.readContract({
        abi: IPlugin_js_1.IPluginAbi,
        address: multiOwnerAddress,
        functionName: "pluginManifest",
    });
    const hashedMultiOwnerPluginManifest = (0, viem_1.keccak256)((0, viem_1.encodeFunctionResult)({
        abi: IPlugin_js_1.IPluginAbi,
        functionName: "pluginManifest",
        result: moPluginManifest,
    }));
    const encodedOwner = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("address[]"), Array.isArray(signerAddress) ? [signerAddress] : [[signerAddress]]);
    const encodedPluginInitData = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("bytes32[], bytes[]"), [[hashedMultiOwnerPluginManifest], [encodedOwner]]);
    const encodedMSCAInitializeData = (0, viem_1.encodeFunctionData)({
        abi: UpgradeableModularAccount_js_1.UpgradeableModularAccountAbi,
        functionName: "initialize",
        args: [[multiOwnerAddress], encodedPluginInitData],
    });
    return {
        implAddress,
        initializationData: encodedMSCAInitializeData,
    };
}
exports.getMAInitializationData = getMAInitializationData;
//# sourceMappingURL=utils.js.map