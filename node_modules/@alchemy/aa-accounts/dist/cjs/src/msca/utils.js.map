{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/msca/utils.ts"],"names":[],"mappings":";;;AAAA,8CAmB0B;AAE1B,+BAOc;AACd,kDAA+C;AAC/C,kGAA+F;AAC/F,sFAAmF;AACnF,yEAGwC;AACxC,+DAAmE;AAS5D,MAAM,8CAA8C,GAAG,CAC5D,KAAY,EACH,EAAE;IACX,QAAQ,KAAK,CAAC,EAAE,EAAE,CAAC;QACjB,KAAK,iBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,qBAAW,CAAC,EAAE,CAAC;QACpB,KAAK,iBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,iBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,qBAAW,CAAC,EAAE,CAAC;QACpB,KAAK,kBAAQ,CAAC,EAAE,CAAC;QACjB,KAAK,yBAAe,CAAC,EAAE,CAAC;QACxB,KAAK,kBAAQ,CAAC,EAAE,CAAC;QACjB,KAAK,yBAAe,CAAC,EAAE,CAAC;QACxB,KAAK,cAAI,CAAC,EAAE,CAAC;QACb;YACE,OAAO,4CAA4C,CAAC;IACxD,CAAC;AACH,CAAC,CAAC;AAjBW,QAAA,8CAA8C,kDAiBzD;AASK,MAAM,gDAAgD,GAAG,CAC9D,KAAY,EACH,EAAE;IACX,QAAQ,KAAK,CAAC,EAAE,EAAE,CAAC;QACjB;YACE,OAAO,4CAA4C,CAAC;IACxD,CAAC;AACH,CAAC,CAAC;AAPW,QAAA,gDAAgD,oDAO3D;AAEK,KAAK,UAAU,oBAAoB,CAQxC,MAAwD,EACxD,IAEiC;IAMjC,MAAM,EAAE,OAAO,EAAE,QAAQ,GAAG,MAAM,CAAC,OAAO,EAAE,uBAAuB,EAAE,GAAG,IAAI,CAAC;IAE7E,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,8BAAoB,EAAE,CAAC;IACnC,CAAC;IACD,MAAM,OAAO,GAAG,QAA2D,CAAC;IAE5E,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,4BAAkB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,uBAAuB,CAAC;QAC7C,MAAM;QACN,uBAAuB;QACvB,aAAa,EAAE,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE;KACtD,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,QAAQ;QACX,eAAe,EAAE,KAAK,IAAI,EAAE,CAC1B,IAAA,qDAA8B,EAAC;YAC7B,SAAS,EAAE,IAAA,aAAM,EAAC,MAAM,CAAC,SAAS,CAAC;YACnC,KAAK,EAAE,KAAc;YACrB,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE;YAC3B,cAAc,EAAE,OAAO,CAAC,OAAO;SAChC,CAAC;KACL,CAAC;AACJ,CAAC;AA7CD,oDA6CC;AAEM,KAAK,UAAU,uBAAuB,CAM3C,EACA,MAAM,EACN,uBAAuB,EACvB,aAAa,GAKd;IACC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,IAAI,4BAAkB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,cAAc,GAAG,IAAA,wDAAgD,EACrE,MAAM,CAAC,KAAK,CACb,CAAC;IAEF,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;QAC5C,GAAG,EAAE,uEAAkC;QACvC,OAAO,EAAE,cAAc;QACvB,YAAY,EAAE,MAAM;KACrB,CAAC,CAAC;IAEH,MAAM,iBAAiB,GACrB,uBAAuB,IAAI,4BAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAE9E,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM,gBAAgB,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;QACjD,GAAG,EAAE,uBAAU;QACf,OAAO,EAAE,iBAAiB;QAC1B,YAAY,EAAE,gBAAgB;KAC/B,CAAC,CAAC;IAEH,MAAM,8BAA8B,GAAG,IAAA,gBAAS,EAC9C,IAAA,2BAAoB,EAAC;QACnB,GAAG,EAAE,uBAAU;QACf,YAAY,EAAE,gBAAgB;QAC9B,MAAM,EAAE,gBAAgB;KACzB,CAAC,CACH,CAAC;IAEF,MAAM,YAAY,GAAG,IAAA,0BAAmB,EACtC,IAAA,yBAAkB,EAAC,WAAW,CAAC,EAC/B,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CACnE,CAAC;IAEF,MAAM,qBAAqB,GAAG,IAAA,0BAAmB,EAC/C,IAAA,yBAAkB,EAAC,oBAAoB,CAAC,EACxC,CAAC,CAAC,8BAA8B,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CACnD,CAAC;IAEF,MAAM,yBAAyB,GAAG,IAAA,yBAAkB,EAAC;QACnD,GAAG,EAAE,2DAA4B;QACjC,YAAY,EAAE,YAAY;QAC1B,IAAI,EAAE,CAAC,CAAC,iBAAiB,CAAC,EAAE,qBAAqB,CAAC;KACnD,CAAC,CAAC;IAEH,OAAO;QACL,WAAW;QACX,kBAAkB,EAAE,yBAAyB;KAC9C,CAAC;AACJ,CAAC;AAtED,0DAsEC","sourcesContent":["import {\n  AccountNotFoundError,\n  ChainNotFoundError,\n  arbitrum,\n  arbitrumSepolia,\n  base,\n  baseSepolia,\n  mainnet,\n  optimism,\n  optimismSepolia,\n  polygon,\n  polygonAmoy,\n  sepolia,\n  type GetAccountParameter,\n  type SmartAccountClient,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n  type SmartContractAccountWithSigner,\n  type UpgradeToData,\n} from \"@alchemy/aa-core\";\nimport type { Address, Chain, Transport } from \"viem\";\nimport {\n  custom,\n  encodeAbiParameters,\n  encodeFunctionData,\n  encodeFunctionResult,\n  keccak256,\n  parseAbiParameters,\n} from \"viem\";\nimport { IPluginAbi } from \"./abis/IPlugin.js\";\nimport { MultiOwnerModularAccountFactoryAbi } from \"./abis/MultiOwnerModularAccountFactory.js\";\nimport { UpgradeableModularAccountAbi } from \"./abis/UpgradeableModularAccount.js\";\nimport {\n  createMultiOwnerModularAccount,\n  type MultiOwnerModularAccount,\n} from \"./account/multiOwnerAccount.js\";\nimport { MultiOwnerPlugin } from \"./plugins/multi-owner/plugin.js\";\n\n/**\n * Utility method returning the default multi sig msca factory address given a {@link Chain} object\n *\n * @param chain - a {@link Chain} object\n * @returns a {@link Address} for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultMultisigModularAccountFactoryAddress = (\n  chain: Chain\n): Address => {\n  switch (chain.id) {\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x000000000000204327E6669f00901a57CE15aE15\";\n  }\n};\n\n/**\n * Utility method returning the default multi owner msca factory address given a {@link Chain} object\n *\n * @param chain - a {@link Chain} object\n * @returns a {@link Address} for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultMultiOwnerModularAccountFactoryAddress = (\n  chain: Chain\n): Address => {\n  switch (chain.id) {\n    default:\n      return \"0x000000e92D78D90000007F0082006FDA09BD5f11\";\n  }\n};\n\nexport async function getMSCAUpgradeToData<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends\n    | SmartContractAccountWithSigner<string, TSigner>\n    | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined\n>(\n  client: SmartAccountClient<TTransport, TChain, TAccount>,\n  args: {\n    multiOwnerPluginAddress?: Address;\n  } & GetAccountParameter<TAccount>\n): Promise<\n  UpgradeToData & {\n    createMAAccount: () => Promise<MultiOwnerModularAccount<TSigner>>;\n  }\n> {\n  const { account: account_ = client.account, multiOwnerPluginAddress } = args;\n\n  if (!account_) {\n    throw new AccountNotFoundError();\n  }\n  const account = account_ as SmartContractAccountWithSigner<string, TSigner>;\n\n  const chain = client.chain;\n  if (!chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const initData = await getMAInitializationData({\n    client,\n    multiOwnerPluginAddress,\n    signerAddress: await account.getSigner().getAddress(),\n  });\n\n  return {\n    ...initData,\n    createMAAccount: async () =>\n      createMultiOwnerModularAccount({\n        transport: custom(client.transport),\n        chain: chain as Chain,\n        signer: account.getSigner(),\n        accountAddress: account.address,\n      }),\n  };\n}\n\nexport async function getMAInitializationData<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>({\n  client,\n  multiOwnerPluginAddress,\n  signerAddress,\n}: {\n  multiOwnerPluginAddress?: Address;\n  client: SmartAccountClient<TTransport, TChain, TAccount>;\n  signerAddress: Address | Address[];\n}): Promise<UpgradeToData> {\n  if (!client.chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const factoryAddress = getDefaultMultiOwnerModularAccountFactoryAddress(\n    client.chain\n  );\n\n  const implAddress = await client.readContract({\n    abi: MultiOwnerModularAccountFactoryAbi,\n    address: factoryAddress,\n    functionName: \"IMPL\",\n  });\n\n  const multiOwnerAddress =\n    multiOwnerPluginAddress ?? MultiOwnerPlugin.meta.addresses[client.chain.id];\n\n  if (!multiOwnerAddress) {\n    throw new Error(\"could not get multi owner plugin address\");\n  }\n\n  const moPluginManifest = await client.readContract({\n    abi: IPluginAbi,\n    address: multiOwnerAddress,\n    functionName: \"pluginManifest\",\n  });\n\n  const hashedMultiOwnerPluginManifest = keccak256(\n    encodeFunctionResult({\n      abi: IPluginAbi,\n      functionName: \"pluginManifest\",\n      result: moPluginManifest,\n    })\n  );\n\n  const encodedOwner = encodeAbiParameters(\n    parseAbiParameters(\"address[]\"),\n    Array.isArray(signerAddress) ? [signerAddress] : [[signerAddress]]\n  );\n\n  const encodedPluginInitData = encodeAbiParameters(\n    parseAbiParameters(\"bytes32[], bytes[]\"),\n    [[hashedMultiOwnerPluginManifest], [encodedOwner]]\n  );\n\n  const encodedMSCAInitializeData = encodeFunctionData({\n    abi: UpgradeableModularAccountAbi,\n    functionName: \"initialize\",\n    args: [[multiOwnerAddress], encodedPluginInitData],\n  });\n\n  return {\n    implAddress,\n    initializationData: encodedMSCAInitializeData,\n  };\n}\n"]}