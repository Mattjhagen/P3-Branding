{"version":3,"file":"installPlugin.js","sourceRoot":"","sources":["../../../../../src/msca/plugin-manager/installPlugin.ts"],"names":[],"mappings":";;;AAAA,8CAU0B;AAC1B,+BASc;AACd,mDAAgD;AAChD,iEAA8D;AAoBvD,KAAK,UAAU,aAAa,CAUjC,MAA4C,EAC5C,EACE,SAAS,EACT,OAAO,EACP,OAAO,GAAG,MAAM,CAAC,OAAO,EACxB,GAAG,MAAM,EAC+B;IAE1C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,8BAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAA,8BAAoB,EAAC,MAAM,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,iCAAuB,CAC/B,oBAAoB,EACpB,eAAe,EACf,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,QAAQ,GAAG,MAAM,gCAAgC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAExE,OAAO,MAAM,CAAC,iBAAiB,CAAC;QAC9B,EAAE,EAAE,QAAQ;QACZ,SAAS;QACT,OAAO;QACP,OAAO;KACR,CAAC,CAAC;AACL,CAAC;AAtCD,sCAsCC;AAEM,KAAK,UAAU,gCAAgC,CAOpD,MAAwD,EACxD,MAAsE;IAEtE,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;QAC/C,GAAG,EAAE,uBAAU;QACf,OAAO,EAAE,MAAM,CAAC,aAAa;QAC7B,YAAY,EAAE,gBAAgB;KAC/B,CAAC,CAAC;IAEH,MAAM,YAAY,GAChB,MAAM,CAAC,YAAY;QACnB,IAAA,gBAAS,EACP,IAAA,2BAAoB,EAAC;YACnB,GAAG,EAAE,uBAAU;YACf,YAAY,EAAE,gBAAgB;YAC9B,MAAM,EAAE,cAAc;SACvB,CAAC,CACH,CAAC;IACJ,OAAO,IAAA,yBAAkB,EAAC;QACxB,GAAG,EAAE,qCAAiB;QACtB,YAAY,EAAE,eAAe;QAC7B,IAAI,EAAE;YACJ,MAAM,CAAC,aAAa;YACpB,YAAY;YACZ,MAAM,CAAC,cAAc,IAAI,IAAI;YAC7B,MAAM,CAAC,YAAY,IAAI,EAAE;SAC1B;KACF,CAAC,CAAC;AACL,CAAC;AAnCD,4EAmCC","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  isSmartAccountClient,\n  type GetAccountParameter,\n  type GetContextParameter,\n  type GetEntryPointFromAccount,\n  type SmartAccountClient,\n  type SmartContractAccount,\n  type UserOperationOverridesParameter,\n} from \"@alchemy/aa-core\";\nimport {\n  encodeFunctionData,\n  encodeFunctionResult,\n  keccak256,\n  type Address,\n  type Chain,\n  type Client,\n  type Hash,\n  type Transport,\n} from \"viem\";\nimport { IPluginAbi } from \"../abis/IPlugin.js\";\nimport { IPluginManagerAbi } from \"../abis/IPluginManager.js\";\nimport type { FunctionReference } from \"../account-loupe/types.js\";\n\nexport type InstallPluginParams<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends Record<string, unknown> | undefined =\n    | Record<string, unknown>\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n> = {\n  pluginAddress: Address;\n  manifestHash?: Hash;\n  pluginInitData?: Hash;\n  dependencies?: FunctionReference[];\n} & UserOperationOverridesParameter<TEntryPointVersion> &\n  GetAccountParameter<TAccount> &\n  GetContextParameter<TContext>;\n\nexport async function installPlugin<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends Record<string, unknown> | undefined =\n    | Record<string, unknown>\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  {\n    overrides,\n    context,\n    account = client.account,\n    ...params\n  }: InstallPluginParams<TAccount, TContext>\n) {\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"SmartAccountClient\",\n      \"installPlugin\",\n      client\n    );\n  }\n\n  const callData = await encodeInstallPluginUserOperation(client, params);\n\n  return client.sendUserOperation({\n    uo: callData,\n    overrides,\n    account,\n    context,\n  });\n}\n\nexport async function encodeInstallPluginUserOperation<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: SmartAccountClient<TTransport, TChain, TAccount>,\n  params: Omit<InstallPluginParams, \"overrides\" | \"account\" | \"context\">\n) {\n  const pluginManifest = await client.readContract({\n    abi: IPluginAbi,\n    address: params.pluginAddress,\n    functionName: \"pluginManifest\",\n  });\n  // use the manifest hash passed in or get it from the plugin\n  const manifestHash: Hash =\n    params.manifestHash ??\n    keccak256(\n      encodeFunctionResult({\n        abi: IPluginAbi,\n        functionName: \"pluginManifest\",\n        result: pluginManifest,\n      })\n    );\n  return encodeFunctionData({\n    abi: IPluginManagerAbi,\n    functionName: \"installPlugin\",\n    args: [\n      params.pluginAddress,\n      manifestHash,\n      params.pluginInitData ?? \"0x\",\n      params.dependencies ?? [],\n    ],\n  });\n}\n"]}