"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeInstallPluginUserOperation = exports.installPlugin = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const viem_1 = require("viem");
const IPlugin_js_1 = require("../abis/IPlugin.js");
const IPluginManager_js_1 = require("../abis/IPluginManager.js");
async function installPlugin(client, { overrides, context, account = client.account, ...params }) {
    if (!account) {
        throw new aa_core_1.AccountNotFoundError();
    }
    if (!(0, aa_core_1.isSmartAccountClient)(client)) {
        throw new aa_core_1.IncompatibleClientError("SmartAccountClient", "installPlugin", client);
    }
    const callData = await encodeInstallPluginUserOperation(client, params);
    return client.sendUserOperation({
        uo: callData,
        overrides,
        account,
        context,
    });
}
exports.installPlugin = installPlugin;
async function encodeInstallPluginUserOperation(client, params) {
    const pluginManifest = await client.readContract({
        abi: IPlugin_js_1.IPluginAbi,
        address: params.pluginAddress,
        functionName: "pluginManifest",
    });
    const manifestHash = params.manifestHash ??
        (0, viem_1.keccak256)((0, viem_1.encodeFunctionResult)({
            abi: IPlugin_js_1.IPluginAbi,
            functionName: "pluginManifest",
            result: pluginManifest,
        }));
    return (0, viem_1.encodeFunctionData)({
        abi: IPluginManager_js_1.IPluginManagerAbi,
        functionName: "installPlugin",
        args: [
            params.pluginAddress,
            manifestHash,
            params.pluginInitData ?? "0x",
            params.dependencies ?? [],
        ],
    });
}
exports.encodeInstallPluginUserOperation = encodeInstallPluginUserOperation;
//# sourceMappingURL=installPlugin.js.map