{"version":3,"file":"formatSignatures.js","sourceRoot":"","sources":["../../../../../../../src/msca/plugins/multisig/utils/formatSignatures.ts"],"names":[],"mappings":";;;AAAA,8CAA6C;AAC7C,+BAAuD;AAahD,MAAM,gBAAgB,GAAG,CAC9B,UAAuB,EACvB,iBAA0B,KAAK,EAC/B,EAAE;IACF,IAAI,OAAO,GAAW,EAAE,CAAC;IACzB,IAAI,YAAY,GAAW,EAAE,CAAC;IAC9B,IAAI,MAAM,GAAW,MAAM,CAAC,EAAE,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACpD,UAAU;SACP,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACb,MAAM,OAAO,GAAG,IAAA,kBAAW,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,IAAA,kBAAW,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAEtC,OAAO,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC;SACD,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAEf,MAAM,IAAI,GAAG,GAAG,CAAC,aAAa,KAAK,QAAQ,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAExE,IAAI,GAAG,CAAC,UAAU,KAAK,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,GACH,QAAQ,CAAC,IAAA,mBAAS,EAAC,GAAG,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;YACtE,OAAO,IAAI,IAAA,aAAM,EAAC;gBAChB,IAAA,mBAAS,EAAC,GAAG,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;gBACvC,IAAA,YAAK,EAAC,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;aACtB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACd,CAAC;aAAM,CAAC;YACN,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzD,OAAO,IAAI,IAAA,aAAM,EAAC;gBAChB,IAAA,UAAG,EAAC,GAAG,CAAC,MAAM,CAAC;gBACf,IAAA,YAAK,EAAC,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBAC3B,IAAA,YAAK,EAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;aACzB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACZ,YAAY,IAAI,IAAA,aAAM,EAAC;gBACrB,IAAA,YAAK,EAAC,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBAC3B,GAAG,CAAC,SAAS;aACd,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACZ,MAAM,IAAI,MAAM,CAAC;QACnB,CAAC;IACH,CAAC,CAAC,CAAC;IACL,OAAO,CAAC,IAAI,GAAG,OAAO,GAAG,YAAY,CAAkB,CAAC;AAC1D,CAAC,CAAC;AAxCW,QAAA,gBAAgB,oBAwC3B","sourcesContent":["import { takeBytes } from \"@alchemy/aa-core\";\nimport { concat, hexToBigInt, pad, toHex } from \"viem\";\nimport type { Signature } from \"../types\";\n\n/**\n * Formats a collection of Signature objects into a single aggregated signature.\n * The format is in the form of EOA_SIGS | CONTRACT_SIG_DATAS. The signatures are ordered\n * by signer address. The EOA SIGS contain the 65 signautre data for EOA signers and 65 bytes containing SIGNER | OFFSET | V for contract signers.\n * The OFFSET is used to fetch the signature data from the CONTRACT_SIG_DATAS.\n *\n * @param signatures the array of {@link Signature} objects to combine into the correct aggregated signature format excluding the upper limits\n * @param usingMaxValues a boolean indicating wether or not the UserOperation is using the UPPER_LIMIT for the gas and fee values\n * @returns the Hex representation of the signature\n */\nexport const formatSignatures = (\n  signatures: Signature[],\n  usingMaxValues: boolean = false\n) => {\n  let eoaSigs: string = \"\";\n  let contractSigs: string = \"\";\n  let offset: bigint = BigInt(65 * signatures.length);\n  signatures\n    .sort((a, b) => {\n      const bigintA = hexToBigInt(a.signer);\n      const bigintB = hexToBigInt(b.signer);\n\n      return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;\n    })\n    .forEach((sig) => {\n      // add 32 to v if the signature covers the actual gas values\n      const addV = sig.userOpSigType === \"ACTUAL\" && !usingMaxValues ? 32 : 0;\n\n      if (sig.signerType === \"EOA\") {\n        let v =\n          parseInt(takeBytes(sig.signature, { count: 1, offset: 64 })) + addV;\n        eoaSigs += concat([\n          takeBytes(sig.signature, { count: 64 }),\n          toHex(v, { size: 1 }),\n        ]).slice(2);\n      } else {\n        const sigLen = BigInt(sig.signature.slice(2).length / 2);\n        eoaSigs += concat([\n          pad(sig.signer),\n          toHex(offset, { size: 32 }),\n          toHex(addV, { size: 1 }),\n        ]).slice(2);\n        contractSigs += concat([\n          toHex(sigLen, { size: 32 }),\n          sig.signature,\n        ]).slice(2);\n        offset += sigLen;\n      }\n    });\n  return (\"0x\" + eoaSigs + contractSigs) as `0x${string}`;\n};\n"]}