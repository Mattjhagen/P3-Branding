"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sessionKeyPluginActions = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const plugin_js_1 = require("./plugin.js");
const utils_js_1 = require("./utils.js");
const sessionKeyPluginActions = (client) => {
    const { removeSessionKey, addSessionKey, rotateSessionKey, updateKeyPermissions, ...og } = (0, plugin_js_1.sessionKeyPluginActions)(client);
    return {
        ...og,
        isAccountSessionKey: async ({ key, pluginAddress, account = client.account, }) => {
            if (!account)
                throw new aa_core_1.AccountNotFoundError();
            const contract = plugin_js_1.SessionKeyPlugin.getContract(client, pluginAddress);
            return await contract.read.isSessionKeyOf([account.address, key]);
        },
        getAccountSessionKeys: async (args) => {
            const account = args?.account ?? client.account;
            if (!account)
                throw new aa_core_1.AccountNotFoundError();
            const contract = plugin_js_1.SessionKeyPlugin.getContract(client, args?.pluginAddress);
            return await contract.read.sessionKeysOf([account.address]);
        },
        removeSessionKey: async ({ key, overrides, account = client.account, pluginAddress, }) => {
            if (!account)
                throw new aa_core_1.AccountNotFoundError();
            const sessionKeysToRemove = await (0, utils_js_1.buildSessionKeysToRemoveStruct)(client, {
                keys: [key],
                account,
                pluginAddress,
            });
            return removeSessionKey({
                args: [key, sessionKeysToRemove[0].predecessor],
                overrides: overrides,
                account,
            });
        },
        addSessionKey: async ({ key, tag, permissions, overrides, pluginAddress, account = client.account, }) => {
            if (!account)
                throw new aa_core_1.AccountNotFoundError();
            return addSessionKey({
                args: [key, tag, permissions],
                overrides: overrides,
                account,
                pluginAddress,
            });
        },
        rotateSessionKey: async ({ newKey, oldKey, overrides, pluginAddress, account = client.account, }) => {
            if (!account)
                throw new aa_core_1.AccountNotFoundError();
            const contract = plugin_js_1.SessionKeyPlugin.getContract(client, pluginAddress);
            const predecessor = await contract.read.findPredecessor([
                account.address,
                oldKey,
            ]);
            return rotateSessionKey({
                args: [oldKey, predecessor, newKey],
                overrides: overrides,
                account,
                pluginAddress,
            });
        },
        updateSessionKeyPermissions: async ({ key, permissions, overrides, pluginAddress, account = client.account, }) => {
            if (!account)
                throw new aa_core_1.AccountNotFoundError();
            return updateKeyPermissions({
                args: [key, permissions],
                overrides: overrides,
                account,
                pluginAddress,
            });
        },
    };
};
exports.sessionKeyPluginActions = sessionKeyPluginActions;
//# sourceMappingURL=extension.js.map