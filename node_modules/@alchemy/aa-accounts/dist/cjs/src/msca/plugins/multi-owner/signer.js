"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.multiOwnerMessageSigner = void 0;
const viem_1 = require("viem");
const plugin_js_1 = require("./plugin.js");
const multiOwnerMessageSigner = (client, accountAddress, signer, pluginAddress = plugin_js_1.MultiOwnerPlugin.meta.addresses[client.chain.id]) => {
    const signWith712Wrapper = async (msg) => {
        const [, name, version, chainId, verifyingContract, salt] = await client.readContract({
            abi: plugin_js_1.MultiOwnerPluginAbi,
            address: pluginAddress,
            functionName: "eip712Domain",
            account: accountAddress,
        });
        return signer().signTypedData({
            domain: {
                chainId: Number(chainId),
                name,
                salt,
                verifyingContract,
                version,
            },
            types: {
                AlchemyModularAccountMessage: [{ name: "message", type: "bytes" }],
            },
            message: {
                message: msg,
            },
            primaryType: "AlchemyModularAccountMessage",
        });
    };
    return {
        getDummySignature: () => {
            return "0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";
        },
        signUserOperationHash: (uoHash) => {
            return signer().signMessage({ raw: uoHash });
        },
        signMessage({ message, }) {
            return signWith712Wrapper((0, viem_1.hashMessage)(message));
        },
        signTypedData: (typedDataDefinition) => {
            return signWith712Wrapper((0, viem_1.hashTypedData)(typedDataDefinition));
        },
    };
};
exports.multiOwnerMessageSigner = multiOwnerMessageSigner;
//# sourceMappingURL=signer.js.map