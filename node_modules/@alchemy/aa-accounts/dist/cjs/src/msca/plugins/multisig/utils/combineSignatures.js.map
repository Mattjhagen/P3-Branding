{"version":3,"file":"combineSignatures.js","sourceRoot":"","sources":["../../../../../../../src/msca/plugins/multisig/utils/combineSignatures.ts"],"names":[],"mappings":";;;AAAA,+BAA6C;AAE7C,+DAAyD;AAElD,MAAM,iBAAiB,GAAG,CAAC,EAChC,UAAU,EACV,sBAAsB,EACtB,8BAA8B,EAC9B,aAAa,EACb,cAAc,GAOf,EAAE,EAAE;IACH,OAAO,IAAA,aAAM,EAAC;QACZ,IAAA,UAAG,EAAC,aAAa,CAAC;QAClB,IAAA,UAAG,EAAC,sBAAsB,CAAC;QAC3B,IAAA,UAAG,EAAC,8BAA8B,CAAC;QACnC,IAAA,sCAAgB,EAAC,UAAU,EAAE,cAAc,CAAC;KAC7C,CAAC,CAAC;AACL,CAAC,CAAC;AAnBW,QAAA,iBAAiB,qBAmB5B","sourcesContent":["import { type Hex, concat, pad } from \"viem\";\nimport type { Signature } from \"../types.js\";\nimport { formatSignatures } from \"./formatSignatures.js\";\n\nexport const combineSignatures = ({\n  signatures,\n  upperLimitMaxFeePerGas,\n  upperLimitMaxPriorityFeePerGas,\n  upperLimitPvg,\n  usingMaxValues,\n}: {\n  upperLimitPvg: Hex;\n  upperLimitMaxFeePerGas: Hex;\n  upperLimitMaxPriorityFeePerGas: Hex;\n  signatures: Signature[];\n  usingMaxValues: boolean;\n}) => {\n  return concat([\n    pad(upperLimitPvg),\n    pad(upperLimitMaxFeePerGas),\n    pad(upperLimitMaxPriorityFeePerGas),\n    formatSignatures(signatures, usingMaxValues),\n  ]);\n};\n"]}