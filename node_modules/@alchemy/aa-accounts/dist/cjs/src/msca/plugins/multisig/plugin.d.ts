import { encodeAbiParameters, type Address, type Transport, type Client, type EncodeFunctionDataParameters, type Chain, type Hex, type ReadContractReturnType } from 'viem';
import { type SmartContractAccount, type GetAccountParameter, type SendUserOperationResult, type GetEntryPointFromAccount, type UserOperationOverridesParameter, type UserOperationContext, type GetContextParameter } from '@alchemy/aa-core';
import { type Plugin } from '../types.js';
import { type FunctionReference } from '../../account-loupe/types.js';
type ExecutionActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    updateOwnership: (args: Pick<EncodeFunctionDataParameters<typeof MultisigPluginExecutionFunctionAbi, 'updateOwnership'>, 'args'> & UserOperationOverridesParameter<TEntryPointVersion> & GetAccountParameter<TAccount> & GetContextParameter<TContext>) => Promise<SendUserOperationResult<TEntryPointVersion>>;
};
type InstallArgs = [{
    type: 'address[]';
}, {
    type: 'uint256';
}];
export type InstallMultisigPluginParams = {
    args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
    pluginAddress?: Address;
    dependencyOverrides?: FunctionReference[];
};
type ManagementActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    installMultisigPlugin: (args: UserOperationOverridesParameter<TEntryPointVersion> & InstallMultisigPluginParams & GetAccountParameter<TAccount> & GetContextParameter<TContext>) => Promise<SendUserOperationResult<TEntryPointVersion>>;
};
type ReadAndEncodeActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = {
    encodeUpdateOwnership: (args: Pick<EncodeFunctionDataParameters<typeof MultisigPluginExecutionFunctionAbi, 'updateOwnership'>, 'args'>) => Hex;
    encodeEip712Domain: (args: Pick<EncodeFunctionDataParameters<typeof MultisigPluginExecutionFunctionAbi, 'eip712Domain'>, 'args'>) => Hex;
    readEip712Domain: (args: GetAccountParameter<TAccount>) => Promise<ReadContractReturnType<typeof MultisigPluginExecutionFunctionAbi, 'eip712Domain'>>;
    encodeIsValidSignature: (args: Pick<EncodeFunctionDataParameters<typeof MultisigPluginExecutionFunctionAbi, 'isValidSignature'>, 'args'>) => Hex;
    readIsValidSignature: (args: Pick<EncodeFunctionDataParameters<typeof MultisigPluginExecutionFunctionAbi, 'isValidSignature'>, 'args'> & GetAccountParameter<TAccount>) => Promise<ReadContractReturnType<typeof MultisigPluginExecutionFunctionAbi, 'isValidSignature'>>;
};
export type MultisigPluginActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined> = ExecutionActions<TAccount, TContext> & ManagementActions<TAccount, TContext> & ReadAndEncodeActions<TAccount>;
export declare const MultisigPlugin: Plugin<typeof MultisigPluginAbi>;
export declare const multisigPluginActions: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined>(client: Client<TTransport, TChain, TAccount>) => MultisigPluginActions<TAccount, TContext>;
export declare const MultisigPluginExecutionFunctionAbi: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ownersToAdd";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "ownersToRemove";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "newThreshold";
        readonly internalType: "uint128";
        readonly type: "uint128";
    }];
    readonly name: "updateOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "digest";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}];
export declare const MultisigPluginAbi: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "entryPoint";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ENTRYPOINT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "actualDigest";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "upperLimitGasDigest";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signatures";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "checkNSignatures";
    readonly outputs: readonly [{
        readonly name: "success";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "firstFailure";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "message";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "encodeMessageData";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "message";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "getMessageHash";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ownerToCheck";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isOwnerOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "digest";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onInstall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onUninstall";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ownershipInfoOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pluginManifest";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PluginManifest";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "interfaceIds";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "dependencyInterfaceIds";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "executionFunctions";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "permittedExecutionSelectors";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "permitAnyExternalAddress";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "canSpendNativeToken";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "permittedExternalCalls";
            readonly internalType: "struct ManifestExternalCallPermission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "externalAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "permitAnySelector";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "selectors";
                readonly internalType: "bytes4[]";
                readonly type: "bytes4[]";
            }];
        }, {
            readonly name: "userOpValidationFunctions";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "runtimeValidationFunctions";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "preUserOpValidationHooks";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "preRuntimeValidationHooks";
            readonly internalType: "struct ManifestAssociatedFunction[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "associatedFunction";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "executionHooks";
            readonly internalType: "struct ManifestExecutionHook[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "preExecHook";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }, {
                readonly name: "postExecHook";
                readonly internalType: "struct ManifestFunction";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "functionType";
                    readonly internalType: "enum ManifestAssociatedFunctionType";
                    readonly type: "uint8";
                }, {
                    readonly name: "functionId";
                    readonly internalType: "uint8";
                    readonly type: "uint8";
                }, {
                    readonly name: "dependencyIndex";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }];
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pluginMetadata";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PluginMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "author";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "permissionDescriptors";
            readonly internalType: "struct SelectorPermission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "functionSelector";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "permissionDescription";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "preExecHookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "postExecutionHook";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "preExecutionHook";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "preRuntimeValidationHook";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "userOp";
        readonly internalType: "struct UserOperation";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initCode";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verificationGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "preVerificationGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPriorityFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "paymasterAndData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "userOpHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "preUserOpValidationHook";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "runtimeValidationFunction";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ownersToAdd";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "ownersToRemove";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "newThreshold";
        readonly internalType: "uint128";
        readonly type: "uint128";
    }];
    readonly name: "updateOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "userOp";
        readonly internalType: "struct UserOperation";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initCode";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "callGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verificationGasLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "preVerificationGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxPriorityFeePerGas";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "paymasterAndData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "userOpHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "userOpValidationFunction";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "addedOwners";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "removedOwners";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "threshold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyInitialized";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ECDSARecoverFailure";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EmptyOwnersNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMaxFeePerGas";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMaxPriorityFeePerGas";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidNumSigsOnActualGas";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "InvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPreVerificationGas";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSigLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSigOffset";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidThreshold";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotContractCaller";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "functionId";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "NotImplemented";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitialized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnerDoesNotExist";
}];
export {};
