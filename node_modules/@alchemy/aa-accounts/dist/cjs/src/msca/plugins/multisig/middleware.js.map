{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/multisig/middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  InvalidUserOperationError,\n  SmartAccountWithSignerRequiredError,\n  deepHexlify,\n  isSmartAccountWithSigner,\n  isValidRequest,\n  resolveProperties,\n  type ClientMiddlewareFn,\n  type UserOperationRequest_v6,\n  type UserOperationRequest_v7,\n} from \"@alchemy/aa-core\";\nimport { type Hex } from \"viem\";\nimport { isMultisigModularAccount } from \"../../account/multisigAccount.js\";\nimport {\n  InvalidContextSignatureError,\n  MultisigAccountExpectedError,\n} from \"../../errors.js\";\nimport {\n  combineSignatures,\n  getSignerType,\n  splitAggregatedSignature,\n  type MultisigUserOperationContext,\n} from \"./index.js\";\n\n/**\n * A signer middleware to be used with Multisig Account Clients.\n * This middleware handles correctly aggregating signatures passed through\n * as context when sending UserOperations, proposing UserOperations, or adding signatures to a UserOperation.\n *\n * @param struct the user operation struct to be signed\n * @param param the parameters to be passed to the middleware\n * @param param.account the account to be used for signing\n * @param param.client the smart account client that will be used for RPC requests\n * @param param.context the context object containing the signatures to be aggregated {@link MultisigUserOperationContext}\n * @returns a Promise containing a UserOperation with an aggregated signature in the `signature` field\n */\nexport const multisigSignatureMiddleware: ClientMiddlewareFn<\n  MultisigUserOperationContext\n> = async (struct, { account, client, context }) => {\n  // if the signature is not present, this has to be UPPERLIMIT because it's likely a propose operation\n  if (\n    !context ||\n    (context.userOpSignatureType === \"ACTUAL\" &&\n      !context.signatures &&\n      !context.aggregatedSignature)\n  ) {\n    throw new InvalidContextSignatureError();\n  }\n\n  if (!isSmartAccountWithSigner(account)) {\n    throw new SmartAccountWithSignerRequiredError();\n  }\n\n  if (!isMultisigModularAccount(account)) {\n    throw new MultisigAccountExpectedError();\n  }\n\n  const resolvedStruct = await resolveProperties(struct);\n\n  const request = deepHexlify(resolvedStruct);\n  if (!isValidRequest(request)) {\n    throw new InvalidUserOperationError(resolvedStruct);\n  }\n\n  const signature = await account.signUserOperationHash(\n    account.getEntryPoint().getUserOperationHash(request)\n  );\n\n  const signerType = await getSignerType({\n    client,\n    signature: signature,\n    signer: account.getSigner(),\n  });\n\n  // then this is a propose operation\n  if (\n    context.userOpSignatureType === \"UPPERLIMIT\" &&\n    context?.signatures?.length == null &&\n    context?.aggregatedSignature == null\n  ) {\n    return {\n      ...resolvedStruct,\n      signature: combineSignatures({\n        signatures: [\n          {\n            signature,\n            signer: await account.getSigner().getAddress(),\n            signerType,\n            userOpSigType: context.userOpSignatureType,\n          },\n        ],\n        upperLimitMaxFeePerGas: request.maxFeePerGas,\n        upperLimitMaxPriorityFeePerGas: request.maxPriorityFeePerGas,\n        upperLimitPvg: request.preVerificationGas,\n        usingMaxValues: false,\n      }),\n    };\n  }\n\n  if (context.aggregatedSignature == null || context.signatures == null) {\n    throw new InvalidContextSignatureError();\n  }\n\n  // otherwise this is a sign operation\n  const {\n    upperLimitPvg,\n    upperLimitMaxFeePerGas,\n    upperLimitMaxPriorityFeePerGas,\n  } = await splitAggregatedSignature({\n    aggregatedSignature: context.aggregatedSignature,\n    threshold: context.signatures.length + 1,\n    account,\n    request,\n  });\n\n  const finalSignature = combineSignatures({\n    signatures: context.signatures.concat({\n      userOpSigType: context.userOpSignatureType,\n      signerType,\n      signature,\n      signer: await account.getSigner().getAddress(),\n    }),\n    upperLimitPvg,\n    upperLimitMaxFeePerGas,\n    upperLimitMaxPriorityFeePerGas,\n    usingMaxValues: isUsingMaxValues(request, {\n      upperLimitPvg,\n      upperLimitMaxFeePerGas,\n      upperLimitMaxPriorityFeePerGas,\n    }),\n  });\n\n  return {\n    ...resolvedStruct,\n    signature: finalSignature,\n  };\n};\n\nconst isUsingMaxValues = (\n  request: UserOperationRequest_v6 | UserOperationRequest_v7,\n  upperLimits: {\n    upperLimitPvg: Hex;\n    upperLimitMaxFeePerGas: Hex;\n    upperLimitMaxPriorityFeePerGas: Hex;\n  }\n): boolean => {\n  if (\n    BigInt(request.preVerificationGas) !== BigInt(upperLimits.upperLimitPvg)\n  ) {\n    return false;\n  }\n\n  if (\n    BigInt(request.maxFeePerGas) !== BigInt(upperLimits.upperLimitMaxFeePerGas)\n  ) {\n    return false;\n  }\n\n  if (\n    BigInt(request.maxPriorityFeePerGas) !==\n    BigInt(upperLimits.upperLimitMaxPriorityFeePerGas)\n  ) {\n    return false;\n  }\n\n  return true;\n};\n"]}