{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../../../../src/msca/plugins/session-key/signer.ts"],"names":[],"mappings":";;;AAAA,8CAA+E;AAQ/E,4CAAmD;AACnD,6BAAwB;AAEX,QAAA,sBAAsB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC7C,WAAW,EAAE,OAAC;SACX,KAAK,CAAC,CAAC,OAAC,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,OAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACjE,EAAE,CAAC,OAAC,CAAC,MAAM,EAAW,CAAC;SACvB,OAAO,CAAC,eAAe,CAAC;IAC3B,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,gCAAgC,CAAC;CACjE,CAAC,CAAC;AAUU,QAAA,2BAA2B,GAAG,qBAAqB,CAAC;AACjE,MAAa,gBAAgB;IAQ3B,YAAY,UAAkC,EAAE;QALhD;;;;;WAAmB;QACnB;;;;;WAA6C;QACrC;;;;;WAA2D;QAC3D;;;;;WAAmB;QA6B3B;;;;mBAA2C,KAAK,IAAI,EAAE;gBACpD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;YACjC,CAAC;WAAC;QAEF;;;;mBAAgE,KAAK,EACnE,GAAG,EACH,EAAE;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACrC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAInB,MAAqD,EACrD,EAAE;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;WAAC;QAOF;;;;mBAAiB,GAAG,EAAE;gBACpB,MAAM,OAAO,GACX,IAAI,CAAC,WAAW,KAAK,iBAAiB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC;gBAEzE,MAAM,MAAM,GAAG,IAAA,6BAAkB,GAAE,CAAC;gBACpC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gBACzC,IAAI,CAAC,KAAK,GAAG,4BAAkB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;gBAElE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;YAClC,CAAC;WAAC;QA3DA,MAAM,MAAM,GAAG,8BAAsB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,CAAC,UAAU,GAAG,GAAG,mCAA2B,EAAE,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QAEtC,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE;YACvB,MAAM,OAAO,GACX,OAAO,IAAI,CAAC,WAAW,KAAK,QAAQ;gBAClC,CAAC,CAAC,IAAI,CAAC,WAAW;gBAClB,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,iBAAiB;oBACxC,CAAC,CAAC,cAAc;oBAChB,CAAC,CAAC,YAAY,CAAC;YACnB,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE7C,IAAI,GAAG,EAAE,CAAC;gBACR,OAAO,GAAG,CAAC;YACb,CAAC;iBAAM,CAAC;gBACN,MAAM,MAAM,GAAG,IAAA,6BAAkB,GAAE,CAAC;gBACpC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gBACzC,OAAO,MAAM,CAAC;YAChB,CAAC;QACH,CAAC,CAAC,EAAS,CAAC;QAEZ,IAAI,CAAC,KAAK,GAAG,4BAAkB,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;IACxE,CAAC;CAoCF;AArED,4CAqEC","sourcesContent":["import { LocalAccountSigner, type SmartAccountSigner } from \"@alchemy/aa-core\";\nimport type {\n  Hex,\n  PrivateKeyAccount,\n  SignableMessage,\n  TypedData,\n  TypedDataDefinition,\n} from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { z } from \"zod\";\n\nexport const SessionKeySignerSchema = z.object({\n  storageType: z\n    .union([z.literal(\"local-storage\"), z.literal(\"session-storage\")])\n    .or(z.custom<Storage>())\n    .default(\"local-storage\"),\n  storageKey: z.string().default(\"session-key-signer:session-key\"),\n});\n\nexport type SessionKeySignerConfig = z.input<typeof SessionKeySignerSchema>;\n\n/**\n * A simple session key signer that uses localStorage or sessionStorage to store\n * a private key. If the key is not found, it will generate a new one and store\n * it in the storage.\n */\n\nexport const SESSION_KEY_SIGNER_TYPE_PFX = \"alchemy:session-key\";\nexport class SessionKeySigner\n  implements SmartAccountSigner<LocalAccountSigner<PrivateKeyAccount>>\n{\n  signerType: string;\n  inner: LocalAccountSigner<PrivateKeyAccount>;\n  private storageType: \"local-storage\" | \"session-storage\" | Storage;\n  private storageKey: string;\n\n  constructor(config_: SessionKeySignerConfig = {}) {\n    const config = SessionKeySignerSchema.parse(config_);\n    this.signerType = `${SESSION_KEY_SIGNER_TYPE_PFX}`;\n    this.storageKey = config.storageKey;\n    this.storageType = config.storageType;\n\n    const sessionKey = (() => {\n      const storage =\n        typeof this.storageType !== \"string\"\n          ? this.storageType\n          : this.storageType === \"session-storage\"\n          ? sessionStorage\n          : localStorage;\n      const key = storage.getItem(this.storageKey);\n\n      if (key) {\n        return key;\n      } else {\n        const newKey = generatePrivateKey();\n        storage.setItem(this.storageKey, newKey);\n        return newKey;\n      }\n    })() as Hex;\n\n    this.inner = LocalAccountSigner.privateKeyToAccountSigner(sessionKey);\n  }\n\n  getAddress: () => Promise<`0x${string}`> = async () => {\n    return this.inner.getAddress();\n  };\n\n  signMessage: (msg: SignableMessage) => Promise<`0x${string}`> = async (\n    msg\n  ) => {\n    return this.inner.signMessage(msg);\n  };\n\n  signTypedData = async <\n    const TTypedData extends TypedData | { [key: string]: unknown },\n    TPrimaryType extends string = string\n  >(\n    params: TypedDataDefinition<TTypedData, TPrimaryType>\n  ) => {\n    return this.inner.signTypedData(params);\n  };\n\n  /**\n   * Generates a new private key and stores it in the storage.\n   *\n   * @returns The public address of the new key.\n   */\n  generateNewKey = () => {\n    const storage =\n      this.storageType === \"session-storage\" ? sessionStorage : localStorage;\n\n    const newKey = generatePrivateKey();\n    storage.setItem(this.storageKey, newKey);\n    this.inner = LocalAccountSigner.privateKeyToAccountSigner(newKey);\n\n    return this.inner.inner.address;\n  };\n}\n"]}