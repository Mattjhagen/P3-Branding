{"version":3,"file":"updateOwners.js","sourceRoot":"","sources":["../../../../../src/light-account/actions/updateOwners.ts"],"names":[],"mappings":";;;AAAA,8CAQ0B;AAiBnB,MAAM,YAAY,GAUL,KAAK,EACvB,MAAM,EACN,EACE,WAAW,EACX,cAAc,EACd,UAAU,EACV,SAAS,EACT,OAAO,GAAG,MAAM,CAAC,OAAO,GACzB,EACD,EAAE;IACF,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,8BAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAA,8BAAoB,EAAC,MAAM,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,iCAAuB,CAC/B,oBAAoB,EACpB,cAAc,EACd,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,IAAI,GAAG,OAAO,CAAC,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAErE,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC;QAC5C,EAAE,EAAE;YACF,MAAM,EAAE,OAAO,CAAC,OAAO;YACvB,IAAI;SACL;QACD,OAAO;QACP,SAAS;KACV,CAAC,CAAC;IAEH,IAAI,UAAU,EAAE,CAAC;QACf,OAAO,MAAM,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC,CAAC;AAhDW,QAAA,YAAY,gBAgDvB","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  isSmartAccountClient,\n  type GetAccountParameter,\n  type GetEntryPointFromAccount,\n  type SmartAccountSigner,\n  type UserOperationOverridesParameter,\n} from \"@alchemy/aa-core\";\nimport type { Address, Chain, Client, Hex, Transport } from \"viem\";\nimport type { MultiOwnerLightAccount } from \"../accounts/multiOwner\";\n\nexport type UpdateMultiOwnerLightAccountOwnersParams<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends MultiOwnerLightAccount<TSigner> | undefined =\n    | MultiOwnerLightAccount<TSigner>\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n> = {\n  ownersToAdd: Address[];\n  ownersToRemove: Address[];\n  waitForTxn?: boolean;\n} & GetAccountParameter<TAccount, MultiOwnerLightAccount<TSigner>> &\n  UserOperationOverridesParameter<TEntryPointVersion>;\n\nexport const updateOwners: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends MultiOwnerLightAccount<TSigner> | undefined =\n    | MultiOwnerLightAccount<TSigner>\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: UpdateMultiOwnerLightAccountOwnersParams<TSigner, TAccount>\n) => Promise<Hex> = async (\n  client,\n  {\n    ownersToAdd,\n    ownersToRemove,\n    waitForTxn,\n    overrides,\n    account = client.account,\n  }\n) => {\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"SmartAccountClient\",\n      \"updateOwners\",\n      client\n    );\n  }\n\n  const data = account.encodeUpdateOwners(ownersToAdd, ownersToRemove);\n\n  const result = await client.sendUserOperation({\n    uo: {\n      target: account.address,\n      data,\n    },\n    account,\n    overrides,\n  });\n\n  if (waitForTxn) {\n    return client.waitForUserOperationTransaction(result);\n  }\n\n  return result.hash;\n};\n"]}