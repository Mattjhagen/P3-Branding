"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLightAccount = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const viem_1 = require("viem");
const LightAccountAbi_v1_js_1 = require("../abis/LightAccountAbi_v1.js");
const LightAccountAbi_v2_js_1 = require("../abis/LightAccountAbi_v2.js");
const LightAccountFactoryAbi_v1_js_1 = require("../abis/LightAccountFactoryAbi_v1.js");
const LightAccountFactoryAbi_v2_js_1 = require("../abis/LightAccountFactoryAbi_v2.js");
const utils_js_1 = require("../utils.js");
const base_js_1 = require("./base.js");
async function createLightAccount({ transport, chain, signer, initCode, version = (0, utils_js_1.defaultLightAccountVersion)("LightAccount"), entryPoint = (0, aa_core_1.getEntryPoint)(chain, {
    version: utils_js_1.AccountVersionRegistry["LightAccount"][version]
        .entryPointVersion,
}), accountAddress, factoryAddress = utils_js_1.AccountVersionRegistry["LightAccount"][version].address[chain.id].factory, salt: salt_ = 0n, }) {
    const client = (0, aa_core_1.createBundlerClient)({
        transport,
        chain,
    });
    const accountAbi = version === "v2.0.0" ? LightAccountAbi_v2_js_1.LightAccountAbi_v2 : LightAccountAbi_v1_js_1.LightAccountAbi_v1;
    const factoryAbi = version === "v2.0.0"
        ? LightAccountFactoryAbi_v1_js_1.LightAccountFactoryAbi_v1
        : LightAccountFactoryAbi_v2_js_1.LightAccountFactoryAbi_v2;
    const getAccountInitCode = async () => {
        if (initCode)
            return initCode;
        const salt = utils_js_1.LightAccountUnsupported1271Factories.has(factoryAddress.toLowerCase())
            ? 0n
            : salt_;
        return (0, viem_1.concatHex)([
            factoryAddress,
            (0, viem_1.encodeFunctionData)({
                abi: factoryAbi,
                functionName: "createAccount",
                args: [await signer.getAddress(), salt],
            }),
        ]);
    };
    const address = await (0, aa_core_1.getAccountAddress)({
        client,
        entryPoint,
        accountAddress,
        getAccountInitCode,
    });
    const account = await (0, base_js_1.createLightAccountBase)({
        transport,
        chain,
        signer,
        abi: accountAbi,
        version: utils_js_1.AccountVersionRegistry["LightAccount"][version],
        entryPoint,
        accountAddress: address,
        getAccountInitCode,
    });
    return {
        ...account,
        encodeTransferOwnership: (newOwner) => {
            return (0, viem_1.encodeFunctionData)({
                abi: accountAbi,
                functionName: "transferOwnership",
                args: [newOwner],
            });
        },
        async getOwnerAddress() {
            const callResult = await client.readContract({
                address,
                abi: accountAbi,
                functionName: "owner",
            });
            if (callResult == null) {
                throw new Error("could not get on-chain owner");
            }
            return callResult;
        },
    };
}
exports.createLightAccount = createLightAccount;
//# sourceMappingURL=account.js.map