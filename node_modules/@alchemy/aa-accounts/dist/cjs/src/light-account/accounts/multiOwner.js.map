{"version":3,"file":"multiOwner.js","sourceRoot":"","sources":["../../../../../src/light-account/accounts/multiOwner.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createBundlerClient,\n  getAccountAddress,\n  getEntryPoint,\n  type EntryPointDef,\n  type SmartAccountSigner,\n} from \"@alchemy/aa-core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  hexToBigInt,\n  type Address,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { MultiOwnerLightAccountAbi } from \"../abis/MultiOwnerLightAccountAbi.js\";\nimport { MultiOwnerLightAccountFactoryAbi } from \"../abis/MultiOwnerLightAccountFactoryAbi.js\";\nimport type {\n  GetEntryPointForLightAccountVersion,\n  GetLightAccountVersion,\n} from \"../types.js\";\nimport {\n  AccountVersionRegistry,\n  defaultLightAccountVersion,\n} from \"../utils.js\";\nimport {\n  createLightAccountBase,\n  type CreateLightAccountBaseParams,\n  type LightAccountBase,\n} from \"./base.js\";\n\nexport type MultiOwnerLightAccount<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"MultiOwnerLightAccount\"> = GetLightAccountVersion<\"MultiOwnerLightAccount\">,\n  TEntryPointVersion extends GetEntryPointForLightAccountVersion<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion\n  > = GetEntryPointForLightAccountVersion<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion\n  >\n> = LightAccountBase<\n  TSigner,\n  \"MultiOwnerLightAccount\",\n  TLightAccountVersion,\n  TEntryPointVersion\n> & {\n  encodeUpdateOwners: (\n    ownersToAdd: Address[],\n    ownersToRemove: Address[]\n  ) => Hex;\n  getOwnerAddresses: () => Promise<readonly Address[]>;\n};\n\nexport type CreateMultiOwnerLightAccountParams<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"MultiOwnerLightAccount\"> = GetLightAccountVersion<\"MultiOwnerLightAccount\">,\n  TEntryPointVersion extends GetEntryPointForLightAccountVersion<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion\n  > = GetEntryPointForLightAccountVersion<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion\n  >\n> = Omit<\n  CreateLightAccountBaseParams<\n    TTransport,\n    TSigner,\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion,\n    TEntryPointVersion\n  >,\n  \"getAccountInitCode\" | \"entryPoint\" | \"version\" | \"abi\" | \"accountAddress\"\n> & {\n  salt?: bigint;\n  initCode?: Hex;\n  accountAddress?: Address;\n  factoryAddress?: Address;\n  version?: TLightAccountVersion;\n  entryPoint?: EntryPointDef<TEntryPointVersion, Chain>;\n  owners?: Address[];\n};\n\nexport async function createMultiOwnerLightAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"MultiOwnerLightAccount\"> = GetLightAccountVersion<\"MultiOwnerLightAccount\">,\n  TEntryPointVersion extends GetEntryPointForLightAccountVersion<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion\n  > = GetEntryPointForLightAccountVersion<\n    \"MultiOwnerLightAccount\",\n    TLightAccountVersion\n  >\n>(\n  config: CreateMultiOwnerLightAccountParams<\n    TTransport,\n    TSigner,\n    TLightAccountVersion,\n    TEntryPointVersion\n  >\n): Promise<\n  MultiOwnerLightAccount<TSigner, TLightAccountVersion, TEntryPointVersion>\n>;\n\nexport async function createMultiOwnerLightAccount({\n  transport,\n  chain,\n  signer,\n  initCode,\n  version = defaultLightAccountVersion(\"MultiOwnerLightAccount\"),\n  entryPoint = getEntryPoint(chain, {\n    version:\n      AccountVersionRegistry[\"MultiOwnerLightAccount\"][version]\n        .entryPointVersion,\n  }),\n  accountAddress,\n  factoryAddress = AccountVersionRegistry[\"MultiOwnerLightAccount\"][version]\n    .address[chain.id].factory,\n  salt: salt_ = 0n,\n  owners = [],\n}: CreateMultiOwnerLightAccountParams): Promise<MultiOwnerLightAccount> {\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const getAccountInitCode = async () => {\n    if (initCode) return initCode;\n\n    // NOTE: the current signer connected will be one of the owners as well\n    const ownerAddress = await signer.getAddress();\n    // owners need to be dedupe + ordered in ascending order and not == to zero address\n    const owners_ = Array.from(new Set([...owners, ownerAddress]))\n      .filter((x) => hexToBigInt(x) !== 0n)\n      .sort((a, b) => {\n        const bigintA = hexToBigInt(a);\n        const bigintB = hexToBigInt(b);\n\n        return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;\n      });\n\n    return concatHex([\n      factoryAddress,\n      encodeFunctionData({\n        abi: MultiOwnerLightAccountFactoryAbi,\n        functionName: \"createAccount\",\n        args: [owners_, salt_],\n      }),\n    ]);\n  };\n\n  const address = await getAccountAddress({\n    client,\n    entryPoint,\n    accountAddress,\n    getAccountInitCode,\n  });\n\n  const account = await createLightAccountBase<\n    Transport,\n    SmartAccountSigner,\n    \"MultiOwnerLightAccount\"\n  >({\n    transport,\n    chain,\n    signer,\n    abi: MultiOwnerLightAccountAbi,\n    version: AccountVersionRegistry[\"MultiOwnerLightAccount\"][version],\n    entryPoint,\n    accountAddress: address,\n    getAccountInitCode,\n  });\n\n  return {\n    ...account,\n    encodeUpdateOwners: (ownersToAdd: Address[], ownersToRemove: Address[]) => {\n      return encodeFunctionData({\n        abi: MultiOwnerLightAccountAbi,\n        functionName: \"updateOwners\",\n        args: [ownersToAdd, ownersToRemove],\n      });\n    },\n    async getOwnerAddresses(): Promise<readonly Address[]> {\n      const callResult = await client.readContract({\n        address,\n        abi: MultiOwnerLightAccountAbi,\n        functionName: \"owners\",\n      });\n\n      if (callResult == null) {\n        throw new Error(\"could not get on-chain owners\");\n      }\n\n      if (!callResult.includes(await signer.getAddress())) {\n        throw new Error(\"on-chain owners does not include the current signer\");\n      }\n\n      return callResult;\n    },\n  };\n}\n"]}