"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetContractGenPhase = void 0;
const dedent_1 = __importDefault(require("dedent"));
const GetContractGenPhase = async (input) => {
    const { content, contract, addImport } = input;
    addImport("viem", { name: "getContract", isType: false });
    addImport("viem", { name: "GetContractReturnType", isType: true });
    addImport("viem", { name: "Address", isType: true });
    addImport("viem", { name: "Transport", isType: true });
    addImport("viem", { name: "PublicClient", isType: true });
    addImport("viem", { name: "Client", isType: true });
    addImport("@alchemy/aa-core", { name: "ChainNotFoundError" });
    content.push((0, dedent_1.default) `
  getContract: <C extends Client>(
    client: C,
    address?: Address
  ): GetContractReturnType<typeof ${contract.name}Abi, PublicClient, Address> => {
      if (!client.chain) throw new ChainNotFoundError();

      return getContract({
        address: address || addresses[client.chain.id],
        abi: ${contract.name}Abi,
        client: client,
      });
  }`);
    return input;
};
exports.GetContractGenPhase = GetContractGenPhase;
//# sourceMappingURL=get-contract-gen.js.map