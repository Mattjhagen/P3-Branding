{"version":3,"file":"read-actions.js","sourceRoot":"","sources":["../../../../../plugingen/phases/plugin-actions/read-actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { pascalCase } from \"change-case\";\nimport dedent from \"dedent\";\nimport type { Phase } from \"../../types\";\nimport { extractExecutionAbi } from \"../../utils.js\";\n\nexport const AccountReadActionsGenPhase: Phase = async (input) => {\n  const { plugin, contract, addImport, addType } = input;\n  const { executionFunctions } = await plugin.read.pluginManifest();\n  const executionAbiConst = `${contract.name}ExecutionFunctionAbi`;\n  const executionAbi = extractExecutionAbi(executionFunctions, contract.abi);\n\n  addImport(\"viem\", { name: \"EncodeFunctionDataParameters\", isType: true });\n  addImport(\"viem\", { name: \"encodeFunctionData\" });\n  addImport(\"viem\", { name: \"Hex\", isType: true });\n\n  const accountFunctionActionDefs: string[] = [];\n\n  const accountFunctions = executionAbi.map((n) => {\n    const methodContent = [];\n    const argsParamString = n.inputs.length > 0 ? `{ args }` : \"\";\n    const argsEncodeString = n.inputs.length > 0 ? \"args,\" : \"\";\n    const isViewFunction = n.stateMutability === \"view\";\n\n    const encodeMethodName = `encode${pascalCase(n.name)}`;\n    accountFunctionActionDefs.push(\n      dedent`${encodeMethodName}: (args: Pick<EncodeFunctionDataParameters<typeof ${executionAbiConst}, \"${n.name}\">, \"args\">) => Hex`\n    );\n    methodContent.push(dedent`\n      ${encodeMethodName}(${argsParamString}) {\n          return encodeFunctionData({\n              abi: ${executionAbiConst},\n              functionName: \"${n.name}\",\n              ${argsEncodeString}\n          });\n      }\n    `);\n\n    const readArgsParamString =\n      n.inputs.length > 0\n        ? `{ args, account = client.account }`\n        : \"{ account = client.account }\";\n    if (isViewFunction) {\n      addImport(\"viem\", { name: \"ReadContractReturnType\", isType: true });\n      input.hasReadMethods = true;\n      const readMethodName = `read${pascalCase(n.name)}`;\n      accountFunctionActionDefs.push(\n        n.inputs.length > 0\n          ? dedent`${readMethodName}: (args: Pick<EncodeFunctionDataParameters<typeof ${executionAbiConst}, \"${n.name}\">, \"args\"> & GetAccountParameter<TAccount>) => Promise<ReadContractReturnType<typeof ${executionAbiConst}, \"${n.name}\">>`\n          : dedent`${readMethodName}: (args: GetAccountParameter<TAccount>) => Promise<ReadContractReturnType<typeof ${executionAbiConst}, \"${n.name}\">>`\n      );\n\n      methodContent.push(dedent`\n        async ${readMethodName} (${readArgsParamString}) {\n          if (!account) {\n            throw new AccountNotFoundError();\n          }\n\n          if (!isSmartAccountClient(client)) {\n            throw new IncompatibleClientError(\"SmartAccountClient\", \"${readMethodName}\", client);\n          }\n\n          return client.readContract({\n            address: account.address,\n            abi: ${executionAbiConst},\n            functionName: \"${n.name}\",\n            ${argsEncodeString}\n          });\n        }\n      `);\n    }\n\n    return methodContent.join(\",\\n\\n\");\n  });\n\n  const typeName = input.hasReadMethods\n    ? `ReadAndEncodeActions<\n        TAccount extends SmartContractAccount | undefined =\n          SmartContractAccount | undefined,\n      >`\n    : \"ReadAndEncodeActions\";\n\n  addType(\n    typeName,\n    dedent`{\n    ${accountFunctionActionDefs.join(\";\\n\\n\")}\n  }`\n  );\n  input.content.push(...accountFunctions);\n\n  return input;\n};\n"]}