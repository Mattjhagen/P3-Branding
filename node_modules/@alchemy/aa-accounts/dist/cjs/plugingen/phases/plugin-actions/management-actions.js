"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagementActionsGenPhase = void 0;
const change_case_1 = require("change-case");
const dedent_1 = __importDefault(require("dedent"));
const ManagementActionsGenPhase = async (input) => {
    const { addImport, config, contract, addType } = input;
    if (config.installConfig != null) {
        addImports(addImport, config.installConfig.dependencies?.map((x) => x.plugin) ?? []);
        const initArgs = config.installConfig.initAbiParams ?? [];
        addType("InstallArgs", JSON.stringify(initArgs));
        addType(`Install${contract.name}Params`, (0, dedent_1.default) `{
        args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
        pluginAddress?: Address;
        dependencyOverrides?: FunctionReference[];
    }`, true);
        addType(`ManagementActions<
        TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined,
        TContext extends UserOperationContext | undefined = UserOperationContext | undefined,
        TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>
      >`, (0, dedent_1.default) `{
        install${contract.name}: (args: UserOperationOverridesParameter<TEntryPointVersion> &
          Install${contract.name}Params & GetAccountParameter<TAccount> & GetContextParameter<TContext>) =>
            Promise<SendUserOperationResult<TEntryPointVersion>>
      }`);
        const dependencies = (config.installConfig.dependencies ?? []).map((x) => (0, dedent_1.default) `
        (() => {
          const pluginAddress = ${x.plugin.name}.meta.addresses[chain.id];
          if (!pluginAddress) {
            throw new Error("missing ${x.plugin.name} address for chain " + chain.name);
          }

          return encodePacked(
            ["address", "uint8"],
            [pluginAddress, ${x.functionId}]
          );
        })()
      `);
        const installMethodName = `install${contract.name}`;
        input.content.push((0, dedent_1.default) `
    ${installMethodName}({account = client.account, overrides, context, ...params}) {
      if (!account) {
        throw new AccountNotFoundError();
      }

      if (!isSmartAccountClient(client)) {
        throw new IncompatibleClientError("SmartAccountClient", "${installMethodName}", client);
      }

      const chain = client.chain;
      if (!chain) {
        throw new ChainNotFoundError();
      }

      const dependencies = params.dependencyOverrides ?? [${dependencies.join(",\n\n")}];
      const pluginAddress = params.pluginAddress ?? ${contract.name}.meta.addresses[chain.id] as Address | undefined;

      if (!pluginAddress) {
        throw new Error("missing ${contract.name} address for chain " + chain.name);
      }

      return installPlugin_(client, {
        pluginAddress,
        pluginInitData: encodeAbiParameters(${JSON.stringify(initArgs)}, params.args),
        dependencies,
        overrides,
        account,
        context,
      });
    }
  `);
    }
    return input;
};
exports.ManagementActionsGenPhase = ManagementActionsGenPhase;
const addImports = (addImport, deps) => {
    if (deps != null && deps.length > 0) {
        addImport("viem", { name: "encodePacked" });
        deps.forEach((x) => {
            addImport(`../${(0, change_case_1.kebabCase)(x.name.replaceAll(/[pP]lugin/g, ""))}/plugin.js`, {
                name: x.name,
            });
        });
    }
    addImport("@alchemy/aa-core", { name: "ChainNotFoundError" });
    addImport("viem", { name: "encodeAbiParameters" });
    addImport("../../plugin-manager/installPlugin.js", {
        name: "installPlugin as installPlugin_",
    });
    addImport("@alchemy/aa-core", {
        name: "GetAccountParameter",
        isType: true,
    });
    addImport("@alchemy/aa-core", {
        name: "GetEntryPointFromAccount",
        isType: true,
    });
    addImport("@alchemy/aa-core", {
        name: "UserOperationContext",
        isType: true,
    });
    addImport("../../account-loupe/types.js", {
        name: "FunctionReference",
        isType: true,
    });
    addImport("@alchemy/aa-core", { name: "GetContextParameter", isType: true });
};
//# sourceMappingURL=management-actions.js.map