{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../plugingen/phases/plugin-actions/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { asyncPipe } from \"@alchemy/aa-core\";\nimport { camelCase } from \"change-case\";\nimport dedent from \"dedent\";\nimport type { Phase } from \"../../types\";\nimport { extractExecutionAbi } from \"../../utils.js\";\nimport { ManagementActionsGenPhase } from \"./management-actions.js\";\nimport { AccountReadActionsGenPhase } from \"./read-actions.js\";\n\nexport const PluginActionsGenPhase: Phase = async (input) => {\n  const { plugin, contract, addImport, addType } = input;\n  const { executionFunctions } = await plugin.read.pluginManifest();\n  const executionAbiConst = `${contract.name}ExecutionFunctionAbi`;\n  const executionAbi = extractExecutionAbi(executionFunctions, contract.abi);\n\n  addImport(\"viem\", { name: \"EncodeFunctionDataParameters\", isType: true });\n  addImport(\"viem\", { name: \"Transport\", isType: true });\n  addImport(\"viem\", { name: \"Chain\", isType: true });\n  addImport(\"viem\", { name: \"Client\", isType: true });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"SmartContractAccount\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"GetAccountParameter\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"SendUserOperationResult\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"GetEntryPointFromAccount\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"UserOperationOverridesParameter\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", {\n    name: \"UserOperationContext\",\n    isType: true,\n  });\n  addImport(\"@alchemy/aa-core\", { name: \"AccountNotFoundError\" });\n  addImport(\"@alchemy/aa-core\", { name: \"isSmartAccountClient\" });\n  addImport(\"@alchemy/aa-core\", { name: \"IncompatibleClientError\" });\n  addImport(\"@alchemy/aa-core\", { name: \"GetContextParameter\", isType: true });\n\n  const providerFunctionDefs: string[] = [];\n  const providerFunctions = executionAbi\n    .filter((n) => n.stateMutability !== \"view\")\n    .map((n) => {\n      const argsParamString =\n        n.inputs.length > 0\n          ? dedent`{\n                  args,\n                  overrides,\n                  context,\n                  account = client.account\n              }`\n          : dedent`{\n                  overrides,\n                  context,\n                  account = client.account\n              }`;\n      const argsEncodeString = n.inputs.length > 0 ? \"args,\" : \"\";\n\n      providerFunctionDefs.push(dedent`\n          ${camelCase(\n            n.name\n          )}: (args: Pick<EncodeFunctionDataParameters<typeof ${executionAbiConst}, \"${\n        n.name\n      }\">, \"args\"> & UserOperationOverridesParameter<TEntryPointVersion> &\n        GetAccountParameter<TAccount> & GetContextParameter<TContext>) =>\n          Promise<SendUserOperationResult<TEntryPointVersion>>\n      `);\n      const methodName = camelCase(n.name);\n      return dedent`\n              ${methodName}(${argsParamString}) {\n                if (!account) {\n                  throw new AccountNotFoundError();\n                }\n                if (!isSmartAccountClient(client)) {\n                  throw new IncompatibleClientError(\"SmartAccountClient\", \"${methodName}\", client);\n                }\n\n                const uo = encodeFunctionData({\n                  abi: ${executionAbiConst},\n                  functionName: \"${n.name}\",\n                  ${argsEncodeString}\n                });\n\n                return client.sendUserOperation({ uo, overrides, account, context });\n              }\n            `;\n    });\n\n  addType(\n    `ExecutionActions<\n      TAccount extends SmartContractAccount | undefined =\n        SmartContractAccount | undefined,\n      TContext extends UserOperationContext | undefined = UserOperationContext | undefined,\n      TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n    >`,\n    dedent`{\n        ${providerFunctionDefs.join(\";\\n\\n\")}\n      }`\n  );\n\n  const { hasReadMethods } = await asyncPipe(\n    ManagementActionsGenPhase,\n    AccountReadActionsGenPhase\n  )({\n    ...input,\n    content: providerFunctions,\n  });\n\n  addType(\n    `${contract.name}Actions<\n      TAccount extends SmartContractAccount | undefined =\n          | SmartContractAccount\n          | undefined,\n      TContext extends UserOperationContext | undefined =\n          | UserOperationContext\n          | undefined\n    >`,\n    dedent`\n      ExecutionActions<TAccount, TContext> & ManagementActions<TAccount, TContext> & ReadAndEncodeActions${\n        hasReadMethods ? \"<TAccount>\" : \"\"\n      }\n  `,\n    true\n  );\n\n  input.content.push(dedent`\n    export const ${camelCase(contract.name)}Actions: <\n        TTransport extends Transport = Transport,\n        TChain extends Chain | undefined = Chain | undefined,\n        TAccount extends SmartContractAccount | undefined =\n            | SmartContractAccount\n            | undefined,\n        TContext extends UserOperationContext | undefined = UserOperationContext | undefined\n    >(\n        client: Client<TTransport, TChain, TAccount>\n    ) => ${\n      contract.name\n    }Actions<TAccount, TContext> = (client) => ({ ${providerFunctions.join(\n    \",\\n\"\n  )} });\n  `);\n\n  return input;\n};\n"]}