{"version":3,"file":"transferNaniAccountOwnership.js","sourceRoot":"","sources":["../../../../src/nani-account/transferNaniAccountOwnership.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,oBAAoB,EACpB,uBAAuB,EACvB,oBAAoB,GAGrB,MAAM,kBAAkB,CAAC;AAY1B,MAAM,CAAC,MAAM,iBAAiB,GAWV,KAAK,EAAE,MAAM,EAAE,IAAI,EAAgB,EAAE;IACvD,MAAM,EACJ,QAAQ,EACR,UAAU,GAAG,KAAK,EAClB,OAAO,EAAE,QAAQ,GAAG,MAAM,CAAC,OAAO,GACnC,GAAG,IAAI,CAAC;IACT,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,uBAAuB,CAC/B,oBAAoB,EACpB,mBAAmB,EACnB,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,OAAO,GAAG,QAAuB,CAAC;IAExC,MAAM,IAAI,GAAG,OAAO,CAAC,uBAAuB,CAAC,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;IAC1E,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC;QAC5C,EAAE,EAAE;YACF,MAAM,EAAE,OAAO,CAAC,OAAO;YACvB,IAAI;SACL;QACD,OAAO;KACR,CAAC,CAAC;IAEH,IAAI,UAAU,EAAE,CAAC;QACf,OAAO,MAAM,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  isSmartAccountClient,\n  type GetAccountParameter,\n  type SmartAccountSigner,\n} from \"@alchemy/aa-core\";\nimport type { Chain, Client, Hex, Transport } from \"viem\";\nimport type { NaniAccount } from \"./account\";\n\n/**\n * Transfers ownership of the account to the newOwner on-chain and also updates the owner of the account.\n * Optionally waits for the transaction to be mined.\n *\n * @param client - the client to use to send the transaction\n * @param args - the arguments for the transfer\n * @returns the userOperation hash, or transaction hash if `waitForTxn` is true\n */\nexport const transferOwnership: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends NaniAccount | undefined = NaniAccount | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>,\n  args: {\n    newOwner: TSigner;\n    waitForTxn?: boolean;\n  } & GetAccountParameter<TAccount>\n) => Promise<Hex> = async (client, args): Promise<Hex> => {\n  const {\n    newOwner,\n    waitForTxn = false,\n    account: account_ = client.account,\n  } = args;\n  if (!account_) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isSmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"SmartAccountClient\",\n      \"transferOwnership\",\n      client\n    );\n  }\n\n  const account = account_ as NaniAccount;\n\n  const data = account.encodeTransferOwnership(await newOwner.getAddress());\n  const result = await client.sendUserOperation({\n    uo: {\n      target: account.address,\n      data,\n    },\n    account,\n  });\n\n  if (waitForTxn) {\n    return client.waitForUserOperationTransaction(result);\n  }\n\n  return result.hash;\n};\n"]}