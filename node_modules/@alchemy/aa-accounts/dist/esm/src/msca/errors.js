import { BaseError } from "@alchemy/aa-core";
export class InvalidAggregatedSignatureError extends BaseError {
    constructor() {
        super("Invalid aggregated signature");
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidAggregatedSignatureError"
        });
    }
}
export class InvalidContextSignatureError extends BaseError {
    constructor() {
        super("Expected context.signature to be a hex string");
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidContextSignatureError"
        });
    }
}
export class MultisigAccountExpectedError extends BaseError {
    constructor() {
        super("Expected account to be a multisig modular account");
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "MultisigAccountExpectedError"
        });
    }
}
export class MultisigMissingSignatureError extends BaseError {
    constructor() {
        super("UserOp must have at least one signature already");
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "MultisigMissingSignatureError"
        });
    }
}
//# sourceMappingURL=errors.js.map