import { type GetAccountParameter, type SmartAccountClient, type SmartAccountSigner, type SmartContractAccount, type SmartContractAccountWithSigner, type UpgradeToData } from "@alchemy/aa-core";
import type { Address, Chain, Transport } from "viem";
import { type MultiOwnerModularAccount } from "./account/multiOwnerAccount.js";
export declare const getDefaultMultisigModularAccountFactoryAddress: (chain: Chain) => Address;
export declare const getDefaultMultiOwnerModularAccountFactoryAddress: (chain: Chain) => Address;
export declare function getMSCAUpgradeToData<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSigner extends SmartAccountSigner = SmartAccountSigner, TAccount extends SmartContractAccountWithSigner<string, TSigner> | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined>(client: SmartAccountClient<TTransport, TChain, TAccount>, args: {
    multiOwnerPluginAddress?: Address;
} & GetAccountParameter<TAccount>): Promise<UpgradeToData & {
    createMAAccount: () => Promise<MultiOwnerModularAccount<TSigner>>;
}>;
export declare function getMAInitializationData<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>({ client, multiOwnerPluginAddress, signerAddress, }: {
    multiOwnerPluginAddress?: Address;
    client: SmartAccountClient<TTransport, TChain, TAccount>;
    signerAddress: Address | Address[];
}): Promise<UpgradeToData>;
