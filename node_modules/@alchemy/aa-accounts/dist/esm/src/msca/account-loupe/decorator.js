import { AccountNotFoundError, IncompatibleClientError, isSmartAccountClient, } from "@alchemy/aa-core";
import { IAccountLoupeAbi } from "../abis/IAccountLoupe.js";
export const accountLoupeActions = (client) => ({
    getExecutionFunctionConfig: async ({ selector, account = client.account, }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getExecutionFunctionConfig", client);
        }
        return client.readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getExecutionFunctionConfig",
            args: [selector],
        });
    },
    getExecutionHooks: async ({ selector, account = client.account }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getExecutionHooks", client);
        }
        return client.readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getExecutionHooks",
            args: [selector],
        });
    },
    getPreValidationHooks: async ({ selector, account = client.account }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getPreValidationHooks", client);
        }
        return client.readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getPreValidationHooks",
            args: [selector],
        });
    },
    getInstalledPlugins: async ({ account = client.account }) => {
        if (!account) {
            throw new AccountNotFoundError();
        }
        if (!isSmartAccountClient(client)) {
            throw new IncompatibleClientError("SmartAccountClient", "getInstalledPlugins", client);
        }
        return client
            .readContract({
            address: account.address,
            abi: IAccountLoupeAbi,
            functionName: "getInstalledPlugins",
        })
            .catch(() => []);
    },
});
//# sourceMappingURL=decorator.js.map