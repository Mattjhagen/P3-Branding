import { AccountNotFoundError, IncompatibleClientError, isSmartAccountClient, } from "@alchemy/aa-core";
import { encodeFunctionData, encodeFunctionResult, keccak256, } from "viem";
import { IPluginAbi } from "../abis/IPlugin.js";
import { IPluginManagerAbi } from "../abis/IPluginManager.js";
export async function installPlugin(client, { overrides, context, account = client.account, ...params }) {
    if (!account) {
        throw new AccountNotFoundError();
    }
    if (!isSmartAccountClient(client)) {
        throw new IncompatibleClientError("SmartAccountClient", "installPlugin", client);
    }
    const callData = await encodeInstallPluginUserOperation(client, params);
    return client.sendUserOperation({
        uo: callData,
        overrides,
        account,
        context,
    });
}
export async function encodeInstallPluginUserOperation(client, params) {
    const pluginManifest = await client.readContract({
        abi: IPluginAbi,
        address: params.pluginAddress,
        functionName: "pluginManifest",
    });
    const manifestHash = params.manifestHash ??
        keccak256(encodeFunctionResult({
            abi: IPluginAbi,
            functionName: "pluginManifest",
            result: pluginManifest,
        }));
    return encodeFunctionData({
        abi: IPluginManagerAbi,
        functionName: "installPlugin",
        args: [
            params.pluginAddress,
            manifestHash,
            params.pluginInitData ?? "0x",
            params.dependencies ?? [],
        ],
    });
}
//# sourceMappingURL=installPlugin.js.map