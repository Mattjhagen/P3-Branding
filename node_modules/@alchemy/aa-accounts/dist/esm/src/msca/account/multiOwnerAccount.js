import { createBundlerClient, getAccountAddress, getEntryPoint, toSmartContractAccount, } from "@alchemy/aa-core";
import { concatHex, encodeFunctionData, hexToBigInt, } from "viem";
import { MultiOwnerModularAccountFactoryAbi } from "../abis/MultiOwnerModularAccountFactory.js";
import { multiOwnerMessageSigner } from "../plugins/multi-owner/signer.js";
import { getDefaultMultiOwnerModularAccountFactoryAddress } from "../utils.js";
import { standardExecutor } from "./standardExecutor.js";
export async function createMultiOwnerModularAccount({ transport, chain, signer, accountAddress, initCode, entryPoint = getEntryPoint(chain, { version: "0.6.0" }), factoryAddress = getDefaultMultiOwnerModularAccountFactoryAddress(chain), owners = [], salt = 0n, }) {
    const client = createBundlerClient({
        transport,
        chain,
    });
    const getAccountInitCode = async () => {
        if (initCode) {
            return initCode;
        }
        const ownerAddress = await signer.getAddress();
        const owners_ = Array.from(new Set([...owners, ownerAddress]))
            .filter((x) => hexToBigInt(x) !== 0n)
            .sort((a, b) => {
            const bigintA = hexToBigInt(a);
            const bigintB = hexToBigInt(b);
            return bigintA < bigintB ? -1 : bigintA > bigintB ? 1 : 0;
        });
        return concatHex([
            factoryAddress,
            encodeFunctionData({
                abi: MultiOwnerModularAccountFactoryAbi,
                functionName: "createAccount",
                args: [salt, owners_],
            }),
        ]);
    };
    const _accountAddress = await getAccountAddress({
        client,
        entryPoint,
        accountAddress,
        getAccountInitCode,
    });
    const baseAccount = await toSmartContractAccount({
        transport,
        chain,
        entryPoint,
        accountAddress: _accountAddress,
        source: `MultiOwnerModularAccount`,
        getAccountInitCode,
        ...standardExecutor,
        ...multiOwnerMessageSigner(client, _accountAddress, () => signer),
    });
    return {
        ...baseAccount,
        publicKey: await signer.getAddress(),
        getSigner: () => signer,
    };
}
//# sourceMappingURL=multiOwnerAccount.js.map