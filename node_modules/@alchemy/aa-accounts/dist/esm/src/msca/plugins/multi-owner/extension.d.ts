import { type GetAccountParameter, type IsUndefined, type SmartContractAccount } from "@alchemy/aa-core";
import { type Address, type Chain, type Client, type Transport } from "viem";
import type { GetPluginAddressParameter } from "../types.js";
import { type MultiOwnerPluginActions as MultiOwnerPluginActions_ } from "./plugin.js";
export type MultiOwnerPluginActions<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined> = MultiOwnerPluginActions_<TAccount, undefined> & {
    readOwners: (params: GetPluginAddressParameter & GetAccountParameter<TAccount>) => Promise<ReadonlyArray<Address>>;
    isOwnerOf: (params: {
        address: Address;
    } & GetPluginAddressParameter & GetAccountParameter<TAccount>) => Promise<boolean>;
} & (IsUndefined<TAccount> extends false ? {
    readOwners: (params?: GetPluginAddressParameter & GetAccountParameter<TAccount>) => Promise<ReadonlyArray<Address>>;
} : {});
export declare const multiOwnerPluginActions: <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(client: Client<TTransport, TChain, TAccount>) => MultiOwnerPluginActions<TAccount>;
