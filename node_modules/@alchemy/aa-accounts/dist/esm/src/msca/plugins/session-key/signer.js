import { LocalAccountSigner } from "@alchemy/aa-core";
import { generatePrivateKey } from "viem/accounts";
import { z } from "zod";
export const SessionKeySignerSchema = z.object({
    storageType: z
        .union([z.literal("local-storage"), z.literal("session-storage")])
        .or(z.custom())
        .default("local-storage"),
    storageKey: z.string().default("session-key-signer:session-key"),
});
export const SESSION_KEY_SIGNER_TYPE_PFX = "alchemy:session-key";
export class SessionKeySigner {
    constructor(config_ = {}) {
        Object.defineProperty(this, "signerType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "storageType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "storageKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "getAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                return this.inner.getAddress();
            }
        });
        Object.defineProperty(this, "signMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (msg) => {
                return this.inner.signMessage(msg);
            }
        });
        Object.defineProperty(this, "signTypedData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                return this.inner.signTypedData(params);
            }
        });
        Object.defineProperty(this, "generateNewKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                const storage = this.storageType === "session-storage" ? sessionStorage : localStorage;
                const newKey = generatePrivateKey();
                storage.setItem(this.storageKey, newKey);
                this.inner = LocalAccountSigner.privateKeyToAccountSigner(newKey);
                return this.inner.inner.address;
            }
        });
        const config = SessionKeySignerSchema.parse(config_);
        this.signerType = `${SESSION_KEY_SIGNER_TYPE_PFX}`;
        this.storageKey = config.storageKey;
        this.storageType = config.storageType;
        const sessionKey = (() => {
            const storage = typeof this.storageType !== "string"
                ? this.storageType
                : this.storageType === "session-storage"
                    ? sessionStorage
                    : localStorage;
            const key = storage.getItem(this.storageKey);
            if (key) {
                return key;
            }
            else {
                const newKey = generatePrivateKey();
                storage.setItem(this.storageKey, newKey);
                return newKey;
            }
        })();
        this.inner = LocalAccountSigner.privateKeyToAccountSigner(sessionKey);
    }
}
//# sourceMappingURL=signer.js.map