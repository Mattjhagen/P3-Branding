import { type GetEntryPointFromAccount, type SmartContractAccount, type UserOperationRequest } from "@alchemy/aa-core";
import { type Hex } from "viem";
import type { Signature } from "../types";
export type SplitAggregateSignatureParams<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    aggregatedSignature: Hex;
    threshold: number;
    account: SmartContractAccount;
    request: UserOperationRequest<TEntryPointVersion>;
};
export declare const splitAggregatedSignature: <TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined>(args: SplitAggregateSignatureParams<TAccount, GetEntryPointFromAccount<TAccount, SmartContractAccount<string, keyof import("@alchemy/aa-core").EntryPointRegistryBase<unknown>>>>) => Promise<{
    upperLimitPvg: Hex;
    upperLimitMaxFeePerGas: Hex;
    upperLimitMaxPriorityFeePerGas: Hex;
    signatures: Signature[];
}>;
