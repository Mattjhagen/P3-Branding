{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/light-account/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DefaultFactoryNotDefinedError,\n  arbitrum,\n  arbitrumGoerli,\n  arbitrumSepolia,\n  base,\n  baseGoerli,\n  baseSepolia,\n  fraxtal,\n  fraxtalSepolia,\n  goerli,\n  mainnet,\n  optimism,\n  optimismGoerli,\n  optimismSepolia,\n  polygon,\n  polygonAmoy,\n  polygonMumbai,\n  sepolia,\n  toRecord,\n  zora,\n  zoraSepolia,\n} from \"@alchemy/aa-core\";\nimport { fromHex, type Address, type Chain } from \"viem\";\nimport type { LightAccountBase } from \"./accounts/base\";\nimport type {\n  AccountVersionDef,\n  GetLightAccountType,\n  GetLightAccountVersion,\n  GetLightAccountVersionFromAccount,\n  IAccountVersionRegistry,\n  LightAccountType,\n  LightAccountVersion,\n  LightAccountVersionDef,\n} from \"./types\";\n\n/**\n * Light account deployed chains\n *\n */\nexport const supportedChains: Chain[] = [\n  mainnet,\n  sepolia,\n  goerli,\n  polygon,\n  polygonAmoy,\n  polygonMumbai,\n  optimism,\n  optimismGoerli,\n  optimismSepolia,\n  arbitrum,\n  arbitrumGoerli,\n  arbitrumSepolia,\n  base,\n  baseGoerli,\n  baseSepolia,\n  fraxtal,\n  fraxtalSepolia,\n  zora,\n  zoraSepolia,\n];\n\n/**\n * Account version registry interface that defines the light account versions\n * and the version definition for each light account type\n *\n */\nexport const AccountVersionRegistry: IAccountVersionRegistry = {\n  LightAccount: {\n    \"v1.0.1\": {\n      type: \"LightAccount\",\n      version: \"v1.0.1\",\n      address: toRecord<Chain, \"id\", { factory: Address; impl: Address }>(\n        supportedChains,\n        \"id\",\n        () => ({\n          factory:\n            \"0x000000893A26168158fbeaDD9335Be5bC96592E2\".toLowerCase() as Address,\n          impl: \"0xc1b2fc4197c9187853243e6e4eb5a4af8879a1c0\".toLowerCase() as Address,\n        })\n      ),\n      entryPointVersion: \"0.6.0\",\n    },\n    \"v1.0.2\": {\n      type: \"LightAccount\",\n      version: \"v1.0.2\",\n      address: toRecord<Chain, \"id\", { factory: Address; impl: Address }>(\n        supportedChains,\n        \"id\",\n        () => ({\n          factory:\n            \"0x00000055C0b4fA41dde26A74435ff03692292FBD\".toLowerCase() as Address,\n          impl: \"0x5467b1947F47d0646704EB801E075e72aeAe8113\".toLowerCase() as Address,\n        })\n      ),\n      entryPointVersion: \"0.6.0\",\n    },\n    \"v1.1.0\": {\n      type: \"LightAccount\",\n      version: \"v1.1.0\",\n      address: toRecord<Chain, \"id\", { factory: Address; impl: Address }>(\n        supportedChains,\n        \"id\",\n        () => ({\n          factory:\n            \"0x00004EC70002a32400f8ae005A26081065620D20\".toLowerCase() as Address,\n          impl: \"0xae8c656ad28F2B59a196AB61815C16A0AE1c3cba\".toLowerCase() as Address,\n        })\n      ),\n      entryPointVersion: \"0.6.0\",\n    },\n    \"v2.0.0\": {\n      type: \"LightAccount\",\n      version: \"v2.0.0\",\n      address: toRecord<Chain, \"id\", { factory: Address; impl: Address }>(\n        supportedChains,\n        \"id\",\n        () => ({\n          factory:\n            \"0x0000000000400CdFef5E2714E63d8040b700BC24\".toLowerCase() as Address,\n          impl: \"0x8E8e658E22B12ada97B402fF0b044D6A325013C7\".toLowerCase() as Address,\n        })\n      ),\n      entryPointVersion: \"0.7.0\",\n    },\n  },\n  MultiOwnerLightAccount: {\n    \"v2.0.0\": {\n      type: \"MultiOwnerLightAccount\",\n      version: \"v2.0.0\",\n      address: toRecord<Chain, \"id\", { factory: Address; impl: Address }>(\n        supportedChains,\n        \"id\",\n        () => ({\n          factory:\n            \"0x000000000019d2Ee9F2729A65AfE20bb0020AefC\".toLowerCase() as Address,\n          impl: \"0xd2c27F9eE8E4355f71915ffD5568cB3433b6823D\".toLowerCase() as Address,\n        })\n      ),\n      entryPointVersion: \"0.7.0\",\n    },\n  },\n};\n\n/**\n * Get the default light account version for the given light account type\n *\n * @template {LightAccountType} TLightAccountType\n * @param type - the light account type to get the default version for\n * @returns the default version for the given light account type\n */\nexport const defaultLightAccountVersion = <\n  TLightAccountType extends LightAccountType\n>(\n  type: TLightAccountType\n): GetLightAccountVersion<TLightAccountType> =>\n  (type === \"LightAccount\"\n    ? \"v1.1.0\"\n    : \"v2.0.0\") as GetLightAccountVersion<TLightAccountType>;\n\n/**\n * Utility method returning the default light account factory address given a {@link Chain} object\n *\n * @param chain - a {@link Chain} object\n * @param version - the version of the light account to get the factory address for\n * @returns a {@link Address} for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultLightAccountFactoryAddress = (\n  chain: Chain,\n  version: LightAccountVersion = \"v1.1.0\"\n): Address => {\n  const address =\n    AccountVersionRegistry.LightAccount[version].address[chain.id];\n  if (!address)\n    throw new DefaultFactoryNotDefinedError(\"LightAccount\", chain, \"0.6.0\");\n  return address.factory;\n};\n\n/**\n * Can be used to check if the account with one of the following implementation addresses\n * to not support 1271 signing.\n *\n * Light accounts with versions v1.0.1 and v1.0.2 do not support 1271 signing.\n *\n */\nexport const LightAccountUnsupported1271Impls = [\n  AccountVersionRegistry.LightAccount[\"v1.0.1\"],\n  AccountVersionRegistry.LightAccount[\"v1.0.2\"],\n];\n\n/**\n * Can be used to check if the account with one of the following factory addresses\n * to not support 1271 signing.\n *\n * Light accounts with versions v1.0.1 and v1.0.2 do not support 1271 signing.\n *\n */\nexport const LightAccountUnsupported1271Factories = new Set(\n  LightAccountUnsupported1271Impls.map((x) =>\n    Object.values(x.address).map((addr) => addr.factory)\n  ).flat()\n);\n\n/**\n * Get the light account version definition for the given light account and chain\n *\n * @template {LightAccountBase} TAccount\n * @template {GetLightAccountType<TAccount>} TLightAccountType\n * @template {GetLightAccountVersion<TLightAccountType>} TLightAccountVersion\n * @param account - the light account to get the version for\n * @param chain - the chain to get the version for\n * @returns the light account version definition for the given light account and chain\n */\nexport async function getLightAccountVersionDef<\n  TAccount extends LightAccountBase,\n  TLightAccountType extends GetLightAccountType<TAccount> = GetLightAccountType<TAccount>,\n  TLightAccountVersion extends GetLightAccountVersion<TLightAccountType> = GetLightAccountVersion<TLightAccountType>\n>(\n  account: TAccount,\n  chain: Chain\n): Promise<LightAccountVersionDef<TLightAccountType, TLightAccountVersion>>;\n\n/**\n * Get the light account version definition for the given light account and chain\n *\n * @template {LightAccountBase} TAccount\n * @template {GetLightAccountType<TAccount>} TLightAccountType\n * @param account - the light account to get the version for\n * @param chain - the chain to get the version for\n * @returns the light account version definition for the given light account and chain\n */\nexport async function getLightAccountVersionDef<\n  TAccount extends LightAccountBase,\n  TLightAccountType extends GetLightAccountType<TAccount> = GetLightAccountType<TAccount>\n>(\n  account: TAccount,\n  chain: Chain\n): Promise<\n  AccountVersionDef<\n    TLightAccountType,\n    GetLightAccountVersion<TLightAccountType>\n  >\n>;\n\n/**\n * Get the light account version definition for the given light account and chain\n *\n * @template {LightAccountBase} TAccount\n * @param account - the light account to get the version for\n * @param chain - the chain to get the version for\n * @returns the light account version definition for the given light account and chain\n */\nexport async function getLightAccountVersionDef<\n  TAccount extends LightAccountBase\n>(account: TAccount, chain: Chain): Promise<AccountVersionDef> {\n  const accountType = account.source as LightAccountType;\n  const factoryAddress = await account.getFactoryAddress();\n  const implAddress = await account.getImplementationAddress();\n  const implToVersion = new Map(\n    Object.entries(AccountVersionRegistry[accountType])\n      .map((pair) => {\n        const [version, def] = pair as [\n          GetLightAccountVersionFromAccount<TAccount>,\n          LightAccountVersionDef\n        ];\n        return chain.id in def.address\n          ? [def.address[chain.id].impl, version]\n          : [null, version];\n      })\n      .filter(([impl]) => impl !== null) as [\n      Address,\n      keyof IAccountVersionRegistry[typeof accountType]\n    ][]\n  );\n\n  const factoryToVersion = new Map(\n    Object.entries(AccountVersionRegistry[accountType])\n      .map((pair) => {\n        const [version, def] = pair as [\n          keyof IAccountVersionRegistry[typeof accountType],\n          LightAccountVersionDef\n        ];\n        return chain.id in def.address\n          ? [def.address[chain.id].factory, version]\n          : [null, version];\n      })\n      .filter(([impl]) => impl !== null) as [\n      Address,\n      keyof IAccountVersionRegistry[typeof accountType]\n    ][]\n  );\n\n  const version =\n    fromHex(implAddress, \"bigint\") === 0n\n      ? factoryToVersion.get(factoryAddress.toLowerCase() as Address)\n      : implToVersion.get(implAddress.toLowerCase() as Address);\n\n  if (!version) {\n    throw new Error(\n      `Could not determine ${account.source} version for chain ${chain.id}`\n    );\n  }\n\n  return AccountVersionRegistry[accountType][version];\n}\n\n/**\n * @param account - the light account to get the version for\n * @param chain - the chain to get the version for\n *\n * @deprecated don't use this function as this function is replaced with getLightAccountVersionDef.\n *             Migrate to using getLightAccountVersionDef instead\n *\n * @returns the light account version for the given light account and chain\n */\nexport async function getLightAccountVersion<\n  TAccount extends LightAccountBase,\n  TLightAccountType extends GetLightAccountType<TAccount> = GetLightAccountType<TAccount>\n>(\n  account: TAccount,\n  chain?: Chain\n): Promise<GetLightAccountVersion<TLightAccountType>>;\n\n/**\n * Get the light account version for the given light account and chain\n *\n * @deprecated don't use this function as this function is replaced with getLightAccountVersionDef.\n *\n * @param account - the light account to get the version for\n * @param chain - the chain to get the version for\n * @returns the light account version for the given light account and chain\n */\nexport async function getLightAccountVersion(\n  account: LightAccountBase,\n  chain: Chain = supportedChains[0]\n): Promise<LightAccountVersion> {\n  return (await getLightAccountVersionDef(account, chain)).version;\n}\n"]}