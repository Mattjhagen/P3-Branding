{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/light-account/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAMN,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAA4B,MAAM,MAAM,CAAC","sourcesContent":["import {\n  type EntryPointVersion,\n  type GetAccountParameter,\n  type OneOf,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport { type Address, type Chain } from \"viem\";\nimport type { LightAccountBase } from \"./accounts/base\";\n\n/**\n * Light account types supported: LightAccount, MultiOwnerLightAccount\n *\n */\nexport type LightAccountType = keyof IAccountVersionRegistry;\n\n/**\n * Account version definition, which is the base type defining the LightAccountVersionDef interface\n *\n * @template {LightAccountType} TLightAccountType type\n * @template {GetLightAccountVersion<TLightAccountType>} TLightAccountVersion version\n * @template {EntryPointVersion} TEntryPointVersion entryPointVersion\n */\nexport type AccountVersionDef<\n  TLightAccountType extends LightAccountType = LightAccountType,\n  TLightAccountVersion extends GetLightAccountVersion<TLightAccountType> = GetLightAccountVersion<TLightAccountType>,\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = {\n  type: TLightAccountType;\n  version: TLightAccountVersion;\n  entryPointVersion: TEntryPointVersion;\n  address: Record<\n    Chain[\"id\"],\n    {\n      factory: Address;\n      impl: Address;\n    }\n  >;\n};\n\n/**\n * Light account version type defs for tightly coupled types for smart accounts\n *\n */\nexport type LightAccountVersion =\n  | keyof IAccountVersionRegistry[\"LightAccount\"]\n  | keyof IAccountVersionRegistry[\"MultiOwnerLightAccount\"];\n\n/**\n * Get the light account versions available for the given light account type\n *\n * @template {LightAccountType} TLightAccountType\n */\nexport type GetLightAccountVersion<\n  TLightAccountType extends LightAccountType = LightAccountType\n> = keyof IAccountVersionRegistry[TLightAccountType];\n\n/**\n * Light account version definition type based on the light account type and version\n *\n * @template {LightAccountType} TLightAccountType\n * @template {GetLightAccountVersion<TLightAccountType>} TLightAccountVersion\n */\nexport type LightAccountVersionDef<\n  TLightAccountType extends LightAccountType = LightAccountType,\n  TLightAccountVersion extends GetLightAccountVersion<TLightAccountType> = GetLightAccountVersion<TLightAccountType>\n> = IAccountVersionRegistry[TLightAccountType][TLightAccountVersion];\n\n/**\n * Light account version registry interface defining the supported light account versions\n *\n */\nexport interface IAccountVersionRegistry {\n  LightAccount: {\n    /** @deprecated This version does not support 1271 signature validation */\n    \"v1.0.1\": AccountVersionDef<\"LightAccount\", \"v1.0.1\", \"0.6.0\">;\n    /** @deprecated This version has a known issue with 1271 validation */\n    \"v1.0.2\": AccountVersionDef<\"LightAccount\", \"v1.0.2\", \"0.6.0\">;\n    \"v1.1.0\": AccountVersionDef<\"LightAccount\", \"v1.1.0\", \"0.6.0\">;\n    /**\n     * LightAccount v2 Changelog.\n     * It is recommended to use v2.0.0\n     * https://alchemotion.notion.site/External-Light-Account-v2-Changelog-725b306ab1e04eb0a3e596521dd8f0bd\n     */\n    \"v2.0.0\": AccountVersionDef<\"LightAccount\", \"v2.0.0\", \"0.7.0\">;\n  };\n  MultiOwnerLightAccount: {\n    /**\n     * MultiOwnerLightAccount v2 Changelog\n     * It is recommended to use v2.0.0\n     * https://alchemotion.notion.site/External-Light-Account-v2-Changelog-725b306ab1e04eb0a3e596521dd8f0bd\n     */\n    \"v2.0.0\": AccountVersionDef<\"MultiOwnerLightAccount\", \"v2.0.0\", \"0.7.0\">;\n  };\n}\n\n/**\n * Get the light account version definitions available for the given light account type\n *\n * @template {LightAccountType} TLightAccountType\n *\n * @example\n * type T1 = GetLightAccountVersionsForType<\"LightAccount\">;\n * const t1: T1 = AccountVersionRegistry.LightAccount[\"v1.0.2\"];\n */\nexport type GetLightAccountVersionDefsForType<TType extends LightAccountType> =\n  Extract<\n    IAccountVersionRegistry[TType][keyof IAccountVersionRegistry[TType]],\n    { type: TType }\n  >;\n\n/**\n * Get the light account version definition for the given light account type and version\n *\n * @template {LightAccountType} TType\n * @template {GetLightAccountVersion<TType>} TLightAccountVersion\n */\nexport type GetLightAccountVersionDef<\n  TType extends LightAccountType,\n  TLightAccountVersion extends GetLightAccountVersion<TType>\n> = IAccountVersionRegistry[TType][TLightAccountVersion];\n\n/**\n * @example\n * type T = GetLightAccountVersionDefsForEntryPoint<\"LightAccount\", \"0.6.0\">;\n * const t_1: T = AccountVersionRegistry.LightAccount[\"v1.0.2\"]; // compiles\n * const t_2: T = AccountVersionRegistry.LightAccount[\"v2.0.0\"]; // errors\n */\nexport type GetLightAccountVersionDefsForEntryPoint<\n  TType extends LightAccountType,\n  TEntryPointVersion extends EntryPointVersion\n> = Extract<\n  GetLightAccountVersionDefsForType<TType>,\n  { entryPointVersion: TEntryPointVersion }\n>;\n\n/**\n * Get the light account type for the given light account by inferring from its type definition\n *\n * @template {SmartContractAccount | undefined} TAccount\n * @template {SmartContractAccount} TAccountOverride\n */\nexport type GetLightAccountType<\n  TAccount extends SmartContractAccount | undefined,\n  TAccountOverride extends SmartContractAccount = SmartContractAccount\n> = GetAccountParameter<TAccount, TAccountOverride> extends LightAccountBase<\n  SmartAccountSigner,\n  infer TLightAccountType\n>\n  ? OneOf<TLightAccountType, LightAccountType>\n  : LightAccountType;\n\n/**\n * Get the light account version for the given light account by inferring from its type definition\n *\n * @template {LightAccountBase | undefined} TAccount\n * @template {LightAccountBase} TAccountOverride\n */\nexport type GetLightAccountVersionFromAccount<\n  TAccount extends LightAccountBase | undefined,\n  TAccountOverride extends LightAccountBase = LightAccountBase\n> = GetAccountParameter<TAccount, TAccountOverride> extends LightAccountBase<\n  SmartAccountSigner,\n  LightAccountType,\n  infer TLightAccountVersion\n>\n  ? OneOf<TLightAccountVersion, LightAccountVersion>\n  : LightAccountVersion;\n\n/**\n * Get the entry point version supported for the given light account type and version\n *\n * @template {LightAccountType} TLightAccountType\n * @template {GetLightAccountVersion<TLightAccountType>} TLightAccountVersion\n */\nexport type GetEntryPointForLightAccountVersion<\n  TLightAccountType extends LightAccountType = LightAccountType,\n  TLightAccountVersion extends GetLightAccountVersion<TLightAccountType> = GetLightAccountVersion<TLightAccountType>\n> = GetLightAccountVersionDef<\n  TLightAccountType,\n  TLightAccountVersion\n> extends AccountVersionDef<\n  TLightAccountType,\n  TLightAccountVersion,\n  infer TEntryPointVersion\n>\n  ? TEntryPointVersion\n  : EntryPointVersion;\n\n/**\n * Get the light account type for the given light account version by inferring from its type definition\n *\n * @template {LightAccountVersion} TLightAccountVersion\n */\nexport type GetLightAccountTypesForVersion<\n  TLightAccountVersion extends LightAccountVersion = LightAccountVersion\n> = TLightAccountVersion extends GetLightAccountVersion<infer TLightAccountType>\n  ? TLightAccountType\n  : LightAccountType;\n\n/**\n * Get default light account version for the given light account type\n *\n * @template {LightAccountType} TLightAccountType\n */\nexport type GetDefaultLightAccountVersion<\n  TLightAccountType extends LightAccountType = LightAccountType\n> = TLightAccountType extends \"MultiOwnerLightAccount\"\n  ? \"v2.0.0\" & LightAccountVersion\n  : \"v1.1.0\" & LightAccountVersion;\n"]}