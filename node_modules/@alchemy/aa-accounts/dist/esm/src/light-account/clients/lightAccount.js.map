{"version":3,"file":"lightAccount.js","sourceRoot":"","sources":["../../../../../src/light-account/clients/lightAccount.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,wBAAwB,GAMzB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAoD,MAAM,MAAM,CAAC;AACxE,OAAO,EACL,kBAAkB,GAGnB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EACL,yBAAyB,GAE1B,MAAM,+BAA+B,CAAC;AAiCvC,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,EAC7C,OAAO,EACP,SAAS,EACT,KAAK,EACL,GAAG,YAAY,EACgB;IAC/B,MAAM,YAAY,GAAG,MAAM,kBAAkB,CAAC;QAC5C,GAAG,OAAO;QACV,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,wBAAwB,CAAC;QAC9B,GAAG,YAAY;QACf,SAAS;QACT,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,YAAY;KACtB,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import {\n  createSmartAccountClient,\n  type SmartAccountClient,\n  type SmartAccountClientActions,\n  type SmartAccountClientConfig,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport { type Chain, type CustomTransport, type Transport } from \"viem\";\nimport {\n  createLightAccount,\n  type CreateLightAccountParams,\n  type LightAccount,\n} from \"../accounts/account.js\";\nimport {\n  lightAccountClientActions,\n  type LightAccountClientActions,\n} from \"../decorators/lightAccount.js\";\n\nexport type CreateLightAccountClientParams<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = {\n  transport: CreateLightAccountParams<TTransport, TSigner>[\"transport\"];\n  chain: CreateLightAccountParams<TTransport, TSigner>[\"chain\"];\n  account: Omit<\n    CreateLightAccountParams<TTransport, TSigner>,\n    \"transport\" | \"chain\"\n  >;\n} & Omit<\n  SmartAccountClientConfig<TTransport, TChain>,\n  \"transport\" | \"account\" | \"chain\"\n>;\n\nexport function createLightAccountClient<\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  args: CreateLightAccountClientParams<Transport, TChain, TSigner>\n): Promise<\n  SmartAccountClient<\n    CustomTransport,\n    Chain,\n    LightAccount<TSigner>,\n    SmartAccountClientActions<Chain, SmartContractAccount> &\n      LightAccountClientActions<TSigner, LightAccount<TSigner>>\n  >\n>;\n\nexport async function createLightAccountClient({\n  account,\n  transport,\n  chain,\n  ...clientConfig\n}: CreateLightAccountClientParams): Promise<SmartAccountClient> {\n  const lightAccount = await createLightAccount({\n    ...account,\n    transport,\n    chain,\n  });\n\n  return createSmartAccountClient({\n    ...clientConfig,\n    transport,\n    chain: chain,\n    account: lightAccount,\n  }).extend(lightAccountClientActions);\n}\n"]}