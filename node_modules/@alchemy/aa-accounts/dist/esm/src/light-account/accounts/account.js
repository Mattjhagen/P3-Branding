import { createBundlerClient, getAccountAddress, getEntryPoint, } from "@alchemy/aa-core";
import { concatHex, encodeFunctionData, } from "viem";
import { LightAccountAbi_v1 } from "../abis/LightAccountAbi_v1.js";
import { LightAccountAbi_v2 } from "../abis/LightAccountAbi_v2.js";
import { LightAccountFactoryAbi_v1 } from "../abis/LightAccountFactoryAbi_v1.js";
import { LightAccountFactoryAbi_v2 } from "../abis/LightAccountFactoryAbi_v2.js";
import { AccountVersionRegistry, LightAccountUnsupported1271Factories, defaultLightAccountVersion, } from "../utils.js";
import { createLightAccountBase, } from "./base.js";
export async function createLightAccount({ transport, chain, signer, initCode, version = defaultLightAccountVersion("LightAccount"), entryPoint = getEntryPoint(chain, {
    version: AccountVersionRegistry["LightAccount"][version]
        .entryPointVersion,
}), accountAddress, factoryAddress = AccountVersionRegistry["LightAccount"][version].address[chain.id].factory, salt: salt_ = 0n, }) {
    const client = createBundlerClient({
        transport,
        chain,
    });
    const accountAbi = version === "v2.0.0" ? LightAccountAbi_v2 : LightAccountAbi_v1;
    const factoryAbi = version === "v2.0.0"
        ? LightAccountFactoryAbi_v1
        : LightAccountFactoryAbi_v2;
    const getAccountInitCode = async () => {
        if (initCode)
            return initCode;
        const salt = LightAccountUnsupported1271Factories.has(factoryAddress.toLowerCase())
            ? 0n
            : salt_;
        return concatHex([
            factoryAddress,
            encodeFunctionData({
                abi: factoryAbi,
                functionName: "createAccount",
                args: [await signer.getAddress(), salt],
            }),
        ]);
    };
    const address = await getAccountAddress({
        client,
        entryPoint,
        accountAddress,
        getAccountInitCode,
    });
    const account = await createLightAccountBase({
        transport,
        chain,
        signer,
        abi: accountAbi,
        version: AccountVersionRegistry["LightAccount"][version],
        entryPoint,
        accountAddress: address,
        getAccountInitCode,
    });
    return {
        ...account,
        encodeTransferOwnership: (newOwner) => {
            return encodeFunctionData({
                abi: accountAbi,
                functionName: "transferOwnership",
                args: [newOwner],
            });
        },
        async getOwnerAddress() {
            const callResult = await client.readContract({
                address,
                abi: accountAbi,
                functionName: "owner",
            });
            if (callResult == null) {
                throw new Error("could not get on-chain owner");
            }
            return callResult;
        },
    };
}
//# sourceMappingURL=account.js.map