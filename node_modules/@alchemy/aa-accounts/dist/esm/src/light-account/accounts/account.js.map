{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../../../src/light-account/accounts/account.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createBundlerClient,\n  getAccountAddress,\n  getEntryPoint,\n  type Address,\n  type EntryPointDef,\n  type SmartAccountSigner,\n} from \"@alchemy/aa-core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { LightAccountAbi_v1 } from \"../abis/LightAccountAbi_v1.js\";\nimport { LightAccountAbi_v2 } from \"../abis/LightAccountAbi_v2.js\";\nimport { LightAccountFactoryAbi_v1 } from \"../abis/LightAccountFactoryAbi_v1.js\";\nimport { LightAccountFactoryAbi_v2 } from \"../abis/LightAccountFactoryAbi_v2.js\";\nimport type {\n  GetEntryPointForLightAccountVersion,\n  GetLightAccountVersion,\n} from \"../types.js\";\nimport {\n  AccountVersionRegistry,\n  LightAccountUnsupported1271Factories,\n  defaultLightAccountVersion,\n} from \"../utils.js\";\nimport {\n  createLightAccountBase,\n  type CreateLightAccountBaseParams,\n  type LightAccountBase,\n} from \"./base.js\";\n\nexport type LightAccount<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"LightAccount\"> = GetLightAccountVersion<\"LightAccount\">,\n  TEntryPointVersion extends GetEntryPointForLightAccountVersion<\n    \"LightAccount\",\n    TLightAccountVersion\n  > = GetEntryPointForLightAccountVersion<\"LightAccount\", TLightAccountVersion>\n> = LightAccountBase<\n  TSigner,\n  \"LightAccount\",\n  TLightAccountVersion,\n  TEntryPointVersion\n> & {\n  encodeTransferOwnership: (newOwner: Address) => Hex;\n  getOwnerAddress: () => Promise<Address>;\n};\n\n// [!region CreateLightAccountParams]\nexport type CreateLightAccountParams<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"LightAccount\"> = GetLightAccountVersion<\"LightAccount\">,\n  TEntryPointVersion extends GetEntryPointForLightAccountVersion<\n    \"LightAccount\",\n    TLightAccountVersion\n  > = GetEntryPointForLightAccountVersion<\"LightAccount\", TLightAccountVersion>\n> = Omit<\n  CreateLightAccountBaseParams<\n    TTransport,\n    TSigner,\n    \"LightAccount\",\n    TLightAccountVersion,\n    TEntryPointVersion\n  >,\n  \"getAccountInitCode\" | \"entryPoint\" | \"version\" | \"abi\" | \"accountAddress\"\n> & {\n  salt?: bigint;\n  initCode?: Hex;\n  accountAddress?: Address;\n  factoryAddress?: Address;\n  version?: TLightAccountVersion;\n  entryPoint?: EntryPointDef<TEntryPointVersion, Chain>;\n};\n// [!endregion CreateLightAccountParams]\n\nexport async function createLightAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"LightAccount\"> = \"v1.1.0\"\n>(\n  config: CreateLightAccountParams<TTransport, TSigner, TLightAccountVersion>\n): Promise<LightAccount<TSigner, TLightAccountVersion>>;\n\nexport async function createLightAccount<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TLightAccountVersion extends GetLightAccountVersion<\"LightAccount\"> = GetLightAccountVersion<\"LightAccount\">,\n  TEntryPointVersion extends GetEntryPointForLightAccountVersion<\n    \"LightAccount\",\n    TLightAccountVersion\n  > = GetEntryPointForLightAccountVersion<\"LightAccount\", TLightAccountVersion>\n>(\n  config: CreateLightAccountParams<\n    TTransport,\n    TSigner,\n    TLightAccountVersion,\n    TEntryPointVersion\n  >\n): Promise<LightAccount<TSigner, TLightAccountVersion, TEntryPointVersion>>;\n\nexport async function createLightAccount({\n  transport,\n  chain,\n  signer,\n  initCode,\n  version = defaultLightAccountVersion(\"LightAccount\"),\n  entryPoint = getEntryPoint(chain, {\n    version: AccountVersionRegistry[\"LightAccount\"][version]\n      .entryPointVersion as any,\n  }),\n  accountAddress,\n  factoryAddress = AccountVersionRegistry[\"LightAccount\"][version].address[\n    chain.id\n  ].factory,\n  salt: salt_ = 0n,\n}: CreateLightAccountParams): Promise<LightAccount> {\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const accountAbi =\n    version === \"v2.0.0\" ? LightAccountAbi_v2 : LightAccountAbi_v1;\n  const factoryAbi =\n    version === \"v2.0.0\"\n      ? LightAccountFactoryAbi_v1\n      : LightAccountFactoryAbi_v2;\n\n  const getAccountInitCode = async () => {\n    if (initCode) return initCode;\n\n    const salt = LightAccountUnsupported1271Factories.has(\n      factoryAddress.toLowerCase() as Address\n    )\n      ? 0n\n      : salt_;\n\n    return concatHex([\n      factoryAddress,\n      encodeFunctionData({\n        abi: factoryAbi,\n        functionName: \"createAccount\",\n        args: [await signer.getAddress(), salt],\n      }),\n    ]);\n  };\n\n  const address = await getAccountAddress({\n    client,\n    entryPoint,\n    accountAddress,\n    getAccountInitCode,\n  });\n\n  const account = await createLightAccountBase<\n    Transport,\n    SmartAccountSigner,\n    \"LightAccount\"\n  >({\n    transport,\n    chain,\n    signer,\n    abi: accountAbi,\n    version: AccountVersionRegistry[\"LightAccount\"][version],\n    entryPoint,\n    accountAddress: address,\n    getAccountInitCode,\n  });\n\n  return {\n    ...account,\n\n    encodeTransferOwnership: (newOwner: Address) => {\n      return encodeFunctionData({\n        abi: accountAbi,\n        functionName: \"transferOwnership\",\n        args: [newOwner],\n      });\n    },\n    async getOwnerAddress(): Promise<Address> {\n      const callResult = await client.readContract({\n        address,\n        abi: accountAbi,\n        functionName: \"owner\",\n      });\n\n      if (callResult == null) {\n        throw new Error(\"could not get on-chain owner\");\n      }\n\n      return callResult;\n    },\n  };\n}\n"]}