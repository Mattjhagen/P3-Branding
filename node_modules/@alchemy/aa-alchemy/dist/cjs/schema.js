"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemySdkClientSchema = exports.AlchemyProviderConfigSchema = exports.AlchemyChainSchema = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const alchemy_sdk_1 = require("alchemy-sdk");
const zod_1 = __importDefault(require("zod"));
exports.AlchemyChainSchema = zod_1.default.custom((chain) => {
    const _chain = aa_core_1.ChainSchema.parse(chain);
    let chainObject;
    try {
        chainObject = (0, aa_core_1.getChain)(_chain.id);
    }
    catch {
        return false;
    }
    return chainObject.rpcUrls.alchemy != null;
}, "chain must include an alchemy rpc url. See `createAlchemyChain` or use the `AlchemyChainMap` exported from `@alchemy/aa-core`");
exports.AlchemyProviderConfigSchema = aa_core_1.ConnectionConfigSchema.and(zod_1.default.object({
    chain: exports.AlchemyChainSchema,
    opts: aa_core_1.SmartAccountClientOptsSchema.optional().default(aa_core_1.SmartAccountClientOptsSchema.parse({})),
}));
exports.AlchemySdkClientSchema = zod_1.default.instanceof(alchemy_sdk_1.Alchemy);
//# sourceMappingURL=schema.js.map