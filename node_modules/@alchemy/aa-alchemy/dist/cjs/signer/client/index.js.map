{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/signer/client/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConnectionConfigSchema } from \"@alchemy/aa-core\";\nimport { getWebAuthnAttestation } from \"@turnkey/http\";\nimport { IframeStamper } from \"@turnkey/iframe-stamper\";\nimport { WebauthnStamper } from \"@turnkey/webauthn-stamper\";\nimport { z } from \"zod\";\nimport { base64UrlEncode } from \"../utils/base64UrlEncode.js\";\nimport { generateRandomBuffer } from \"../utils/generateRandomBuffer.js\";\nimport { BaseSignerClient } from \"./base.js\";\nimport type {\n  CreateAccountParams,\n  CredentialCreationOptionOverrides,\n  EmailAuthParams,\n  ExportWalletParams,\n  User,\n} from \"./types\";\n\nexport const AlchemySignerClientParamsSchema = z.object({\n  connection: ConnectionConfigSchema,\n  iframeConfig: z.object({\n    iframeElementId: z.string().default(\"turnkey-iframe\"),\n    iframeContainerId: z.string(),\n  }),\n  rpId: z.string().optional(),\n  rootOrgId: z\n    .string()\n    .optional()\n    .default(\"24c1acf5-810f-41e0-a503-d5d13fa8e830\"),\n});\n\nexport type AlchemySignerClientParams = z.input<\n  typeof AlchemySignerClientParamsSchema\n>;\n\n/**\n * A lower level client used by the AlchemySigner used to communicate with\n * Alchemy's signer service.\n */\nexport class AlchemySignerWebClient extends BaseSignerClient<ExportWalletParams> {\n  private iframeStamper: IframeStamper;\n  private webauthnStamper: WebauthnStamper;\n  iframeContainerId: string;\n\n  constructor(params: AlchemySignerClientParams) {\n    const { connection, iframeConfig, rpId, rootOrgId } =\n      AlchemySignerClientParamsSchema.parse(params);\n\n    const iframeStamper = new IframeStamper({\n      iframeElementId: iframeConfig.iframeElementId,\n      iframeUrl: \"https://auth.turnkey.com\",\n      iframeContainer: document.getElementById(iframeConfig.iframeContainerId),\n    });\n\n    super({\n      connection,\n      rootOrgId,\n      stamper: iframeStamper,\n    });\n\n    this.iframeStamper = iframeStamper;\n    this.iframeContainerId = iframeConfig.iframeContainerId;\n\n    this.webauthnStamper = new WebauthnStamper({\n      rpId: rpId ?? window.location.hostname,\n    });\n  }\n\n  public createAccount = async (params: CreateAccountParams) => {\n    this.eventEmitter.emit(\"authenticating\");\n    if (params.type === \"email\") {\n      const { email, expirationSeconds } = params;\n      const publicKey = await this.initIframeStamper();\n\n      const response = await this.request(\"/v1/signup\", {\n        email,\n        targetPublicKey: publicKey,\n        expirationSeconds,\n        redirectParams: params.redirectParams?.toString(),\n      });\n\n      return response;\n    }\n\n    // Passkey account creation flow\n    const { attestation, challenge } = await this.getWebAuthnAttestation(\n      params.creationOpts,\n      { username: params.username }\n    );\n\n    const result = await this.request(\"/v1/signup\", {\n      passkey: {\n        challenge: base64UrlEncode(challenge),\n        attestation,\n      },\n    });\n\n    this.user = {\n      orgId: result.orgId,\n      address: result.address!,\n      userId: result.userId!,\n      credentialId: attestation.credentialId,\n    };\n    this.initWebauthnStamper(this.user);\n    this.eventEmitter.emit(\"connectedPasskey\", this.user);\n\n    return result;\n  };\n\n  public initEmailAuth = async (\n    params: Omit<EmailAuthParams, \"targetPublicKey\">\n  ) => {\n    this.eventEmitter.emit(\"authenticating\");\n    const { email, expirationSeconds } = params;\n    const publicKey = await this.initIframeStamper();\n\n    return this.request(\"/v1/auth\", {\n      email,\n      targetPublicKey: publicKey,\n      expirationSeconds,\n      redirectParams: params.redirectParams?.toString(),\n    });\n  };\n\n  public completeEmailAuth = async ({\n    bundle,\n    orgId,\n  }: {\n    bundle: string;\n    orgId: string;\n  }) => {\n    this.eventEmitter.emit(\"authenticating\");\n    await this.initIframeStamper();\n\n    const result = await this.iframeStamper.injectCredentialBundle(bundle);\n\n    if (!result) {\n      throw new Error(\"Failed to inject credential bundle\");\n    }\n\n    const user = await this.whoami(orgId);\n    this.eventEmitter.emit(\"connectedEmail\", user, bundle);\n\n    return user;\n  };\n\n  public lookupUserWithPasskey = async (user: User | undefined = undefined) => {\n    this.eventEmitter.emit(\"authenticating\");\n    await this.initWebauthnStamper(user);\n    if (user) {\n      this.user = user;\n      return user;\n    }\n\n    const result = await this.whoami(this.rootOrg);\n    await this.initWebauthnStamper(result);\n    this.eventEmitter.emit(\"connectedPasskey\", result);\n\n    return result;\n  };\n\n  public exportWallet = async ({\n    iframeContainerId,\n    iframeElementId = \"turnkey-export-iframe\",\n  }: ExportWalletParams) => {\n    const exportWalletIframeStamper = new IframeStamper({\n      iframeContainer: document.getElementById(iframeContainerId),\n      iframeElementId: iframeElementId,\n      iframeUrl: \"https://export.turnkey.com\",\n    });\n    await exportWalletIframeStamper.init();\n\n    if (this.turnkeyClient.stamper === this.iframeStamper) {\n      return this.exportWalletInner({\n        exportStamper: exportWalletIframeStamper,\n        exportAs: \"SEED_PHRASE\",\n      });\n    }\n\n    return this.exportWalletInner({\n      exportStamper: exportWalletIframeStamper,\n      exportAs: \"PRIVATE_KEY\",\n    });\n  };\n\n  public disconnect = async () => {\n    this.user = undefined;\n    this.iframeStamper.clear();\n  };\n\n  private initIframeStamper = async () => {\n    if (!this.iframeStamper.publicKey()) {\n      await this.iframeStamper.init();\n    }\n\n    this.setStamper(this.iframeStamper);\n\n    return this.iframeStamper.publicKey()!;\n  };\n\n  private initWebauthnStamper = async (user: User | undefined = this.user) => {\n    this.setStamper(this.webauthnStamper);\n    if (user && user.credentialId) {\n      // The goal here is to allow us to cache the allowed credential, but this doesn't work with hybrid transport :(\n      this.webauthnStamper.allowCredentials = [\n        {\n          id: Buffer.from(user.credentialId, \"base64\"),\n          type: \"public-key\",\n          transports: [\"internal\", \"hybrid\"],\n        },\n      ];\n    }\n  };\n\n  protected getWebAuthnAttestation = async (\n    options?: CredentialCreationOptionOverrides,\n    userDetails: { username: string } = {\n      username: this.user?.email ?? \"anonymous\",\n    }\n  ) => {\n    const challenge = generateRandomBuffer();\n    const authenticatorUserId = generateRandomBuffer();\n\n    const attestation = await getWebAuthnAttestation({\n      publicKey: {\n        ...options?.publicKey,\n        authenticatorSelection: {\n          residentKey: \"preferred\",\n          requireResidentKey: false,\n          userVerification: \"preferred\",\n          ...options?.publicKey?.authenticatorSelection,\n        },\n        challenge,\n        rp: {\n          id: window.location.hostname,\n          name: window.location.hostname,\n          ...options?.publicKey?.rp,\n        },\n        pubKeyCredParams: [\n          {\n            type: \"public-key\",\n            alg: -7,\n          },\n          {\n            type: \"public-key\",\n            alg: -257,\n          },\n        ],\n        user: {\n          id: authenticatorUserId,\n          name: userDetails.username,\n          displayName: userDetails.username,\n          ...options?.publicKey?.user,\n        },\n      },\n      signal: options?.signal,\n    });\n\n    // on iOS sometimes this is returned as empty or null, so handling that here\n    if (attestation.transports == null || attestation.transports.length === 0) {\n      attestation.transports = [\n        \"AUTHENTICATOR_TRANSPORT_INTERNAL\",\n        \"AUTHENTICATOR_TRANSPORT_HYBRID\",\n      ];\n    }\n\n    return { challenge, authenticatorUserId, attestation };\n  };\n}\n"]}