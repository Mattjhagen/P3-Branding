import { type ConnectionConfig } from "@alchemy/aa-core";
import { TurnkeyClient } from "@turnkey/http";
import EventEmitter from "eventemitter3";
import type { Hex } from "viem";
import type { AlchemySignerClientEvents, CreateAccountParams, EmailAuthParams, GetWebAuthnAttestationResult, SignerBody, SignerResponse, SignupResponse, User } from "./types";
export interface BaseSignerClientParams {
    stamper: TurnkeyClient["stamper"];
    connection: ConnectionConfig;
    rootOrgId?: string;
    rpId?: string;
}
export type ExportWalletStamper = TurnkeyClient["stamper"] & {
    injectWalletExportBundle(bundle: string): Promise<boolean>;
    injectKeyExportBundle(bundle: string): Promise<boolean>;
    publicKey(): string | null;
};
export declare abstract class BaseSignerClient<TExportWalletParams = unknown> {
    private _user;
    private connectionConfig;
    protected turnkeyClient: TurnkeyClient;
    protected rootOrg: string;
    protected eventEmitter: EventEmitter<AlchemySignerClientEvents>;
    constructor(params: BaseSignerClientParams);
    protected get user(): User | undefined;
    protected set user(user: User | undefined);
    protected setStamper(stamper: TurnkeyClient["stamper"]): void;
    protected exportWalletInner(params: {
        exportStamper: ExportWalletStamper;
        exportAs: "SEED_PHRASE" | "PRIVATE_KEY";
    }): Promise<boolean>;
    abstract createAccount(params: CreateAccountParams): Promise<SignupResponse>;
    abstract initEmailAuth(params: Omit<EmailAuthParams, "targetPublicKey">): Promise<{
        orgId: string;
    }>;
    abstract completeEmailAuth(params: {
        bundle: string;
        orgId: string;
    }): Promise<User>;
    abstract disconnect(): Promise<void>;
    abstract exportWallet(params: TExportWalletParams): Promise<boolean>;
    abstract lookupUserWithPasskey(user?: User): Promise<User>;
    protected abstract getWebAuthnAttestation(options: CredentialCreationOptions, userDetails?: {
        username: string;
    }): Promise<GetWebAuthnAttestationResult>;
    on: <E extends keyof AlchemySignerClientEvents>(event: E, listener: AlchemySignerClientEvents[E]) => () => EventEmitter<AlchemySignerClientEvents, any>;
    addPasskey: (options: CredentialCreationOptions) => Promise<string[]>;
    whoami: (orgId?: string | undefined) => Promise<User>;
    lookupUserByEmail: (email: string) => Promise<{
        orgId: string | null;
    }>;
    signRawMessage: (msg: Hex) => Promise<`0x${string}`>;
    getUser: () => User | null;
    request: <R extends "/v1/signup" | "/v1/whoami" | "/v1/auth" | "/v1/lookup" | "/v1/sign-payload">(route: R, body: SignerBody<R>) => Promise<SignerResponse<R>>;
    private exportAsSeedPhrase;
    private exportAsPrivateKey;
    protected pollActivityCompletion: <T extends "createOrganizationResult" | "createAuthenticatorsResult" | "createUsersResult" | "createPrivateKeysResult" | "createInvitationsResult" | "acceptInvitationResult" | "signRawPayloadResult" | "createPolicyResult" | "disablePrivateKeyResult" | "deleteUsersResult" | "deleteAuthenticatorsResult" | "deleteInvitationResult" | "deleteOrganizationResult" | "deletePolicyResult" | "createUserTagResult" | "deleteUserTagsResult" | "signTransactionResult" | "deleteApiKeysResult" | "createApiKeysResult" | "createPrivateKeyTagResult" | "deletePrivateKeyTagsResult" | "setPaymentMethodResult" | "activateBillingTierResult" | "deletePaymentMethodResult" | "createApiOnlyUsersResult" | "updateRootQuorumResult" | "updateUserTagResult" | "updatePrivateKeyTagResult" | "createSubOrganizationResult" | "updateAllowedOriginsResult" | "createPrivateKeysResultV2" | "updateUserResult" | "updatePolicyResult" | "createSubOrganizationResultV3" | "createWalletResult" | "createWalletAccountsResult" | "initUserEmailRecoveryResult" | "recoverUserResult" | "setOrganizationFeatureResult" | "removeOrganizationFeatureResult" | "exportPrivateKeyResult" | "exportWalletResult" | "createSubOrganizationResultV4" | "emailAuthResult" | "exportWalletAccountResult">(activity: Awaited<ReturnType<(typeof this.turnkeyClient)["getActivity"]>>["activity"], organizationId: string, resultKey: T) => Promise<NonNullable<{
        createOrganizationResult?: {
            organizationId: string;
        } | undefined;
        createAuthenticatorsResult?: {
            authenticatorIds: string[];
        } | undefined;
        createUsersResult?: {
            userIds: string[];
        } | undefined;
        createPrivateKeysResult?: {
            privateKeyIds: string[];
        } | undefined;
        createInvitationsResult?: {
            invitationIds: string[];
        } | undefined;
        acceptInvitationResult?: {
            invitationId: string;
            userId: string;
        } | undefined;
        signRawPayloadResult?: {
            r: string;
            s: string;
            v: string;
        } | undefined;
        createPolicyResult?: {
            policyId: string;
        } | undefined;
        disablePrivateKeyResult?: {
            privateKeyId: string;
        } | undefined;
        deleteUsersResult?: {
            userIds: string[];
        } | undefined;
        deleteAuthenticatorsResult?: {
            authenticatorIds: string[];
        } | undefined;
        deleteInvitationResult?: {
            invitationId: string;
        } | undefined;
        deleteOrganizationResult?: {
            organizationId: string;
        } | undefined;
        deletePolicyResult?: {
            policyId: string;
        } | undefined;
        createUserTagResult?: {
            userTagId: string;
            userIds: string[];
        } | undefined;
        deleteUserTagsResult?: {
            userTagIds: string[];
            userIds: string[];
        } | undefined;
        signTransactionResult?: {
            signedTransaction: string;
        } | undefined;
        deleteApiKeysResult?: {
            apiKeyIds: string[];
        } | undefined;
        createApiKeysResult?: {
            apiKeyIds: string[];
        } | undefined;
        createPrivateKeyTagResult?: {
            privateKeyTagId: string;
            privateKeyIds: string[];
        } | undefined;
        deletePrivateKeyTagsResult?: {
            privateKeyTagIds: string[];
            privateKeyIds: string[];
        } | undefined;
        setPaymentMethodResult?: {
            lastFour: string;
            cardHolderName: string;
            cardHolderEmail: string;
        } | undefined;
        activateBillingTierResult?: {
            productId: string;
        } | undefined;
        deletePaymentMethodResult?: {
            paymentMethodId: string;
        } | undefined;
        createApiOnlyUsersResult?: {
            userIds: string[];
        } | undefined;
        updateRootQuorumResult?: {
            [key: string]: unknown;
        } | undefined;
        updateUserTagResult?: {
            userTagId: string;
        } | undefined;
        updatePrivateKeyTagResult?: {
            privateKeyTagId: string;
        } | undefined;
        createSubOrganizationResult?: {
            subOrganizationId: string;
        } | undefined;
        updateAllowedOriginsResult?: {
            [key: string]: unknown;
        } | undefined;
        createPrivateKeysResultV2?: {
            privateKeys: {
                privateKeyId?: string | undefined;
                addresses?: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | undefined;
                    address?: string | undefined;
                }[] | undefined;
            }[];
        } | undefined;
        updateUserResult?: {
            userId: string;
        } | undefined;
        updatePolicyResult?: {
            policyId: string;
        } | undefined;
        createSubOrganizationResultV3?: {
            subOrganizationId: string;
            privateKeys: {
                privateKeyId?: string | undefined;
                addresses?: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | undefined;
                    address?: string | undefined;
                }[] | undefined;
            }[];
        } | undefined;
        createWalletResult?: {
            walletId: string;
            addresses: string[];
        } | undefined;
        createWalletAccountsResult?: {
            addresses: string[];
        } | undefined;
        initUserEmailRecoveryResult?: {
            userId: string;
        } | undefined;
        recoverUserResult?: {
            authenticatorId: string[];
        } | undefined;
        setOrganizationFeatureResult?: {
            features: {
                name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | undefined;
                value?: string | undefined;
            }[];
        } | undefined;
        removeOrganizationFeatureResult?: {
            features: {
                name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | undefined;
                value?: string | undefined;
            }[];
        } | undefined;
        exportPrivateKeyResult?: {
            privateKeyId: string;
            exportBundle: string;
        } | undefined;
        exportWalletResult?: {
            walletId: string;
            exportBundle: string;
        } | undefined;
        createSubOrganizationResultV4?: {
            subOrganizationId: string;
            wallet?: {
                walletId: string;
                addresses: string[];
            } | undefined;
        } | undefined;
        emailAuthResult?: {
            userId: string;
            apiKeyId: string;
        } | undefined;
        exportWalletAccountResult?: {
            address: string;
            exportBundle: string;
        } | undefined;
    }[T]>>;
}
