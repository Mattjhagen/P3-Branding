"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemySignerWebClient = exports.AlchemySignerClientParamsSchema = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const http_1 = require("@turnkey/http");
const iframe_stamper_1 = require("@turnkey/iframe-stamper");
const webauthn_stamper_1 = require("@turnkey/webauthn-stamper");
const zod_1 = require("zod");
const base64UrlEncode_js_1 = require("../utils/base64UrlEncode.js");
const generateRandomBuffer_js_1 = require("../utils/generateRandomBuffer.js");
const base_js_1 = require("./base.js");
exports.AlchemySignerClientParamsSchema = zod_1.z.object({
    connection: aa_core_1.ConnectionConfigSchema,
    iframeConfig: zod_1.z.object({
        iframeElementId: zod_1.z.string().default("turnkey-iframe"),
        iframeContainerId: zod_1.z.string(),
    }),
    rpId: zod_1.z.string().optional(),
    rootOrgId: zod_1.z
        .string()
        .optional()
        .default("24c1acf5-810f-41e0-a503-d5d13fa8e830"),
});
class AlchemySignerWebClient extends base_js_1.BaseSignerClient {
    constructor(params) {
        const { connection, iframeConfig, rpId, rootOrgId } = exports.AlchemySignerClientParamsSchema.parse(params);
        const iframeStamper = new iframe_stamper_1.IframeStamper({
            iframeElementId: iframeConfig.iframeElementId,
            iframeUrl: "https://auth.turnkey.com",
            iframeContainer: document.getElementById(iframeConfig.iframeContainerId),
        });
        super({
            connection,
            rootOrgId,
            stamper: iframeStamper,
        });
        Object.defineProperty(this, "iframeStamper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "webauthnStamper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "iframeContainerId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "createAccount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                this.eventEmitter.emit("authenticating");
                if (params.type === "email") {
                    const { email, expirationSeconds } = params;
                    const publicKey = await this.initIframeStamper();
                    const response = await this.request("/v1/signup", {
                        email,
                        targetPublicKey: publicKey,
                        expirationSeconds,
                        redirectParams: params.redirectParams?.toString(),
                    });
                    return response;
                }
                const { attestation, challenge } = await this.getWebAuthnAttestation(params.creationOpts, { username: params.username });
                const result = await this.request("/v1/signup", {
                    passkey: {
                        challenge: (0, base64UrlEncode_js_1.base64UrlEncode)(challenge),
                        attestation,
                    },
                });
                this.user = {
                    orgId: result.orgId,
                    address: result.address,
                    userId: result.userId,
                    credentialId: attestation.credentialId,
                };
                this.initWebauthnStamper(this.user);
                this.eventEmitter.emit("connectedPasskey", this.user);
                return result;
            }
        });
        Object.defineProperty(this, "initEmailAuth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (params) => {
                this.eventEmitter.emit("authenticating");
                const { email, expirationSeconds } = params;
                const publicKey = await this.initIframeStamper();
                return this.request("/v1/auth", {
                    email,
                    targetPublicKey: publicKey,
                    expirationSeconds,
                    redirectParams: params.redirectParams?.toString(),
                });
            }
        });
        Object.defineProperty(this, "completeEmailAuth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async ({ bundle, orgId, }) => {
                this.eventEmitter.emit("authenticating");
                await this.initIframeStamper();
                const result = await this.iframeStamper.injectCredentialBundle(bundle);
                if (!result) {
                    throw new Error("Failed to inject credential bundle");
                }
                const user = await this.whoami(orgId);
                this.eventEmitter.emit("connectedEmail", user, bundle);
                return user;
            }
        });
        Object.defineProperty(this, "lookupUserWithPasskey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (user = undefined) => {
                this.eventEmitter.emit("authenticating");
                await this.initWebauthnStamper(user);
                if (user) {
                    this.user = user;
                    return user;
                }
                const result = await this.whoami(this.rootOrg);
                await this.initWebauthnStamper(result);
                this.eventEmitter.emit("connectedPasskey", result);
                return result;
            }
        });
        Object.defineProperty(this, "exportWallet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async ({ iframeContainerId, iframeElementId = "turnkey-export-iframe", }) => {
                const exportWalletIframeStamper = new iframe_stamper_1.IframeStamper({
                    iframeContainer: document.getElementById(iframeContainerId),
                    iframeElementId: iframeElementId,
                    iframeUrl: "https://export.turnkey.com",
                });
                await exportWalletIframeStamper.init();
                if (this.turnkeyClient.stamper === this.iframeStamper) {
                    return this.exportWalletInner({
                        exportStamper: exportWalletIframeStamper,
                        exportAs: "SEED_PHRASE",
                    });
                }
                return this.exportWalletInner({
                    exportStamper: exportWalletIframeStamper,
                    exportAs: "PRIVATE_KEY",
                });
            }
        });
        Object.defineProperty(this, "disconnect", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                this.user = undefined;
                this.iframeStamper.clear();
            }
        });
        Object.defineProperty(this, "initIframeStamper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => {
                if (!this.iframeStamper.publicKey()) {
                    await this.iframeStamper.init();
                }
                this.setStamper(this.iframeStamper);
                return this.iframeStamper.publicKey();
            }
        });
        Object.defineProperty(this, "initWebauthnStamper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (user = this.user) => {
                this.setStamper(this.webauthnStamper);
                if (user && user.credentialId) {
                    this.webauthnStamper.allowCredentials = [
                        {
                            id: Buffer.from(user.credentialId, "base64"),
                            type: "public-key",
                            transports: ["internal", "hybrid"],
                        },
                    ];
                }
            }
        });
        Object.defineProperty(this, "getWebAuthnAttestation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options, userDetails = {
                username: this.user?.email ?? "anonymous",
            }) => {
                const challenge = (0, generateRandomBuffer_js_1.generateRandomBuffer)();
                const authenticatorUserId = (0, generateRandomBuffer_js_1.generateRandomBuffer)();
                const attestation = await (0, http_1.getWebAuthnAttestation)({
                    publicKey: {
                        ...options?.publicKey,
                        authenticatorSelection: {
                            residentKey: "preferred",
                            requireResidentKey: false,
                            userVerification: "preferred",
                            ...options?.publicKey?.authenticatorSelection,
                        },
                        challenge,
                        rp: {
                            id: window.location.hostname,
                            name: window.location.hostname,
                            ...options?.publicKey?.rp,
                        },
                        pubKeyCredParams: [
                            {
                                type: "public-key",
                                alg: -7,
                            },
                            {
                                type: "public-key",
                                alg: -257,
                            },
                        ],
                        user: {
                            id: authenticatorUserId,
                            name: userDetails.username,
                            displayName: userDetails.username,
                            ...options?.publicKey?.user,
                        },
                    },
                    signal: options?.signal,
                });
                if (attestation.transports == null || attestation.transports.length === 0) {
                    attestation.transports = [
                        "AUTHENTICATOR_TRANSPORT_INTERNAL",
                        "AUTHENTICATOR_TRANSPORT_HYBRID",
                    ];
                }
                return { challenge, authenticatorUserId, attestation };
            }
        });
        this.iframeStamper = iframeStamper;
        this.iframeContainerId = iframeConfig.iframeContainerId;
        this.webauthnStamper = new webauthn_stamper_1.WebauthnStamper({
            rpId: rpId ?? window.location.hostname,
        });
    }
}
exports.AlchemySignerWebClient = AlchemySignerWebClient;
//# sourceMappingURL=index.js.map