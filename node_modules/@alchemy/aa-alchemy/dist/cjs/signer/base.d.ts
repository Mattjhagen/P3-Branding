import { type SmartAccountAuthenticator } from "@alchemy/aa-core";
import { type CustomSource, type Hex, type LocalAccount, type SignableMessage, type TypedData, type TypedDataDefinition } from "viem";
import type { BaseSignerClient } from "./client/base";
import type { User } from "./client/types";
import { type SessionManagerParams } from "./session/manager.js";
import type { AuthParams } from "./signer";
import { type AlchemySignerEvents } from "./types.js";
export interface BaseAlchemySignerParams<TClient extends BaseSignerClient> {
    client: TClient;
    sessionConfig?: Omit<SessionManagerParams, "client">;
}
export declare abstract class BaseAlchemySigner<TClient extends BaseSignerClient> implements SmartAccountAuthenticator<AuthParams, User, TClient> {
    signerType: string;
    inner: TClient;
    private sessionManager;
    private store;
    constructor({ client, sessionConfig }: BaseAlchemySignerParams<TClient>);
    on: <E extends keyof AlchemySignerEvents>(event: E, listener: AlchemySignerEvents[E]) => () => void;
    authenticate: (params: AuthParams) => Promise<User>;
    disconnect: () => Promise<void>;
    getAuthDetails: () => Promise<User>;
    getAddress: () => Promise<`0x${string}`>;
    signMessage: (msg: SignableMessage) => Promise<`0x${string}`>;
    signTypedData: <const TTypedData extends TypedData | {
        [key: string]: unknown;
    }, TPrimaryType extends keyof TTypedData | "EIP712Domain" = keyof TTypedData>(params: TypedDataDefinition<TTypedData, TPrimaryType>) => Promise<Hex>;
    signTransaction: CustomSource["signTransaction"];
    getUser: (email: string) => Promise<{
        orgId: string;
    } | null>;
    addPasskey: (params?: CredentialCreationOptions) => Promise<string[]>;
    exportWallet: (params: Parameters<(typeof this.inner)["exportWallet"]>[0]) => Promise<boolean>;
    toViemAccount: () => LocalAccount;
    private authenticateWithEmail;
    private authenticateWithPasskey;
    private registerListeners;
}
