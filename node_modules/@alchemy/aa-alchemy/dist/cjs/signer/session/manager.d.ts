import EventEmitter from "eventemitter3";
import { z } from "zod";
import type { BaseSignerClient } from "../client/base";
import type { User } from "../client/types";
import type { SessionManagerEvents } from "./types";
export declare const DEFAULT_SESSION_MS: number;
export declare const SessionManagerParamsSchema: z.ZodObject<{
    sessionKey: z.ZodDefault<z.ZodString>;
    storage: z.ZodUnion<[z.ZodDefault<z.ZodEnum<["localStorage", "sessionStorage"]>>, z.ZodType<Storage, z.ZodTypeDef, Storage>]>;
    expirationTimeMs: z.ZodDefault<z.ZodNumber>;
    client: z.ZodType<BaseSignerClient<unknown>, z.ZodTypeDef, BaseSignerClient<unknown>>;
}, "strip", z.ZodTypeAny, {
    client: BaseSignerClient<unknown>;
    sessionKey: string;
    storage: ("localStorage" | "sessionStorage" | Storage) & ("localStorage" | "sessionStorage" | Storage | undefined);
    expirationTimeMs: number;
}, {
    client: BaseSignerClient<unknown>;
    sessionKey?: string | undefined;
    storage?: "localStorage" | "sessionStorage" | Storage | undefined;
    expirationTimeMs?: number | undefined;
}>;
export type SessionManagerParams = z.input<typeof SessionManagerParamsSchema>;
export declare class SessionManager {
    private sessionKey;
    private client;
    private eventEmitter;
    readonly expirationTimeMs: number;
    private store;
    constructor(params: SessionManagerParams);
    getSessionUser: () => Promise<User | null>;
    clearSession: () => void;
    setTemporarySession: (session: {
        orgId: string;
    }) => void;
    getTemporarySession: () => {
        orgId: string;
    } | null;
    on: <E extends keyof SessionManagerEvents>(event: E, listener: SessionManagerEvents[E]) => () => EventEmitter<SessionManagerEvents, any>;
    private getSession;
    private setSession;
    initialize(): void;
    private getInitialState;
    private registerEventListeners;
}
