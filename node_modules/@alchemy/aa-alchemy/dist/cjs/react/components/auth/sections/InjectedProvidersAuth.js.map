{"version":3,"file":"InjectedProvidersAuth.js","sourceRoot":"","sources":["../../../../../../src/react/components/auth/sections/InjectedProvidersAuth.tsx"],"names":[],"mappings":";;;;AACA,4DAAsD;AACtD,gEAA0D;AAC1D,+CAAyC;AACzC,8CAA+C;AAGxC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,sBAAQ,GAAE,CAAC;IAC7B,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,IAAA,0BAAU,EAAC;QACzC,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;YAE1B,WAAW,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,SAAsB,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,SAAS,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;YAC3C,IAAI,KAAK,EAAE,CAAC;gBAEV,WAAW,CAAC;oBACV,IAAI,EAAE,aAAa;oBACnB,SAAS,EAAE,SAAsB;oBACjC,KAAK;iBACN,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,WAAW,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QACpC,CAAC;KACF,CAAC,CAAC;IACH,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,2BAAc,GAAE,CAAC;IAEzC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CACL,gCAAK,SAAS,EAAC,+BAA+B,YAC3C,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YAC5B,OAAO,CACL,uBAAC,kBAAM,IACL,OAAO,EAAC,QAAQ,EAEhB,IAAI,EACF,SAAS,CAAC,IAAI,IAAI,CAChB,gCACE,GAAG,EAAE,SAAS,CAAC,IAAI,EACnB,GAAG,EAAE,SAAS,CAAC,IAAI,EACnB,MAAM,EAAE,EAAE,EACV,KAAK,EAAE,EAAE,GACT,CACH,EAEH,OAAO,EAAE,GAAG,EAAE;oBACZ,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;oBAC1C,WAAW,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC,CAAC;gBAClD,CAAC,YAEA,SAAS,CAAC,IAAI,IAhBV,SAAS,CAAC,EAAE,CAiBV,CACV,CAAC;QACJ,CAAC,CAAC,GACE,CACP,CAAC;AACJ,CAAC,CAAC;AAvDW,QAAA,qBAAqB,yBAuDhC","sourcesContent":["import type { Connector } from \"@wagmi/core\";\nimport { useChain } from \"../../../hooks/useChain.js\";\nimport { useConnect } from \"../../../hooks/useConnect.js\";\nimport { Button } from \"../../button.js\";\nimport { useAuthContext } from \"../context.js\";\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport const InjectedProvidersAuth = () => {\n  const { chain } = useChain();\n  const { connectors, connect } = useConnect({\n    onMutate: ({ connector }) => {\n      // This typecast is ok because the only way this is called is with a Connector (see below)\n      setAuthStep({ type: \"eoa_connect\", connector: connector as Connector });\n    },\n    onSettled: (_result, error, { connector }) => {\n      if (error) {\n        // This typecast is ok because the only way this is called is with a Connector (see below)\n        setAuthStep({\n          type: \"eoa_connect\",\n          connector: connector as Connector,\n          error,\n        });\n        return;\n      }\n\n      setAuthStep({ type: \"complete\" });\n    },\n  });\n  const { setAuthStep } = useAuthContext();\n\n  if (!connectors.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex flex-row gap-2 flex-wrap\">\n      {connectors.map((connector) => {\n        return (\n          <Button\n            variant=\"social\"\n            key={connector.id}\n            icon={\n              connector.icon && (\n                <img\n                  src={connector.icon}\n                  alt={connector.name}\n                  height={20}\n                  width={20}\n                />\n              )\n            }\n            onClick={() => {\n              connect({ connector, chainId: chain.id });\n              setAuthStep({ type: \"eoa_connect\", connector });\n            }}\n          >\n            {connector.name}\n          </Button>\n        );\n      })}\n    </div>\n  );\n};\n"]}