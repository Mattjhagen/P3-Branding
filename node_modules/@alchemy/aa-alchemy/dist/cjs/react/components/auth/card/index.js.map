{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/react/components/auth/card/index.tsx"],"names":[],"mappings":";;;;AAAA,iCAA8E;AAC9E,0EAAoE;AACpE,qDAAkD;AAClD,8CAA+C;AAE/C,yCAAkC;AAClC,2DAAqD;AACrD,oEAA8D;AAC9D,uDAAiD;AACjD,oEAA8D;AAsBvD,MAAM,QAAQ,GAAG,CACtB,KAAwE,EACxE,EAAE;IACF,MAAM,EAAE,SAAS,GAAG,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IAC9D,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,8BAAY,GAAE,CAAC;IAC1C,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,oCAAe,GAAE,CAAC;IACvD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAA,2BAAc,GAAE,CAAC;IACnD,MAAM,KAAK,GAAG,IAAA,8BAAY,GAAE,CAAC;IAG7B,MAAM,SAAS,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC7B,OAAO,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,MAAM,MAAM,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QAC9B,QAAQ,QAAQ,CAAC,IAAI,EAAE,CAAC;YACtB,KAAK,cAAc;gBACjB,WAAW,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;gBACjC,MAAM;YACR;gBACE,OAAO,CAAC,IAAI,CAAC,qCAAqC,EAAE,QAAQ,CAAC,CAAC;QAClE,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IAE5B,IAAA,uBAAe,EAAC,GAAG,EAAE;QACnB,IAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YACjC,aAAa,EAAE,EAAE,CAAC;QACpB,CAAC;aAAM,IAAI,gBAAgB,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC3D,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAE9D,WAAW,CAAC;gBACV,IAAI,EAAE,kBAAkB;gBACxB,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC,2BAAY,CAAC,KAAK,MAAM;aAC3D,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IAErE,OAAO,CACL,iCAAK,SAAS,EAAC,UAAU,aACvB,gCACE,EAAE,EAAC,8BAA8B,EACjC,SAAS,EAAC,yCAAyC,YAElD,CAAC,SAAS,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,IAAI,CACvC,uBAAC,8BAAY,IAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,EAAC,OAAO,GAAG,CACtD,GACG,EACN,iCAAK,SAAS,EAAC,qEAAqE,aACjF,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAC3B,uBAAC,0BAAU,IACT,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,SAAS,EACnB,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,cAAc,GACvB,CACH,EACD,uBAAC,eAAI,OAAK,KAAK,GAAI,IACf,IACF,CACP,CAAC;AACJ,CAAC,CAAC;AA5DW,QAAA,QAAQ,YA4DnB","sourcesContent":["import { useCallback, useLayoutEffect, useMemo, type ReactNode } from \"react\";\nimport { useSignerStatus } from \"../../../hooks/useSignerStatus.js\";\nimport { IS_SIGNUP_QP } from \"../../constants.js\";\nimport { useAuthContext } from \"../context.js\";\nimport type { AuthType } from \"../types.js\";\nimport { Step } from \"./steps.js\";\nimport { Notification } from \"../../notification.js\";\nimport { useAuthError } from \"../../../hooks/useAuthError.js\";\nimport { Navigation } from \"../../navigation.js\";\nimport { useAuthModal } from \"../../../hooks/useAuthModal.js\";\n\nexport type AuthCardProps = {\n  hideError?: boolean;\n  header?: ReactNode;\n  showSignInText?: boolean;\n  // Each section can contain multiple auth types which will be grouped together\n  // and separated by an OR divider\n  sections?: AuthType[][];\n  className?: string;\n  onAuthSuccess?: () => void;\n};\n\n/**\n * React component containing an Auth view with configured auth methods\n *\n * @param props Card Props\n * @param props.header optional header for the card (good place to put your app name or logo)\n * @param props.showSignInText optional boolean to show the sign in text (defaults to true)\n * @param props.sections array of sections, each containing an array of auth types\n * @returns a react component containing the AuthCard\n */\nexport const AuthCard = (\n  props: AuthCardProps & { showNavigation?: boolean; showClose?: boolean }\n) => {\n  const { showClose = false, onAuthSuccess, hideError } = props;\n  const { closeAuthModal } = useAuthModal();\n  const { status, isAuthenticating } = useSignerStatus();\n  const { authStep, setAuthStep } = useAuthContext();\n  const error = useAuthError();\n\n  // TODO: Finalize the steps that allow going back\n  const canGoBack = useMemo(() => {\n    return [\"email_verify\"].includes(authStep.type);\n  }, [authStep]);\n\n  const onBack = useCallback(() => {\n    switch (authStep.type) {\n      case \"email_verify\":\n        setAuthStep({ type: \"initial\" });\n        break;\n      default:\n        console.warn(\"Unhandled back action for auth step\", authStep);\n    }\n  }, [authStep, setAuthStep]);\n\n  useLayoutEffect(() => {\n    if (authStep.type === \"complete\") {\n      onAuthSuccess?.();\n    } else if (isAuthenticating && authStep.type === \"initial\") {\n      const urlParams = new URLSearchParams(window.location.search);\n\n      setAuthStep({\n        type: \"email_completing\",\n        createPasskeyAfter: urlParams.get(IS_SIGNUP_QP) === \"true\",\n      });\n    }\n  }, [authStep, status, isAuthenticating, setAuthStep, onAuthSuccess]);\n\n  return (\n    <div className=\"relative\">\n      <div\n        id=\"akui-default-error-container\"\n        className=\"absolute bottom-[calc(100%+8px)] w-full\"\n      >\n        {!hideError && error && error.message && (\n          <Notification message={error.message} type=\"error\" />\n        )}\n      </div>\n      <div className=\"modal-box relative flex flex-col items-center gap-5 text-fg-primary\">\n        {(canGoBack || showClose) && (\n          <Navigation\n            showClose={showClose}\n            showBack={canGoBack}\n            onBack={onBack}\n            onClose={closeAuthModal}\n          />\n        )}\n        <Step {...props} />\n      </div>\n    </div>\n  );\n};\n"]}