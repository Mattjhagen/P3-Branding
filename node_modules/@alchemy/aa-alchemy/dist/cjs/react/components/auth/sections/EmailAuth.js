"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailAuth = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_form_1 = require("@tanstack/react-form");
const zod_form_adapter_1 = require("@tanstack/zod-form-adapter");
const zod_1 = require("zod");
const useAuthenticate_js_1 = require("../../../hooks/useAuthenticate.js");
const useSigner_js_1 = require("../../../hooks/useSigner.js");
const chevron_js_1 = require("../../../icons/chevron.js");
const mail_js_1 = require("../../../icons/mail.js");
const button_js_1 = require("../../button.js");
const constants_js_1 = require("../../constants.js");
const input_js_1 = require("../../input.js");
const context_js_1 = require("../context.js");
const strings_js_1 = require("../../../strings.js");
const EmailAuth = ({ hideButton = false, buttonLabel = strings_js_1.ls.login.email.button, placeholder = strings_js_1.ls.login.email.placeholder, }) => {
    const { setAuthStep } = (0, context_js_1.useAuthContext)();
    const signer = (0, useSigner_js_1.useSigner)();
    const { authenticateAsync, isPending } = (0, useAuthenticate_js_1.useAuthenticate)({
        onMutate: async (params) => {
            if ("email" in params) {
                setAuthStep({ type: "email_verify", email: params.email });
            }
        },
        onSuccess: () => {
            setAuthStep({ type: "complete" });
        },
        onError: (error) => {
            console.error(error);
            setAuthStep({ type: "initial" });
        },
    });
    const form = (0, react_form_1.useForm)({
        defaultValues: {
            email: "",
        },
        onSubmit: async ({ value: { email } }) => {
            const existingUser = await signer?.getUser(email);
            const redirectParams = new URLSearchParams();
            if (existingUser == null) {
                redirectParams.set(constants_js_1.IS_SIGNUP_QP, "true");
            }
            await authenticateAsync({ type: "email", email, redirectParams });
        },
        validatorAdapter: zod_form_adapter_1.zodValidator,
    });
    return ((0, jsx_runtime_1.jsx)("form", { onSubmit: (e) => {
            e.stopPropagation();
            e.preventDefault();
            form.handleSubmit();
        }, children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-2 w-full", children: [(0, jsx_runtime_1.jsx)(form.Field, { name: "email", validators: {
                        onChange: zod_1.z.string().email("Must provide a valid email."),
                    }, children: (field) => ((0, jsx_runtime_1.jsx)(input_js_1.Input, { name: field.name, value: field.state.value, onChange: (e) => field.handleChange(e.target.value), onBlur: field.handleBlur, placeholder: placeholder, iconLeft: (0, jsx_runtime_1.jsx)(mail_js_1.MailIcon, {}), iconRight: hideButton ? ((0, jsx_runtime_1.jsx)("button", { type: "submit", className: "match-input cursor-pointer focus:outline-none focus:opacity-25", children: (0, jsx_runtime_1.jsx)(chevron_js_1.ChevronRight, {}) })) : undefined, disabled: isPending })) }), (0, jsx_runtime_1.jsx)(form.Subscribe, { selector: (state) => [
                        state.canSubmit,
                        state.isSubmitting,
                        state.values.email,
                    ], children: ([canSubmit, isSubmitting, email]) => !hideButton ? ((0, jsx_runtime_1.jsx)(button_js_1.Button, { type: "submit", variant: "primary", disabled: Boolean(isPending || !canSubmit || isSubmitting || !email), children: buttonLabel })) : null })] }) }));
};
exports.EmailAuth = EmailAuth;
//# sourceMappingURL=EmailAuth.js.map