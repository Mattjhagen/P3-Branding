"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSignMessage = void 0;
const react_query_1 = require("@tanstack/react-query");
const core_1 = require("@wagmi/core");
const react_1 = require("react");
const wagmi_1 = require("wagmi");
const context_js_1 = require("../context.js");
const errors_js_1 = require("../errors.js");
function useSignMessage({ client, ...mutationArgs }) {
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = (0, context_js_1.useAlchemyAccountContext)();
    const { isConnected } = (0, wagmi_1.useAccount)({ config: wagmiConfig });
    const mutationFn = (0, react_1.useCallback)(async (params) => {
        if (isConnected) {
            return (0, core_1.signMessage)(wagmiConfig, params);
        }
        if (!client) {
            throw new errors_js_1.ClientUndefinedHookError("useSignMessage");
        }
        return client.signMessageWith6492(params);
    }, [client, isConnected, wagmiConfig]);
    const { mutate: signMessage, mutateAsync: signMessageAsync, data: signedMessage, isPending: isSigningMessage, error, } = (0, react_query_1.useMutation)({
        mutationKey: ["signMessage"],
        mutationFn,
        ...mutationArgs,
    }, queryClient);
    return {
        signMessage,
        signMessageAsync,
        signedMessage,
        isSigningMessage,
        error,
    };
}
exports.useSignMessage = useSignMessage;
//# sourceMappingURL=useSignMessage.js.map