{"version":3,"file":"useChain.js","sourceRoot":"","sources":["../../../../src/react/hooks/useChain.ts"],"names":[],"mappings":";;;AAAA,uDAAoD;AACpD,iCAA6C;AAE7C,kEAA4D;AAC5D,kEAAgF;AAChF,sEAAgE;AAChE,8CAAyD;AAiBzD,SAAgB,QAAQ,CAAC,YAA6B;IACpD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,qCAAwB,GAAE,CAAC;IAE9C,MAAM,KAAK,GAAG,IAAA,4BAAoB,EAChC,IAAA,0BAAU,EAAC,MAAM,CAAC,EAClB,GAAG,EAAE,CAAC,IAAA,sBAAQ,EAAC,MAAM,CAAC,EACtB,GAAG,EAAE,CAAC,IAAA,sBAAQ,EAAC,MAAM,CAAC,CACvB,CAAC;IAEF,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAA,yBAAW,EAAC;QAClD,UAAU,EAAE,CAAC,EAAE,KAAK,EAAoB,EAAE,EAAE,CAC1C,IAAA,sBAAgB,EAAC,MAAM,EAAE,KAAK,CAAC;QACjC,GAAG,YAAY;KAChB,CAAC,CAAC;IAEH,OAAO;QACL,KAAK;QACL,QAAQ;QACR,cAAc,EAAE,SAAS;KAC1B,CAAC;AACJ,CAAC;AApBD,4BAoBC","sourcesContent":["import { useMutation } from \"@tanstack/react-query\";\nimport { useSyncExternalStore } from \"react\";\nimport type { Chain } from \"viem\";\nimport { getChain } from \"../../config/actions/getChain.js\";\nimport { setChain as setChainInternal } from \"../../config/actions/setChain.js\";\nimport { watchChain } from \"../../config/actions/watchChain.js\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\n\nexport type UseChainParams = BaseHookMutationArgs<void, { chain: Chain }>;\n\nexport interface UseChainResult {\n  chain: Chain;\n  setChain: (chain: Chain) => void;\n  isSettingChain: boolean;\n}\n\n/**\n * A hook that returns the current chain as well as a function to set the chain\n *\n * @param mutationArgs optional properties which contain mutation arg overrides\n * @returns an object containing the current chain and a function to set the chain as well as loading state of setting the chain\n */\nexport function useChain(mutationArgs?: UseChainParams) {\n  const { config } = useAlchemyAccountContext();\n\n  const chain = useSyncExternalStore(\n    watchChain(config),\n    () => getChain(config),\n    () => getChain(config)\n  );\n\n  const { mutate: setChain, isPending } = useMutation({\n    mutationFn: ({ chain }: { chain: Chain }) =>\n      setChainInternal(config, chain),\n    ...mutationArgs,\n  });\n\n  return {\n    chain,\n    setChain,\n    isSettingChain: isPending,\n  };\n}\n"]}