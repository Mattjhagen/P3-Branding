{"version":3,"file":"useSendTransaction.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSendTransaction.ts"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AAOb,8CAAkE;AAClE,uDAI+B;AAC/B,sCAAuE;AACvE,iCAAuD;AACvD,8CAAyD;AACzD,4CAAwD;AAsCxD,SAAgB,kBAAkB,CAChC,MAA8B;IAE9B,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,CAAC;IAC3C,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,IAAA,qCAAwB,GAAE,CAAC;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,kBAAgB,EAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAElE,MAAM,EACJ,MAAM,EAAE,eAAe,EACvB,WAAW,EAAE,oBAAoB,EACjC,IAAI,EAAE,qBAAqB,EAC3B,SAAS,EAAE,oBAAoB,EAC/B,KAAK,GACN,GAAG,IAAA,yBAAW,EACb;QACE,GAAG,YAAY;QACf,UAAU,EAAE,KAAK,EAAE,MAAiC,EAAE,EAAE;YACtD,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,MAAM,CAAC;gBAC9B,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;oBACf,MAAM,IAAI,wCAA8B,EAAE,CAAC;gBAC7C,CAAC;gBAED,OAAO,IAAA,sBAAqB,EAAC,WAAW,EAAE;oBACxC,EAAE;oBACF,GAAG,GAAG;iBACP,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,oCAAwB,CAAC,oBAAoB,CAAC,CAAC;YAC3D,CAAC;YAED,OAAO,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;KACF,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,eAAe;QACf,oBAAoB;QACpB,qBAAqB;QACrB,oBAAoB;QACpB,KAAK;KACN,CAAC;AACJ,CAAC;AAnDD,gDAmDC","sourcesContent":["\"use client\";\n\nimport type {\n  SendTransactionParameters,\n  SendTransactionReturnType,\n} from \"viem\";\n\nimport { TransactionMissingToParamError } from \"@alchemy/aa-core\";\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { sendTransaction as wagmi_sendTransaction } from \"@wagmi/core\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { type UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type UseSendTransactionMutationArgs = BaseHookMutationArgs<\n  SendTransactionReturnType,\n  SendTransactionParameters\n>;\n\nexport type UseSendTransactionArgs = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseSendTransactionMutationArgs;\n\nexport type UseSendTransactionResult = {\n  sendTransaction: UseMutateFunction<\n    SendTransactionReturnType,\n    Error,\n    SendTransactionParameters,\n    unknown\n  >;\n  sendTransactionAsync: UseMutateAsyncFunction<\n    SendTransactionReturnType,\n    Error,\n    SendTransactionParameters,\n    unknown\n  >;\n  sendTransactionResult: SendTransactionReturnType | undefined;\n  isSendingTransaction: boolean;\n  error: Error | null;\n};\n\n/**\n * @deprecated use useSendUserOperation instead\n * Send a TX request as a user operation and wait for it to be mined\n *\n * @param params - see {@link UseSendUserOperationArgs}\n * @returns functions and state for sending txs {@link UseSendTransactionResult}\n */\nexport function useSendTransaction(\n  params: UseSendTransactionArgs\n): UseSendTransactionResult {\n  const { client, ...mutationArgs } = params;\n  const {\n    queryClient,\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n  const { isConnected } = wagmi_useAccount({ config: wagmiConfig });\n\n  const {\n    mutate: sendTransaction,\n    mutateAsync: sendTransactionAsync,\n    data: sendTransactionResult,\n    isPending: isSendingTransaction,\n    error,\n  } = useMutation(\n    {\n      ...mutationArgs,\n      mutationFn: async (params: SendTransactionParameters) => {\n        if (isConnected) {\n          const { to, ...txn } = params;\n          if (to == null) {\n            throw new TransactionMissingToParamError();\n          }\n\n          return wagmi_sendTransaction(wagmiConfig, {\n            to,\n            ...txn,\n          });\n        }\n\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useSendTransaction\");\n        }\n\n        return client.sendTransaction(params);\n      },\n    },\n    queryClient\n  );\n\n  return {\n    sendTransaction,\n    sendTransactionAsync,\n    sendTransactionResult,\n    isSendingTransaction,\n    error,\n  };\n}\n"]}