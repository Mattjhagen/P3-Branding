{"version":3,"file":"useSignTypedData.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSignTypedData.ts"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AAEb,uDAI+B;AAC/B,sCAAmE;AAEnE,iCAAuD;AACvD,8CAAyD;AACzD,4CAAwD;AA4BxD,SAAgB,gBAAgB,CAAC,EAC/B,MAAM,EACN,GAAG,YAAY,EACM;IACrB,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,IAAA,qCAAwB,GAAE,CAAC;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,kBAAgB,EAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAElE,MAAM,EACJ,MAAM,EAAE,aAAa,EACrB,WAAW,EAAE,kBAAkB,EAC/B,IAAI,EAAE,eAAe,EACrB,SAAS,EAAE,kBAAkB,EAC7B,KAAK,GACN,GAAG,IAAA,yBAAW,EACb;QACE,UAAU,EAAE,KAAK,EAAE,MAAyB,EAAE,EAAE;YAC9C,IAAI,WAAW,EAAE,CAAC;gBAChB,OAAO,IAAA,oBAAmB,EAAC,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;YAC5D,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,oCAAwB,CAAC,kBAAkB,CAAC,CAAC;YACzD,CAAC;YACD,OAAO,MAAM,CAAC,qBAAqB,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC;QACrD,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,aAAa;QACb,kBAAkB;QAClB,eAAe;QACf,kBAAkB;QAClB,KAAK;KACN,CAAC;AACJ,CAAC;AA1CD,4CA0CC","sourcesContent":["\"use client\";\n\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { signTypedData as wagmi_signTypedData } from \"@wagmi/core\";\nimport type { Hex, TypedDataDefinition } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport type { UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type SignTypedDataArgs = { typedData: TypedDataDefinition };\n\nexport type UseSignTypedDataMutationArgs = BaseHookMutationArgs<\n  Hex,\n  SignTypedDataArgs\n>;\n\nexport type UseSignTypedDataArgs = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseSignTypedDataMutationArgs;\n\nexport type UseSignTypedDataResult = {\n  signTypedData: UseMutateFunction<Hex, Error, SignTypedDataArgs, unknown>;\n  signTypedDataAsync: UseMutateAsyncFunction<\n    Hex,\n    Error,\n    SignTypedDataArgs,\n    unknown\n  >;\n  signedTypedData: Hex | undefined;\n  isSigningTypedData: boolean;\n  error: Error | null;\n};\n\nexport function useSignTypedData({\n  client,\n  ...mutationArgs\n}: UseSignTypedDataArgs): UseSignTypedDataResult {\n  const {\n    queryClient,\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n  const { isConnected } = wagmi_useAccount({ config: wagmiConfig });\n\n  const {\n    mutate: signTypedData,\n    mutateAsync: signTypedDataAsync,\n    data: signedTypedData,\n    isPending: isSigningTypedData,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (params: SignTypedDataArgs) => {\n        if (isConnected) {\n          return wagmi_signTypedData(wagmiConfig, params.typedData);\n        }\n\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useSignTypedData\");\n        }\n        return client.signTypedDataWith6492({ ...params });\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    signTypedData,\n    signTypedDataAsync,\n    signedTypedData,\n    isSigningTypedData,\n    error,\n  };\n}\n"]}