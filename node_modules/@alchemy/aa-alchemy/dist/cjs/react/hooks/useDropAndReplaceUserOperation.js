"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDropAndReplaceUserOperation = void 0;
const react_query_1 = require("@tanstack/react-query");
const context_js_1 = require("../context.js");
const errors_js_1 = require("../errors.js");
function useDropAndReplaceUserOperation({ client, ...mutationArgs }) {
    const { queryClient } = (0, context_js_1.useAlchemyAccountContext)();
    const { mutate: dropAndReplaceUserOperation, data: dropAndReplaceUserOperationResult, isPending: isDroppingAndReplacingUserOperation, error, } = (0, react_query_1.useMutation)({
        mutationFn: async (params) => {
            if (!client) {
                throw new errors_js_1.ClientUndefinedHookError("useDropAndReplaceUserOperation");
            }
            return client.dropAndReplaceUserOperation(params);
        },
        ...mutationArgs,
    }, queryClient);
    return {
        dropAndReplaceUserOperation,
        dropAndReplaceUserOperationResult,
        isDroppingAndReplacingUserOperation,
        error,
    };
}
exports.useDropAndReplaceUserOperation = useDropAndReplaceUserOperation;
//# sourceMappingURL=useDropAndReplaceUserOperation.js.map