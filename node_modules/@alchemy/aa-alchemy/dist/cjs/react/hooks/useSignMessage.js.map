{"version":3,"file":"useSignMessage.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSignMessage.ts"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AAEb,uDAI+B;AAC/B,sCAA+D;AAC/D,iCAAoC;AAEpC,iCAAuD;AACvD,8CAAyD;AACzD,4CAAwD;AA4BxD,SAAgB,cAAc,CAAC,EAC7B,MAAM,EACN,GAAG,YAAY,EACI;IACnB,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,IAAA,qCAAwB,GAAE,CAAC;IAE/B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,kBAAgB,EAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAElE,MAAM,UAAU,GAAG,IAAA,mBAAW,EAC5B,KAAK,EAAE,MAAuB,EAAE,EAAE;QAChC,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,IAAA,kBAAiB,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,oCAAwB,CAAC,gBAAgB,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC,EACD,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,CAAC,CACnC,CAAC;IAEF,MAAM,EACJ,MAAM,EAAE,WAAW,EACnB,WAAW,EAAE,gBAAgB,EAC7B,IAAI,EAAE,aAAa,EACnB,SAAS,EAAE,gBAAgB,EAC3B,KAAK,GACN,GAAG,IAAA,yBAAW,EACb;QACE,WAAW,EAAE,CAAC,aAAa,CAAC;QAC5B,UAAU;QACV,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,WAAW;QACX,gBAAgB;QAChB,aAAa;QACb,gBAAgB;QAChB,KAAK;KACN,CAAC;AACJ,CAAC;AAlDD,wCAkDC","sourcesContent":["\"use client\";\n\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { signMessage as wagmi_signMessage } from \"@wagmi/core\";\nimport { useCallback } from \"react\";\nimport type { Hex, SignableMessage } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { type UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type SignMessageArgs = { message: SignableMessage };\n\nexport type UseSignMessagedMutationArgs = BaseHookMutationArgs<\n  Hex,\n  SignMessageArgs\n>;\n\nexport type UseSignMessageArgs = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseSignMessagedMutationArgs;\n\nexport type UseSignMessageResult = {\n  signMessage: UseMutateFunction<Hex, Error, SignMessageArgs, unknown>;\n  signMessageAsync: UseMutateAsyncFunction<\n    Hex,\n    Error,\n    SignMessageArgs,\n    unknown\n  >;\n  signedMessage: Hex | undefined;\n  isSigningMessage: boolean;\n  error: Error | null;\n};\n\nexport function useSignMessage({\n  client,\n  ...mutationArgs\n}: UseSignMessageArgs): UseSignMessageResult {\n  const {\n    queryClient,\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n\n  const { isConnected } = wagmi_useAccount({ config: wagmiConfig });\n\n  const mutationFn = useCallback(\n    async (params: SignMessageArgs) => {\n      if (isConnected) {\n        return wagmi_signMessage(wagmiConfig, params);\n      }\n\n      if (!client) {\n        throw new ClientUndefinedHookError(\"useSignMessage\");\n      }\n\n      return client.signMessageWith6492(params);\n    },\n    [client, isConnected, wagmiConfig]\n  );\n\n  const {\n    mutate: signMessage,\n    mutateAsync: signMessageAsync,\n    data: signedMessage,\n    isPending: isSigningMessage,\n    error,\n  } = useMutation(\n    {\n      mutationKey: [\"signMessage\"],\n      mutationFn,\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    signMessage,\n    signMessageAsync,\n    signedMessage,\n    isSigningMessage,\n    error,\n  };\n}\n"]}