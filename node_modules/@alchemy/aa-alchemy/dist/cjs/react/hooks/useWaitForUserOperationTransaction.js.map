{"version":3,"file":"useWaitForUserOperationTransaction.js","sourceRoot":"","sources":["../../../../src/react/hooks/useWaitForUserOperationTransaction.ts"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AAGb,uDAA4E;AAE5E,8CAAyD;AACzD,4CAAwD;AAuBxD,SAAgB,kCAAkC,CAAC,EACjD,MAAM,GACiC;IACvC,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,qCAAwB,GAAE,CAAC;IAEnD,MAAM,EACJ,MAAM,EAAE,+BAA+B,EACvC,IAAI,EAAE,qCAAqC,EAC3C,SAAS,EAAE,oCAAoC,EAC/C,KAAK,GACN,GAAG,IAAA,yBAAW,EACb;QACE,UAAU,EAAE,KAAK,EAAE,MAAwC,EAAE,EAAE;YAC7D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,oCAAwB,CAChC,oCAAoC,CACrC,CAAC;YACJ,CAAC;YAED,OAAO,MAAM,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;KACF,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,+BAA+B;QAC/B,qCAAqC;QACrC,oCAAoC;QACpC,KAAK;KACN,CAAC;AACJ,CAAC;AA/BD,gFA+BC","sourcesContent":["\"use client\";\n\nimport type { WaitForUserOperationTxParameters } from \"@alchemy/aa-core\";\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport type { Hash } from \"viem\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { type UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type UseWaitForUserOperationTransactionMutationArgs =\n  BaseHookMutationArgs<Hash, WaitForUserOperationTxParameters>;\n\nexport type UseWaitForUserOperationTransactionArgs = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseWaitForUserOperationTransactionMutationArgs;\n\nexport type UseWaitForUserOperationTransactionResult = {\n  waitForUserOperationTransaction: UseMutateFunction<\n    Hash,\n    Error,\n    WaitForUserOperationTxParameters,\n    unknown\n  >;\n  waitForUserOperationTransactionResult: Hash | undefined;\n  isWaitingForUserOperationTransaction: boolean;\n  error: Error | null;\n};\n\nexport function useWaitForUserOperationTransaction({\n  client,\n}: UseWaitForUserOperationTransactionArgs): UseWaitForUserOperationTransactionResult {\n  const { queryClient } = useAlchemyAccountContext();\n\n  const {\n    mutate: waitForUserOperationTransaction,\n    data: waitForUserOperationTransactionResult,\n    isPending: isWaitingForUserOperationTransaction,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (params: WaitForUserOperationTxParameters) => {\n        if (!client) {\n          throw new ClientUndefinedHookError(\n            \"useWaitForUserOperationTransaction\"\n          );\n        }\n\n        return client.waitForUserOperationTransaction(params);\n      },\n    },\n    queryClient\n  );\n\n  return {\n    waitForUserOperationTransaction,\n    waitForUserOperationTransactionResult,\n    isWaitingForUserOperationTransaction,\n    error,\n  };\n}\n"]}