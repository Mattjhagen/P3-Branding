"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendTransactions = void 0;
const react_query_1 = require("@tanstack/react-query");
const wagmi_1 = require("wagmi");
const context_js_1 = require("../context.js");
const errors_js_1 = require("../errors.js");
function useSendTransactions(params) {
    const { client, ...mutationArgs } = params;
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = (0, context_js_1.useAlchemyAccountContext)();
    const { isConnected } = (0, wagmi_1.useAccount)({ config: wagmiConfig });
    const { mutate: sendTransactions, mutateAsync: sendTransactionsAsync, data: sendTransactionsResult, isPending: isSendingTransactions, error, } = (0, react_query_1.useMutation)({
        mutationFn: async (sendTxParams) => {
            if (isConnected) {
                throw new errors_js_1.UnsupportedEOAActionError("useSendTransactions", "batch transactions");
            }
            if (!client) {
                throw new errors_js_1.ClientUndefinedHookError("useSendTransactions");
            }
            return client.sendTransactions(sendTxParams);
        },
        ...mutationArgs,
    }, queryClient);
    return {
        sendTransactions,
        sendTransactionsAsync,
        sendTransactionsResult,
        isSendingTransactions,
        error,
    };
}
exports.useSendTransactions = useSendTransactions;
//# sourceMappingURL=useSendTransactions.js.map