"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendTransaction = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const react_query_1 = require("@tanstack/react-query");
const core_1 = require("@wagmi/core");
const wagmi_1 = require("wagmi");
const context_js_1 = require("../context.js");
const errors_js_1 = require("../errors.js");
function useSendTransaction(params) {
    const { client, ...mutationArgs } = params;
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = (0, context_js_1.useAlchemyAccountContext)();
    const { isConnected } = (0, wagmi_1.useAccount)({ config: wagmiConfig });
    const { mutate: sendTransaction, mutateAsync: sendTransactionAsync, data: sendTransactionResult, isPending: isSendingTransaction, error, } = (0, react_query_1.useMutation)({
        ...mutationArgs,
        mutationFn: async (params) => {
            if (isConnected) {
                const { to, ...txn } = params;
                if (to == null) {
                    throw new aa_core_1.TransactionMissingToParamError();
                }
                return (0, core_1.sendTransaction)(wagmiConfig, {
                    to,
                    ...txn,
                });
            }
            if (!client) {
                throw new errors_js_1.ClientUndefinedHookError("useSendTransaction");
            }
            return client.sendTransaction(params);
        },
    }, queryClient);
    return {
        sendTransaction,
        sendTransactionAsync,
        sendTransactionResult,
        isSendingTransaction,
        error,
    };
}
exports.useSendTransaction = useSendTransaction;
//# sourceMappingURL=useSendTransaction.js.map