{"version":3,"file":"useSendUserOperation.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSendUserOperation.ts"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AAQb,8CAA6D;AAC7D,uDAI+B;AAC/B,sCAAuE;AAEvE,iCAAuD;AAEvD,8CAAyD;AACzD,4CAGsB;AA2DtB,SAAgB,oBAAoB,CAIlC,MAA8D;IAE9D,MAAM,EAAE,MAAM,EAAE,UAAU,GAAG,KAAK,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,CAAC;IAE/D,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,IAAA,qCAAwB,GAAE,CAAC;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,kBAAgB,EAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAElE,MAAM,EACJ,MAAM,EAAE,iBAAiB,EACzB,WAAW,EAAE,sBAAsB,EACnC,IAAI,EAAE,uBAAuB,EAC7B,SAAS,EAAE,sBAAsB,EACjC,KAAK,GACN,GAAG,IAAA,yBAAW,EACb;QACE,UAAU,EAAE,KAAK,EAAE,MAA6C,EAAE,EAAE;YAClE,IAAI,WAAW,EAAE,CAAC;gBAChB,OAAO,CAAC,IAAI,CACV,6EAA6E,CAC9E,CAAC;gBACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC;gBAEtB,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC;oBACtB,MAAM,IAAI,qCAAyB,CACjC,sBAAsB,EACtB,eAAe,CAChB,CAAC;gBACJ,CAAC;gBAED,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE,CAAC;oBAC3B,MAAM,IAAI,qCAAyB,CACjC,sBAAsB,EACtB,oBAAoB,CACrB,CAAC;gBACJ,CAAC;gBAED,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAqB,EAAC,WAAW,EAAE;oBAClD,EAAE,EAAE,EAAE,CAAC,MAAM;oBACb,IAAI,EAAE,EAAE,CAAC,IAAI;oBACb,KAAK,EAAE,EAAE,CAAC,KAAK;iBAChB,CAAC,CAAC;gBAEH,OAAO;oBACL,IAAI,EAAE,EAAE;iBACT,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,oCAAwB,CAAC,sBAAsB,CAAC,CAAC;YAC7D,CAAC;YAED,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,OAAO,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;YAED,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACjE,MAAM,OAAO,GAAG,MAAM,MAAM;iBACzB,+BAA+B,CAAC,EAAE,IAAI,EAAE,CAAC;iBACzC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;gBACX,MAAM,IAAI,mCAAyB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YAEL,OAAO;gBACL,IAAI,EAAE,OAAO;gBACb,OAAO;aACR,CAAC;QACJ,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,iBAAiB;QACjB,sBAAsB;QACtB,uBAAuB;QACvB,sBAAsB;QACtB,KAAK;KACN,CAAC;AACJ,CAAC;AAxFD,oDAwFC","sourcesContent":["\"use client\";\n\nimport type {\n  EntryPointVersion,\n  GetEntryPointFromAccount,\n  SendUserOperationParameters,\n  SendUserOperationResult,\n} from \"@alchemy/aa-core\";\nimport { WaitForUserOperationError } from \"@alchemy/aa-core\";\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { sendTransaction as wagmi_sendTransaction } from \"@wagmi/core\";\nimport type { Hex } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport type { SupportedAccounts } from \"../../config/types.js\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport {\n  ClientUndefinedHookError,\n  UnsupportedEOAActionError,\n} from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { type UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type SendUserOperationWithEOA<\n  TEntryPointVersion extends EntryPointVersion\n> =\n  | SendUserOperationResult<TEntryPointVersion>\n  | {\n      hash: Hex;\n      request?: never;\n    };\n\nexport type UseSendUserOperationMutationArgs<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = BaseHookMutationArgs<\n  SendUserOperationWithEOA<TEntryPointVersion>,\n  SendUserOperationParameters<TAccount>\n>;\n\nexport type UseSendUserOperationArgs<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n  waitForTxn?: boolean;\n} & UseSendUserOperationMutationArgs<TEntryPointVersion, TAccount>;\n\nexport type UseSendUserOperationResult<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  sendUserOperation: UseMutateFunction<\n    SendUserOperationWithEOA<TEntryPointVersion>,\n    Error,\n    SendUserOperationParameters<TAccount>,\n    unknown\n  >;\n  sendUserOperationAsync: UseMutateAsyncFunction<\n    SendUserOperationWithEOA<TEntryPointVersion>,\n    Error,\n    SendUserOperationParameters<TAccount>,\n    unknown\n  >;\n  sendUserOperationResult:\n    | SendUserOperationWithEOA<TEntryPointVersion>\n    | undefined;\n  isSendingUserOperation: boolean;\n  error: Error | null;\n};\n\n/**\n * A hook that returns functions for sending user operations.\n * You can also optionally wait for a user operation to be mined before returning.\n *\n * @param params the parameters for the hook including the client, a flag to wait for tx mining, and mutation args (see {@link UseSendUserOperationArgs})\n * @returns functions and state for sending UOs {@link UseSendUserOperationResult}\n */\nexport function useSendUserOperation<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n>(\n  params: UseSendUserOperationArgs<TEntryPointVersion, TAccount>\n): UseSendUserOperationResult<TEntryPointVersion, TAccount> {\n  const { client, waitForTxn = false, ...mutationArgs } = params;\n\n  const {\n    queryClient,\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n  const { isConnected } = wagmi_useAccount({ config: wagmiConfig });\n\n  const {\n    mutate: sendUserOperation,\n    mutateAsync: sendUserOperationAsync,\n    data: sendUserOperationResult,\n    isPending: isSendingUserOperation,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (params: SendUserOperationParameters<TAccount>) => {\n        if (isConnected) {\n          console.warn(\n            \"useSendUserOperation: connected to an EOA, sending as a transaction instead\"\n          );\n          const { uo } = params;\n\n          if (Array.isArray(uo)) {\n            throw new UnsupportedEOAActionError(\n              \"useSendUserOperation\",\n              \"batch execute\"\n            );\n          }\n\n          if (typeof uo === \"string\") {\n            throw new UnsupportedEOAActionError(\n              \"useSendUserOperation\",\n              \"hex user operation\"\n            );\n          }\n\n          const tx = await wagmi_sendTransaction(wagmiConfig, {\n            to: uo.target,\n            data: uo.data,\n            value: uo.value,\n          });\n\n          return {\n            hash: tx,\n          };\n        }\n\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useSendUserOperation\");\n        }\n\n        if (!waitForTxn) {\n          return client.sendUserOperation(params);\n        }\n\n        const { hash, request } = await client.sendUserOperation(params);\n        const txnHash = await client\n          .waitForUserOperationTransaction({ hash })\n          .catch((e) => {\n            throw new WaitForUserOperationError(request, e);\n          });\n\n        return {\n          hash: txnHash,\n          request,\n        };\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    sendUserOperation,\n    sendUserOperationAsync,\n    sendUserOperationResult,\n    isSendingUserOperation,\n    error,\n  };\n}\n"]}