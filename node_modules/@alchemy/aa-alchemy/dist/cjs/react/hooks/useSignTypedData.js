"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSignTypedData = void 0;
const react_query_1 = require("@tanstack/react-query");
const core_1 = require("@wagmi/core");
const wagmi_1 = require("wagmi");
const context_js_1 = require("../context.js");
const errors_js_1 = require("../errors.js");
function useSignTypedData({ client, ...mutationArgs }) {
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = (0, context_js_1.useAlchemyAccountContext)();
    const { isConnected } = (0, wagmi_1.useAccount)({ config: wagmiConfig });
    const { mutate: signTypedData, mutateAsync: signTypedDataAsync, data: signedTypedData, isPending: isSigningTypedData, error, } = (0, react_query_1.useMutation)({
        mutationFn: async (params) => {
            if (isConnected) {
                return (0, core_1.signTypedData)(wagmiConfig, params.typedData);
            }
            if (!client) {
                throw new errors_js_1.ClientUndefinedHookError("useSignTypedData");
            }
            return client.signTypedDataWith6492({ ...params });
        },
        ...mutationArgs,
    }, queryClient);
    return {
        signTypedData,
        signTypedDataAsync,
        signedTypedData,
        isSigningTypedData,
        error,
    };
}
exports.useSignTypedData = useSignTypedData;
//# sourceMappingURL=useSignTypedData.js.map