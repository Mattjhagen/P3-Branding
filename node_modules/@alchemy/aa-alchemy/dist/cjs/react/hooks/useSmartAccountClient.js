"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSmartAccountClient = void 0;
const aa_accounts_1 = require("@alchemy/aa-accounts");
const react_1 = require("react");
const wagmi_1 = require("wagmi");
const smartAccountClientFromRpc_js_1 = require("../../client/internal/smartAccountClientFromRpc.js");
const context_js_1 = require("../context.js");
const useAccount_js_1 = require("./useAccount.js");
const useBundlerClient_js_1 = require("./useBundlerClient.js");
const useConnection_js_1 = require("./useConnection.js");
function useSmartAccountClient({ accountParams, type, ...clientParams }) {
    const bundlerClient = (0, useBundlerClient_js_1.useBundlerClient)();
    const connection = (0, useConnection_js_1.useConnection)();
    const { config: { _internal: { wagmiConfig }, }, } = (0, context_js_1.useAlchemyAccountContext)();
    const { account, address, isLoadingAccount } = (0, useAccount_js_1.useAccount)({
        type,
        accountParams,
    });
    const { isConnected, address: eoaAddress } = (0, wagmi_1.useAccount)({
        config: wagmiConfig,
    });
    const eoaClient = (0, react_1.useMemo)(() => {
        if (!isConnected)
            return null;
        console.warn("EOA is connected, will not return an SCA client");
        return {
            client: undefined,
            address: eoaAddress,
            isLoadingClient: false,
        };
    }, [eoaAddress, isConnected]);
    if (eoaClient) {
        return eoaClient;
    }
    if (!account || isLoadingAccount) {
        return {
            client: undefined,
            address,
            isLoadingClient: true,
        };
    }
    switch (account.source) {
        case "LightAccount":
            return {
                client: (0, smartAccountClientFromRpc_js_1.createAlchemySmartAccountClientFromRpcClient)({
                    client: bundlerClient,
                    account,
                    gasManagerConfig: connection.gasManagerConfig,
                    ...clientParams,
                }).extend(aa_accounts_1.lightAccountClientActions),
                address: account.address,
                isLoadingClient: false,
            };
        case "MultiOwnerModularAccount":
            return {
                client: (0, smartAccountClientFromRpc_js_1.createAlchemySmartAccountClientFromRpcClient)({
                    client: bundlerClient,
                    account,
                    gasManagerConfig: connection.gasManagerConfig,
                    ...clientParams,
                })
                    .extend(aa_accounts_1.multiOwnerPluginActions)
                    .extend(aa_accounts_1.pluginManagerActions)
                    .extend(aa_accounts_1.accountLoupeActions),
                address: account.address,
                isLoadingClient: false,
            };
        default:
            throw new Error("Unsupported account type");
    }
}
exports.useSmartAccountClient = useSmartAccountClient;
//# sourceMappingURL=useSmartAccountClient.js.map