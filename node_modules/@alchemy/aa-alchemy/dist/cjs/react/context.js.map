{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/react/context.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;AAGb,uDAA8E;AAC9E,iCAOe;AAGf,4DAAyD;AACzD,2CAA2D;AAC3D,mEAA6D;AAC7D,6CAAuC;AACvC,6DAA+E;AAC/E,yDAAuD;AAa1C,QAAA,qBAAqB,GAAG,IAAA,qBAAa,EAEhD,SAAS,CAAC,CAAC;AA8BN,MAAM,wBAAwB,GAAG,CACtC,QAAqC,EACI,EAAE;IAC3C,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,6BAAqB,CAAC,CAAC;IAClD,IAAI,QAAQ,IAAI,IAAI;QAAE,OAAO,QAAQ,CAAC;IAEtC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,MAAM,IAAI,wCAA4B,CAAC,0BAA0B,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAXW,QAAA,wBAAwB,4BAWnC;AAYK,MAAM,sBAAsB,GAAG,CACpC,KAA4D,EAC5D,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAE1D,MAAM,GAAG,GAAG,IAAA,cAAM,EAAoB,IAAI,CAAC,CAAC;IAC5C,MAAM,aAAa,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC;IACrD,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;IAElD,MAAM,cAAc,GAAG,IAAA,eAAO,EAC5B,GAAG,EAAE,CAAC,CAAC;QACL,MAAM;QACN,WAAW;QACX,EAAE,EAAE,QAAQ;YACV,CAAC,CAAC;gBACE,aAAa;gBACb,cAAc;aACf;YACH,CAAC,CAAC,SAAS;KACd,CAAC,EACF,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAChC,CAAC;IAEF,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,oCAAe,EAAC,cAAc,CAAC,CAAC;IACrE,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAW;QACjD,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS;KACxD,CAAC,CAAC;IAEH,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IACE,MAAM,KAAK,qBAAqB;YAChC,QAAQ,EAAE,IAAI,EAAE,kBAAkB,EAClC,CAAC;YACD,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9D,IAAI,SAAS,CAAC,GAAG,CAAC,2BAAY,CAAC,KAAK,MAAM;gBAAE,OAAO;YAEnD,aAAa,EAAE,CAAC;QAClB,CAAC;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;IAE7B,OAAO,CACL,uBAAC,oBAAO,OAAK,KAAK,YAChB,uBAAC,6BAAqB,CAAC,QAAQ,IAAC,KAAK,EAAE,cAAc,YACnD,uBAAC,iCAAmB,IAAC,MAAM,EAAE,WAAW,YACtC,wBAAC,6BAAgB,CAAC,QAAQ,IACxB,KAAK,EAAE;wBACL,QAAQ;wBACR,WAAW;qBACZ,aAEA,QAAQ,EACR,QAAQ,EAAE,IAAI,IAAI,CACjB,uBAAC,oBAAS,IACR,IAAI,EAAE,QAAQ,CAAC,IAAI,EACnB,SAAS,EAAE,QAAQ,CAAC,SAAS,EAC7B,GAAG,EAAE,GAAG,GACR,CACH,IACyB,GACR,GACS,GACzB,CACX,CAAC;AACJ,CAAC,CAAC;AA/DW,QAAA,sBAAsB,0BA+DjC","sourcesContent":["\"use client\";\n\nimport type { NoUndefined } from \"@alchemy/aa-core\";\nimport { QueryClientProvider, type QueryClient } from \"@tanstack/react-query\";\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport type { AlchemyAccountsConfig, AlchemyClientState } from \"../config\";\nimport type { AuthCardProps } from \"./components/auth/card/index.js\";\nimport { IS_SIGNUP_QP } from \"./components/constants.js\";\nimport { NoAlchemyAccountContextError } from \"./errors.js\";\nimport { useSignerStatus } from \"./hooks/useSignerStatus.js\";\nimport { Hydrate } from \"./hydrate.js\";\nimport { AuthModalContext, type AuthStep } from \"./components/auth/context.js\";\nimport { AuthModal } from \"./components/auth/modal.js\";\n\nexport type AlchemyAccountContextProps =\n  | {\n      config: AlchemyAccountsConfig;\n      queryClient: QueryClient;\n      ui?: {\n        openAuthModal: () => void;\n        closeAuthModal: () => void;\n      };\n    }\n  | undefined;\n\nexport const AlchemyAccountContext = createContext<\n  AlchemyAccountContextProps | undefined\n>(undefined);\n\nexport type AlchemyAccountsUIConfig = {\n  auth?: AuthCardProps & { addPasskeyOnSignup?: boolean };\n  /**\n   * If hideError is true, then the auth component will not\n   * render the global error component\n   */\n  hideError?: boolean;\n};\n\nexport type AlchemyAccountsProviderProps = {\n  config: AlchemyAccountsConfig;\n  initialState?: AlchemyClientState;\n  queryClient: QueryClient;\n  /**\n   * If auth config is provided, then the auth modal will be added\n   * to the DOM and can be controlled via the `useAuthModal` hook\n   */\n  uiConfig?: AlchemyAccountsUIConfig;\n};\n\n/**\n * Internal Only hook used to access the alchemy account context.\n * This hook is meant to be consumed by other hooks exported by this package.\n *\n * @param override optional context override that can be used to return a custom context\n * @returns The alchemy account context if one exists\n * @throws if used outside of the AlchemyAccountProvider\n */\nexport const useAlchemyAccountContext = (\n  override?: AlchemyAccountContextProps\n): NoUndefined<AlchemyAccountContextProps> => {\n  const context = useContext(AlchemyAccountContext);\n  if (override != null) return override;\n\n  if (context == null) {\n    throw new NoAlchemyAccountContextError(\"useAlchemyAccountContext\");\n  }\n\n  return context;\n};\n\n/**\n * Provider for Alchemy accounts.\n *\n * @param props alchemy accounts provider props\n * @param props.config the acccount config generated using {@link createConfig}\n * @param props.queryClient the react-query query client to use\n * @param props.uiConfig optional UI configuration\n * @param props.children react components that should have this accounts context\n * @returns The element to wrap your application in for Alchemy Accounts context.\n */\nexport const AlchemyAccountProvider = (\n  props: React.PropsWithChildren<AlchemyAccountsProviderProps>\n) => {\n  const { config, queryClient, children, uiConfig } = props;\n\n  const ref = useRef<HTMLDialogElement>(null);\n  const openAuthModal = () => ref.current?.showModal();\n  const closeAuthModal = () => ref.current?.close();\n\n  const initialContext = useMemo(\n    () => ({\n      config,\n      queryClient,\n      ui: uiConfig\n        ? {\n            openAuthModal,\n            closeAuthModal,\n          }\n        : undefined,\n    }),\n    [config, queryClient, uiConfig]\n  );\n\n  const { status, isAuthenticating } = useSignerStatus(initialContext);\n  const [authStep, setAuthStep] = useState<AuthStep>({\n    type: isAuthenticating ? \"email_completing\" : \"initial\",\n  });\n\n  useEffect(() => {\n    if (\n      status === \"AWAITING_EMAIL_AUTH\" &&\n      uiConfig?.auth?.addPasskeyOnSignup\n    ) {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.get(IS_SIGNUP_QP) !== \"true\") return;\n\n      openAuthModal();\n    }\n  }, [status, uiConfig?.auth]);\n\n  return (\n    <Hydrate {...props}>\n      <AlchemyAccountContext.Provider value={initialContext}>\n        <QueryClientProvider client={queryClient}>\n          <AuthModalContext.Provider\n            value={{\n              authStep,\n              setAuthStep,\n            }}\n          >\n            {children}\n            {uiConfig?.auth && (\n              <AuthModal\n                auth={uiConfig.auth}\n                hideError={uiConfig.hideError}\n                ref={ref}\n              />\n            )}\n          </AuthModalContext.Provider>\n        </QueryClientProvider>\n      </AlchemyAccountContext.Provider>\n    </Hydrate>\n  );\n};\n"]}