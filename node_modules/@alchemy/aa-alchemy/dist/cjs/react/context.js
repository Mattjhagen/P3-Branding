"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemyAccountProvider = exports.useAlchemyAccountContext = exports.AlchemyAccountContext = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const constants_js_1 = require("./components/constants.js");
const errors_js_1 = require("./errors.js");
const useSignerStatus_js_1 = require("./hooks/useSignerStatus.js");
const hydrate_js_1 = require("./hydrate.js");
const context_js_1 = require("./components/auth/context.js");
const modal_js_1 = require("./components/auth/modal.js");
exports.AlchemyAccountContext = (0, react_1.createContext)(undefined);
const useAlchemyAccountContext = (override) => {
    const context = (0, react_1.useContext)(exports.AlchemyAccountContext);
    if (override != null)
        return override;
    if (context == null) {
        throw new errors_js_1.NoAlchemyAccountContextError("useAlchemyAccountContext");
    }
    return context;
};
exports.useAlchemyAccountContext = useAlchemyAccountContext;
const AlchemyAccountProvider = (props) => {
    const { config, queryClient, children, uiConfig } = props;
    const ref = (0, react_1.useRef)(null);
    const openAuthModal = () => ref.current?.showModal();
    const closeAuthModal = () => ref.current?.close();
    const initialContext = (0, react_1.useMemo)(() => ({
        config,
        queryClient,
        ui: uiConfig
            ? {
                openAuthModal,
                closeAuthModal,
            }
            : undefined,
    }), [config, queryClient, uiConfig]);
    const { status, isAuthenticating } = (0, useSignerStatus_js_1.useSignerStatus)(initialContext);
    const [authStep, setAuthStep] = (0, react_1.useState)({
        type: isAuthenticating ? "email_completing" : "initial",
    });
    (0, react_1.useEffect)(() => {
        if (status === "AWAITING_EMAIL_AUTH" &&
            uiConfig?.auth?.addPasskeyOnSignup) {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get(constants_js_1.IS_SIGNUP_QP) !== "true")
                return;
            openAuthModal();
        }
    }, [status, uiConfig?.auth]);
    return ((0, jsx_runtime_1.jsx)(hydrate_js_1.Hydrate, { ...props, children: (0, jsx_runtime_1.jsx)(exports.AlchemyAccountContext.Provider, { value: initialContext, children: (0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: (0, jsx_runtime_1.jsxs)(context_js_1.AuthModalContext.Provider, { value: {
                        authStep,
                        setAuthStep,
                    }, children: [children, uiConfig?.auth && ((0, jsx_runtime_1.jsx)(modal_js_1.AuthModal, { auth: uiConfig.auth, hideError: uiConfig.hideError, ref: ref }))] }) }) }) }));
};
exports.AlchemyAccountProvider = AlchemyAccountProvider;
//# sourceMappingURL=context.js.map