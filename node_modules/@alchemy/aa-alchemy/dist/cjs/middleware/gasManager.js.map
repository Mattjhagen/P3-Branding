{"version":3,"file":"gasManager.js","sourceRoot":"","sources":["../../../src/middleware/gasManager.ts"],"names":[],"mappings":";;;AAUA,8CAQ0B;AAC1B,+BAAwD;AAExD,sDAA+D;AAC/D,uDAAwD;AAoIxD,MAAM,qBAAqB,GACzB,CACE,MAAS,EACT,MAA+B,EAC/B,EAAE,CACJ,GAAG,EAAE;IACH,MAAM,SAAS,GACb,MAAM,CAAC,gBAAgB,IAAI,IAAA,2CAA0B,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtE,MAAM,aAAa,GACjB,MAAM,CAAC,SAAS;QAChB,sMAAsM,CAAC;IAEzM,OAAO,IAAA,aAAM,EAAC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC;AAUJ,SAAgB,2BAA2B,CACzC,MAAS,EACT,MAA+B;IAK/B,MAAM,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;IACzD,MAAM,oBAAoB,GACxB,oBAAoB,EAAE,oBAAoB,IAAI,KAAK,CAAC;IACtD,MAAM,qBAAqB,GACzB,oBAAoB,EAAE,qBAAqB,IAAI,IAAA,qCAAmB,EAAC,MAAM,CAAC,CAAC;IAC7E,MAAM,oBAAoB,GACxB,oBAAoB,EAAE,oBAAoB;QAC1C,IAAA,6BAAmB,EAAI,MAAM,CAAC,CAAC;IAEjC,OAAO;QACL,YAAY,EAAE,oBAAoB;YAChC,CAAC,CAAC,oBAAoB;YACtB,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE;gBAGnD,IAAI,IAAA,wCAA8B,EAAC,SAAS,CAAC,EAAE,CAAC;oBAC9C,OAAO;wBACL,GAAG,MAAM;wBACT,GAAG,CAAC,MAAM,oBAAoB,CAAC,MAAM,EAAE;4BACrC,SAAS;4BACT,OAAO;4BACP,UAAU;4BACV,MAAM;yBACP,CAAC,CAAC;qBACJ,CAAC;gBACJ,CAAC;gBAGD,OAAO,MAAM,CAAC;YAChB,CAAC;QACL,YAAY,EAAE,oBAAoB;YAChC,CAAC,CAAC,qBAAqB;YACvB,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE;gBACnD,IAAI,YAAY,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC;gBAC7C,IAAI,oBAAoB,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;gBAI7D,IAAI,IAAA,wCAA8B,EAAC,SAAS,CAAC,EAAE,CAAC;oBAC9C,MAAM,MAAM,GAAG,MAAM,qBAAqB,CAAC,MAAM,EAAE;wBACjD,SAAS;wBACT,UAAU;wBACV,OAAO;wBACP,MAAM;qBACP,CAAC,CAAC;oBACH,YAAY,GAAG,CAAC,MAAM,MAAM,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC;oBAC3D,oBAAoB;wBAClB,CAAC,MAAM,MAAM,CAAC,oBAAoB,CAAC,IAAI,oBAAoB,CAAC;gBAChE,CAAC;gBAED,OAAO;oBACL,GAAG,MAAM;oBACT,YAAY;oBACZ,oBAAoB;iBACrB,CAAC;YACJ,CAAC;QACL,gBAAgB,EAAE,oBAAoB;YACpC,CAAC,CAAC,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC;YACzC,CAAC,CAAC,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC;KAC/C,CAAC;AACJ,CAAC;AAnED,kEAmEC;AAYD,MAAM,aAAa,GAAG,CAGpB,KAAwD,EACxD,SAAiE,EACjE,UAAmE,EACnE,aAAuD,EACzB,EAAE;IAChC,IAAI,MAAM,GAAG,KAAyD,CAAC;IAEvE,IAAI,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;QAEhC,IAAI,IAAA,wBAAc,EAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YACtC,OAAO,IAAA,qBAAW,EAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QACxC,CAAC;aAEI,CAAC;YACJ,OAAO;gBACL,UAAU,EAAE,MAAM,CAAE,SAAS,CAAC,MAAM,CAAgB,CAAC,UAAU,CAAC;aACjE,CAAC;QACJ,CAAC;IACH,CAAC;IAGD,IAAI,IAAA,sBAAY,EAAC,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QACtC,OAAO;YACL,UAAU,EAAE,MAAM,CAAE,UAAW,CAAC,KAAK,CAAgB,CAAC,UAAU,CAAC;SAClE,CAAC;IACJ,CAAC;IAED,MAAM,WAAW,GACf,aAAa,CAAC,KAAuD,CAAC,CAAC;IACzE,IAAI,IAAA,YAAK,EAAC,WAAW,CAAC,IAAI,IAAA,cAAO,EAAC,WAAkB,EAAE,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC;QACrE,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAWF,SAAS,0BAA0B,CACjC,MAAS,EACT,MAA+B;IAE/B,OAAO;QACL,qBAAqB,EAAE,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC;QAE5D,gBAAgB,EAAE,KAAK,EACrB,MAAM,EACN,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,EAC9C,EAAE;YACF,MAAM,aAAa,GAAyB,IAAA,qBAAW,EACrD,MAAM,IAAA,2BAAiB,EAAC,MAAM,CAAC,CAChC,CAAC;YAEF,MAAM,SAAS,GAA2C,IAAA,yBAAe,EACvE;gBACE,YAAY,EAAE,aAAa,CACzB,cAAc,EACd,UAAoC,EACpC,UAAU,EACV,aAAa,CACd;gBACD,oBAAoB,EAAE,aAAa,CACjC,sBAAsB,EACtB,UAAoC,EACpC,UAAU,EACV,aAAa,CACd;gBACD,YAAY,EAAE,aAAa,CACzB,cAAc,EACd,UAAoC,EACpC,UAAU,EACV,aAAa,CACd;gBACD,oBAAoB,EAAE,aAAa,CACjC,sBAAsB,EACtB,UAAoC,EACpC,UAAU,EACV,aAAa,CACd;gBACD,kBAAkB,EAAE,aAAa,CAC/B,oBAAoB,EACpB,UAAoC,EACpC,UAAU,EACV,aAAa,CACd;aACF,CACF,CAAC;YAEF,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;gBAChD,MAAM,6BAA6B,GAAG,aAAa,CACjD,+BAA+B,EAC/B,UAA6C,EAC7C,UAAU,EACV,aAAa,CACd,CAAC;gBACF,IAAI,6BAA6B,IAAI,IAAI,EAAE,CAAC;oBAExC,SACD,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;gBAClE,CAAC;gBAED,MAAM,uBAAuB,GAAG,aAAa,CAC3C,yBAAyB,EACzB,UAA6C,EAC7C,UAAU,EACV,aAAa,CACd,CAAC;gBACF,IAAI,uBAAuB,IAAI,IAAI,EAAE,CAAC;oBAElC,SACD,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;gBACtD,CAAC;YACH,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC;gBAClC,MAAM,EAAE,uCAAuC;gBAC/C,MAAM,EAAE;oBACN;wBACE,QAAQ,EAAE,MAAM,CAAC,QAAQ;wBACzB,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO;wBAC3C,aAAa;wBACb,cAAc,EAAE,aAAa,CAAC,SAAS;wBACvC,SAAS;qBACV;iBACF;aACF,CAAC,CAAC;YAEH,OAAO;gBACL,GAAG,MAAM;gBACT,GAAG,MAAM;aACV,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAWD,MAAM,uBAAuB,GAGqB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACrE,qBAAqB,EAAE,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC;IAC5D,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QAC9C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC;YAClC,MAAM,EAAE,iCAAiC;YACzC,MAAM,EAAE;gBACN;oBACE,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO;oBAC3C,aAAa,EAAE,IAAA,qBAAW,EAAC,MAAM,IAAA,2BAAiB,EAAC,MAAM,CAAC,CAAC;iBAC5D;aACF;SACF,CAAC,CAAC;QAEH,OAAO;YACL,GAAG,MAAM;YACT,GAAG,MAAM;SACV,CAAC;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type {\n  Address,\n  ClientMiddlewareConfig,\n  ClientMiddlewareFn,\n  EntryPointVersion,\n  Multiplier,\n  UserOperationFeeOptions,\n  UserOperationOverrides,\n  UserOperationRequest,\n} from \"@alchemy/aa-core\";\nimport {\n  bypassPaymasterAndDataEmptyHex,\n  deepHexlify,\n  defaultGasEstimator,\n  filterUndefined,\n  isBigNumberish,\n  isMultiplier,\n  resolveProperties,\n} from \"@alchemy/aa-core\";\nimport { concat, fromHex, isHex, type Hex } from \"viem\";\nimport type { ClientWithAlchemyMethods } from \"../client/types\";\nimport { getAlchemyPaymasterAddress } from \"../gas-manager.js\";\nimport { alchemyFeeEstimator } from \"./feeEstimator.js\";\n\n/**\n * overrides value for [`alchemy_requestGasAndPaymasterData`](https://docs.alchemy.com/reference/alchemy-requestgasandpaymasteranddata)\n *\n * @template {EntryPointVersion} TEntryPointVersion entry point version type\n */\nexport type RequestGasAndPaymasterAndDataOverrides<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = Partial<\n  {\n    maxFeePerGas:\n      | UserOperationRequest<TEntryPointVersion>[\"maxFeePerGas\"]\n      | Multiplier;\n    maxPriorityFeePerGas:\n      | UserOperationRequest<TEntryPointVersion>[\"maxPriorityFeePerGas\"]\n      | Multiplier;\n    callGasLimit:\n      | UserOperationRequest<TEntryPointVersion>[\"callGasLimit\"]\n      | Multiplier;\n    verificationGasLimit:\n      | UserOperationRequest<TEntryPointVersion>[\"verificationGasLimit\"]\n      | Multiplier;\n    preVerificationGas:\n      | UserOperationRequest<TEntryPointVersion>[\"preVerificationGas\"]\n      | Multiplier;\n  } & TEntryPointVersion extends \"0.7.0\"\n    ? {\n        paymasterVerificationGasLimit:\n          | UserOperationRequest<\"0.7.0\">[\"paymasterVerificationGasLimit\"]\n          | Multiplier;\n        paymasterPostOpGasLimit:\n          | UserOperationRequest<\"0.7.0\">[\"paymasterPostOpGasLimit\"]\n          | Multiplier;\n      }\n    : {}\n>;\n\n/**\n * [`alchemy-requestpaymasteranddata`](https://docs.alchemy.com/reference/alchemy-requestpaymasteranddata)\n * response type\n *\n * @template {EntryPointVersion} TEntryPointVersion entry point version type\n */\nexport type RequestPaymasterAndDataResponse<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = TEntryPointVersion extends \"0.6.0\"\n  ? {\n      paymasterAndData: UserOperationRequest<\"0.6.0\">[\"paymasterAndData\"];\n    }\n  : TEntryPointVersion extends \"0.7.0\"\n  ? Pick<UserOperationRequest<\"0.7.0\">, \"paymaster\" | \"paymasterData\">\n  : {};\n\n/**\n * [`alchemy_requestGasAndPaymasterData`](https://docs.alchemy.com/reference/alchemy-requestgasandpaymasteranddata)\n * response type\n *\n * @template {EntryPointVersion} TEntryPointVersion entry point version type\n */\nexport type RequestGasAndPaymasterAndDataResponse<\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n> = Pick<\n  UserOperationRequest,\n  | \"callGasLimit\"\n  | \"preVerificationGas\"\n  | \"verificationGasLimit\"\n  | \"maxFeePerGas\"\n  | \"maxPriorityFeePerGas\"\n> &\n  RequestPaymasterAndDataResponse<TEntryPointVersion>;\n\n/**\n * Alchemy gas manager configuration with gas policy id and optional gas estimation options\n *\n * To create a Gas Manager Policy, go to the [gas manager](https://dashboard.alchemy.com/gas-manager?a=embedded-accounts-get-started)\n * page of the Alchemy dashboard and click the “Create new policy” button.\n */\nexport interface AlchemyGasManagerConfig {\n  /**\n   * the policy id of the gas manager you want to use.\n   *\n   */\n  policyId: string;\n  /**\n   * optional option configurable for the gas estimation portion of the Alchemy gas manager\n   *\n   */\n  gasEstimationOptions?: AlchemyGasEstimationOptions;\n  /**\n   * paymaster address to use for the gas estimation.\n   * If not provided, the default paymaster address for the chain will be used.\n   *\n   */\n  paymasterAddress?: Address;\n  /**\n   * dummy paymaster data to use for the gas estimation.\n   *\n   */\n  dummyData?: Hex;\n}\n\n/**\n * Alchemy gas manager configuration option configurable for the gas estimation portion of the Alchemy gas manager\n *\n */\nexport interface AlchemyGasEstimationOptions {\n  /**\n   * disable gas estimation and fallback to the default gas estimation.\n   *\n   */\n  disableGasEstimation: boolean;\n  /**\n   * optional fallback gas estimator to use when gas estimation is disabled.\n   *\n   */\n  fallbackGasEstimator?: ClientMiddlewareFn;\n  /**\n   * optional fallback fee estimator to use when gas estimation is disabled.\n   *\n   */\n  fallbackFeeDataGetter?: ClientMiddlewareFn;\n}\n\n/**\n * dummy paymaster and data middleware for the alchemy gas manager\n *\n * @template {ClientWithAlchemyMethods} C\n * @param client client with alchemy methods\n * @param config alchemy gas manager configuration\n * @returns the dummyPaymasterAndData middleware for Alchemy gas manager\n */\nconst dummyPaymasterAndData =\n  <C extends ClientWithAlchemyMethods>(\n    client: C,\n    config: AlchemyGasManagerConfig\n  ) =>\n  () => {\n    const paymaster =\n      config.paymasterAddress ?? getAlchemyPaymasterAddress(client.chain);\n    const paymasterData =\n      config.dummyData ??\n      \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n    return concat([paymaster, paymasterData]); // or you can also return { paymaster, paymasterData }\n  };\n\n/**\n * Alchemy gas manager middleware used as the paymaster middleware overrides param to the client middleware config\n *\n * @template {ClientWithAlchemyMethods} C\n * @param client client with alchemy methods\n * @param config alchemy gas manager configuration\n * @returns the gas estimator, fee estimator, and paymasterAndData middleware for Alchemy gas manager\n */\nexport function alchemyGasManagerMiddleware<C extends ClientWithAlchemyMethods>(\n  client: C,\n  config: AlchemyGasManagerConfig\n): Pick<\n  ClientMiddlewareConfig,\n  \"paymasterAndData\" | \"feeEstimator\" | \"gasEstimator\"\n> {\n  const gasEstimationOptions = config.gasEstimationOptions;\n  const disableGasEstimation =\n    gasEstimationOptions?.disableGasEstimation ?? false;\n  const fallbackFeeDataGetter =\n    gasEstimationOptions?.fallbackFeeDataGetter ?? alchemyFeeEstimator(client);\n  const fallbackGasEstimator =\n    gasEstimationOptions?.fallbackGasEstimator ??\n    defaultGasEstimator<C>(client);\n\n  return {\n    gasEstimator: disableGasEstimation\n      ? fallbackGasEstimator\n      : async (struct, { overrides, account, feeOptions }) => {\n          // if user is bypassing paymaster to fallback to having the account to pay the gas (one-off override),\n          // we cannot delegate gas estimation to the bundler because paymaster middleware will not be called\n          if (bypassPaymasterAndDataEmptyHex(overrides)) {\n            return {\n              ...struct,\n              ...(await fallbackGasEstimator(struct, {\n                overrides,\n                account,\n                feeOptions,\n                client,\n              })),\n            };\n          }\n\n          // essentially noop, because the gas estimation will happen in the backend\n          return struct;\n        },\n    feeEstimator: disableGasEstimation\n      ? fallbackFeeDataGetter\n      : async (struct, { overrides, account, feeOptions }) => {\n          let maxFeePerGas = await struct.maxFeePerGas;\n          let maxPriorityFeePerGas = await struct.maxPriorityFeePerGas;\n\n          // if user is bypassing paymaster to fallback to having the account to pay the gas (one-off override),\n          // we cannot delegate gas estimation to the bundler because paymaster middleware will not be called\n          if (bypassPaymasterAndDataEmptyHex(overrides)) {\n            const result = await fallbackFeeDataGetter(struct, {\n              overrides,\n              feeOptions,\n              account,\n              client,\n            });\n            maxFeePerGas = (await result.maxFeePerGas) ?? maxFeePerGas;\n            maxPriorityFeePerGas =\n              (await result.maxPriorityFeePerGas) ?? maxPriorityFeePerGas;\n          }\n\n          return {\n            ...struct,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n          };\n        },\n    paymasterAndData: disableGasEstimation\n      ? requestPaymasterAndData(client, config)\n      : requestGasAndPaymasterData(client, config),\n  };\n}\n\n/**\n * Utility function to override a field in the user operation request with the overrides or fee options\n *\n * @template {EntryPointVersion} TEntryPointVersion\n * @param field the field to override\n * @param overrides the overrides object\n * @param feeOptions the fee options object from the client\n * @param userOperation the user operation request\n * @returns the overridden field value\n */\nconst overrideField = <\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(\n  field: keyof UserOperationFeeOptions<TEntryPointVersion>,\n  overrides: UserOperationOverrides<TEntryPointVersion> | undefined,\n  feeOptions: UserOperationFeeOptions<TEntryPointVersion> | undefined,\n  userOperation: UserOperationRequest<TEntryPointVersion>\n): Hex | Multiplier | undefined => {\n  let _field = field as keyof UserOperationOverrides<TEntryPointVersion>;\n\n  if (overrides?.[_field] != null) {\n    // one-off absolute override\n    if (isBigNumberish(overrides[_field])) {\n      return deepHexlify(overrides[_field]);\n    }\n    // one-off multiplier overrides\n    else {\n      return {\n        multiplier: Number((overrides[_field] as Multiplier).multiplier),\n      };\n    }\n  }\n\n  // provider level fee options with multiplier\n  if (isMultiplier(feeOptions?.[field])) {\n    return {\n      multiplier: Number((feeOptions![field] as Multiplier).multiplier),\n    };\n  }\n\n  const userOpField =\n    userOperation[field as keyof UserOperationRequest<TEntryPointVersion>];\n  if (isHex(userOpField) && fromHex(userOpField as Hex, \"bigint\") > 0n) {\n    return userOpField;\n  }\n  return undefined;\n};\n\n/**\n * Alchemy gas manager middleware function that returns the paymaster middleware for the client middleware config\n * that calls the [`alchemy_requestGasAndPaymasterAndData`](https://docs.alchemy.com/reference/alchemy-requestgasandpaymasteranddata)\n *\n * @template {ClientWithAlchemyMethods} C\n * @param client client with alchemy methods\n * @param config alchemy gas manager configuration\n * @returns the paymasterAndData middleware for Alchemy gas manager\n */\nfunction requestGasAndPaymasterData<C extends ClientWithAlchemyMethods>(\n  client: C,\n  config: AlchemyGasManagerConfig\n): ClientMiddlewareConfig[\"paymasterAndData\"] {\n  return {\n    dummyPaymasterAndData: dummyPaymasterAndData(client, config),\n\n    paymasterAndData: async (\n      struct,\n      { overrides: overrides_, feeOptions, account }\n    ) => {\n      const userOperation: UserOperationRequest = deepHexlify(\n        await resolveProperties(struct)\n      );\n\n      const overrides: RequestGasAndPaymasterAndDataOverrides = filterUndefined(\n        {\n          maxFeePerGas: overrideField(\n            \"maxFeePerGas\",\n            overrides_ as UserOperationOverrides,\n            feeOptions,\n            userOperation\n          ),\n          maxPriorityFeePerGas: overrideField(\n            \"maxPriorityFeePerGas\",\n            overrides_ as UserOperationOverrides,\n            feeOptions,\n            userOperation\n          ),\n          callGasLimit: overrideField(\n            \"callGasLimit\",\n            overrides_ as UserOperationOverrides,\n            feeOptions,\n            userOperation\n          ),\n          verificationGasLimit: overrideField(\n            \"verificationGasLimit\",\n            overrides_ as UserOperationOverrides,\n            feeOptions,\n            userOperation\n          ),\n          preVerificationGas: overrideField(\n            \"preVerificationGas\",\n            overrides_ as UserOperationOverrides,\n            feeOptions,\n            userOperation\n          ),\n        }\n      );\n\n      if (account.getEntryPoint().version === \"0.7.0\") {\n        const paymasterVerificationGasLimit = overrideField<\"0.7.0\">(\n          \"paymasterVerificationGasLimit\",\n          overrides_ as UserOperationOverrides<\"0.7.0\">,\n          feeOptions,\n          userOperation\n        );\n        if (paymasterVerificationGasLimit != null) {\n          (\n            overrides as RequestGasAndPaymasterAndDataOverrides<\"0.7.0\">\n          ).paymasterVerificationGasLimit = paymasterVerificationGasLimit;\n        }\n\n        const paymasterPostOpGasLimit = overrideField<\"0.7.0\">(\n          \"paymasterPostOpGasLimit\",\n          overrides_ as UserOperationOverrides<\"0.7.0\">,\n          feeOptions,\n          userOperation\n        );\n        if (paymasterPostOpGasLimit != null) {\n          (\n            overrides as RequestGasAndPaymasterAndDataOverrides<\"0.7.0\">\n          ).paymasterPostOpGasLimit = paymasterPostOpGasLimit;\n        }\n      }\n\n      const result = await client.request({\n        method: \"alchemy_requestGasAndPaymasterAndData\",\n        params: [\n          {\n            policyId: config.policyId,\n            entryPoint: account.getEntryPoint().address,\n            userOperation,\n            dummySignature: userOperation.signature,\n            overrides,\n          },\n        ],\n      });\n\n      return {\n        ...struct,\n        ...result,\n      };\n    },\n  };\n}\n\n/**\n * Alchemy gas manager middleware function that returns the paymaster middleware for the client middleware config\n * that calls the [`alchemy_requestPaymasterAndData`](https://docs.alchemy.com/reference/alchemy-requestpaymasteranddata)\n * with gas estimation disabled.\n *\n * @param client client with alchemy methods\n * @param config alchemy gas manager configuration\n * @returns the paymasterAndData middleware for Alchemy gas manager with gas estimation disabled\n */\nconst requestPaymasterAndData: <C extends ClientWithAlchemyMethods>(\n  client: C,\n  config: AlchemyGasManagerConfig\n) => ClientMiddlewareConfig[\"paymasterAndData\"] = (client, config) => ({\n  dummyPaymasterAndData: dummyPaymasterAndData(client, config),\n  paymasterAndData: async (struct, { account }) => {\n    const result = await client.request({\n      method: \"alchemy_requestPaymasterAndData\",\n      params: [\n        {\n          policyId: config.policyId,\n          entryPoint: account.getEntryPoint().address,\n          userOperation: deepHexlify(await resolveProperties(struct)),\n        },\n      ],\n    });\n\n    return {\n      ...struct,\n      ...result,\n    };\n  },\n});\n"]}