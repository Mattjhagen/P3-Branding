"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = exports.DEFAULT_IFRAME_CONTAINER_ID = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const core_1 = require("@wagmi/core");
const manager_js_1 = require("../signer/session/manager.js");
const client_js_1 = require("./store/client.js");
const core_js_1 = require("./store/core.js");
const types_js_1 = require("./store/types.js");
exports.DEFAULT_IFRAME_CONTAINER_ID = "alchemy-signer-iframe-container";
const createConfig = (params) => {
    const { chain, iframeConfig, rootOrgId, rpId, sessionConfig, signerConnection, ssr, storage, connectors, ...connectionConfig } = params;
    const connections = [];
    if (connectionConfig.connections != null) {
        connectionConfig.connections.forEach(({ chain, ...config }) => {
            connections.push({
                ...aa_core_1.ConnectionConfigSchema.parse(config),
                chain,
            });
        });
    }
    else {
        connections.push({
            ...aa_core_1.ConnectionConfigSchema.parse(connectionConfig),
            chain,
        });
    }
    const coreStore = (0, core_js_1.createCoreStore)({
        connections,
        chain,
        storage: storage?.(),
        ssr,
    });
    const clientStore = (0, client_js_1.createClientStore)({
        client: {
            connection: signerConnection ?? connections[0],
            iframeConfig,
            rootOrgId,
            rpId,
        },
        sessionConfig,
        storage: storage?.(sessionConfig?.expirationTimeMs
            ? { sessionLength: sessionConfig.expirationTimeMs }
            : undefined),
        chains: connections.map((x) => x.chain),
        ssr,
    });
    const wagmiConfig = (0, core_1.createConfig)({
        connectors,
        chains: [chain, ...connections.map((c) => c.chain)],
        client: () => config.coreStore.getState().bundlerClient,
        storage: (0, core_1.createStorage)({
            key: `${types_js_1.DEFAULT_STORAGE_KEY}:wagmi`,
            storage: storage
                ? storage()
                : typeof window !== "undefined"
                    ? localStorage
                    : undefined,
        }),
        ssr,
    });
    const config = {
        coreStore,
        clientStore,
        _internal: {
            ssr,
            wagmiConfig,
            storageKey: "alchemy-account-state",
            sessionLength: sessionConfig?.expirationTimeMs ?? manager_js_1.DEFAULT_SESSION_MS,
        },
    };
    return config;
};
exports.createConfig = createConfig;
//# sourceMappingURL=createConfig.js.map