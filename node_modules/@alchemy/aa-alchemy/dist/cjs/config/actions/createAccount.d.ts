import { type CreateLightAccountParams, type CreateMultiOwnerModularAccountParams, type GetLightAccountVersion } from "@alchemy/aa-accounts";
import { type SmartAccountSigner } from "@alchemy/aa-core";
import { type Transport } from "viem";
import type { AlchemyAccountsConfig, SupportedAccountTypes, SupportedAccounts } from "../types";
export type AccountConfig<TAccount extends SupportedAccountTypes> = TAccount extends "LightAccount" ? Omit<CreateLightAccountParams<Transport, SmartAccountSigner, Exclude<GetLightAccountVersion<"LightAccount">, "v2.0.0">>, "signer" | "transport" | "chain"> : Omit<CreateMultiOwnerModularAccountParams, "signer" | "transport" | "chain">;
export type CreateAccountParams<TAccount extends SupportedAccountTypes> = {
    type: TAccount;
    accountParams?: AccountConfig<TAccount>;
};
export declare function createAccount<TAccount extends SupportedAccountTypes>({ type, accountParams: params }: CreateAccountParams<TAccount>, config: AlchemyAccountsConfig): Promise<SupportedAccounts>;
