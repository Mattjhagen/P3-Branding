{"version":3,"file":"reconnect.js","sourceRoot":"","sources":["../../../../src/config/actions/reconnect.ts"],"names":[],"mappings":";;;AAAA,kDAAkD;AAElD,yDAAmD;AACnD,+CAAyC;AAQlC,KAAK,UAAU,SAAS,CAAC,MAA6B;IAC3D,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;IAC/B,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;IACnD,MAAM,cAAc,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC;IAE7D,MAAM,MAAM,GAAG,IAAA,wBAAY,EAAC,YAAY,CAAC,CAAC;IAC1C,MAAM,KAAK,GAAG,IAAA,sBAAQ,EAAC,MAAM,CAAC,CAAC;IAC/B,WAAW,CAAC,QAAQ,CAAC;QACnB,MAAM;KACP,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;QACvD,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC;YAC/C,MAAM,IAAA,gCAAa,EACjB;gBACE,IAAI,EAAE,cAAc;gBACpB,aAAa,EAAE,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC;aACxD,EACD,MAAM,CACP,CAAC;QACJ,CAAC;QAED,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,0BAA0B,CAAC,EAAE,CAAC;YAC3D,MAAM,IAAA,gCAAa,EACjB;gBACE,IAAI,EAAE,0BAA0B;gBAChC,aAAa,EAAE,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,0BAA0B,CAAC;aACpE,EACD,MAAM,CACP,CAAC;QACJ,CAAC;QAED,cAAc,EAAE,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACvD,WAAW,CAAC,QAAQ,CAAC;YACnB,cAAc,EAAE,EAAE;SACnB,CAAC,CAAC;QACH,iBAAiB,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC;AAzCD,8BAyCC","sourcesContent":["import { createSigner } from \"../store/client.js\";\nimport type { AlchemyAccountsConfig } from \"../types\";\nimport { createAccount } from \"./createAccount.js\";\nimport { getChain } from \"./getChain.js\";\n\n/**\n * This method will use the current state in the client store and attempt to restore\n * connected instances of previously used accounts and the signer.\n *\n * @param config the account config which contains the client store\n */\nexport async function reconnect(config: AlchemyAccountsConfig) {\n  const { clientStore } = config;\n  const signerConfig = clientStore.getState().config;\n  const accountConfigs = clientStore.getState().accountConfigs;\n\n  const signer = createSigner(signerConfig);\n  const chain = getChain(config);\n  clientStore.setState({\n    signer,\n  });\n\n  const unsubConnected = signer.on(\"connected\", async () => {\n    if (accountConfigs[chain.id]?.[\"LightAccount\"]) {\n      await createAccount(\n        {\n          type: \"LightAccount\",\n          accountParams: accountConfigs[chain.id][\"LightAccount\"],\n        },\n        config\n      );\n    }\n\n    if (accountConfigs[chain.id]?.[\"MultiOwnerModularAccount\"]) {\n      await createAccount(\n        {\n          type: \"MultiOwnerModularAccount\",\n          accountParams: accountConfigs[chain.id][\"MultiOwnerModularAccount\"],\n        },\n        config\n      );\n    }\n\n    unsubConnected();\n  });\n\n  const unsubDisconnected = signer.on(\"disconnected\", () => {\n    clientStore.setState({\n      accountConfigs: {},\n    });\n    unsubDisconnected();\n  });\n}\n"]}