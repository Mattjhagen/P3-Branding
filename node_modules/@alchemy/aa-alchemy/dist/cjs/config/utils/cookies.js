"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCookie = exports.cookieToInitialState = exports.cookieStorage = void 0;
const core_1 = require("@wagmi/core");
const js_cookie_1 = __importDefault(require("js-cookie"));
const manager_js_1 = require("../../signer/session/manager.js");
const deserialize_js_1 = require("./deserialize.js");
const cookieStorage = (config) => ({
    length: 0,
    clear: function () {
        throw new Error("clearing cookies is not supported as this could lead to unexpected behaviour.\n" +
            " Use removeItem instead or you can manually clear cookies with document.cookie = ''");
    },
    getItem: function (key) {
        if (typeof document === "undefined")
            return null;
        const cookieValue = js_cookie_1.default.get(key);
        return cookieValue ? decodeURIComponent(cookieValue) : null;
    },
    key: function () {
        throw new Error("Function not implemented.");
    },
    removeItem: function (key) {
        if (typeof document === "undefined")
            return;
        js_cookie_1.default.remove(key);
    },
    setItem: function (key, value) {
        if (typeof document === "undefined")
            return;
        js_cookie_1.default.set(key, value, {
            expires: new Date(Date.now() + (config?.sessionLength ?? manager_js_1.DEFAULT_SESSION_MS)),
        });
    },
});
exports.cookieStorage = cookieStorage;
function cookieToInitialState(config, cookie) {
    if (!cookie)
        return;
    const state = parseCookie(cookie, config._internal.storageKey);
    if (!state)
        return;
    const alchemyClientState = (0, deserialize_js_1.deserialize)(state).state;
    const wagmiClientState = (0, core_1.cookieToInitialState)(config._internal.wagmiConfig, cookie);
    return {
        alchemy: alchemyClientState,
        wagmi: wagmiClientState,
    };
}
exports.cookieToInitialState = cookieToInitialState;
function parseCookie(cookie, key) {
    const keyValue = cookie.split("; ").find((x) => x.startsWith(`${key}=`));
    if (!keyValue)
        return undefined;
    return keyValue.substring(key.length + 1);
}
exports.parseCookie = parseCookie;
//# sourceMappingURL=cookies.js.map