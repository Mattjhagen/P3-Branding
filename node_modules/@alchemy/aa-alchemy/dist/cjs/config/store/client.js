"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultAccountState = exports.defaultAccountState = exports.convertSignerStatusToState = exports.createSigner = exports.createClientStore = void 0;
const middleware_1 = require("zustand/middleware");
const vanilla_1 = require("zustand/vanilla");
const signer_js_1 = require("../../signer/signer.js");
const types_js_1 = require("../../signer/types.js");
const createConfig_js_1 = require("../createConfig.js");
const replacer_js_1 = require("../utils/replacer.js");
const reviver_js_1 = require("../utils/reviver.js");
const types_js_2 = require("./types.js");
const createClientStore = (config) => {
    const { storage = typeof window !== "undefined" ? localStorage : undefined, ssr, } = config;
    const clientStore = (0, vanilla_1.createStore)((0, middleware_1.subscribeWithSelector)(storage
        ? (0, middleware_1.persist)(() => createInitialClientState(config), {
            name: types_js_2.DEFAULT_STORAGE_KEY,
            storage: (0, middleware_1.createJSONStorage)(() => storage, {
                replacer: replacer_js_1.bigintMapReplacer,
                reviver: reviver_js_1.bigintMapReviver,
            }),
            skipHydration: ssr,
            partialize: ({ signer, accounts, ...writeableState }) => writeableState,
            version: 1,
        })
        : () => createInitialClientState(config)));
    addClientSideStoreListeners(clientStore);
    return clientStore;
};
exports.createClientStore = createClientStore;
const createSigner = (params) => {
    const { client, sessionConfig } = params;
    const { iframeContainerId } = client.iframeConfig ?? {
        iframeContainerId: createConfig_js_1.DEFAULT_IFRAME_CONTAINER_ID,
    };
    let iframeContainer = document.getElementById(iframeContainerId);
    if (iframeContainer !== null) {
        iframeContainer.innerHTML = "";
        iframeContainer.style.display = "none";
    }
    else {
        iframeContainer = document.createElement("div");
        iframeContainer.id = iframeContainerId;
        iframeContainer.style.display = "none";
        document.body.appendChild(iframeContainer);
    }
    const signer = new signer_js_1.AlchemySigner({
        client: {
            ...client,
            iframeConfig: {
                ...client.iframeConfig,
                iframeContainerId,
            },
        },
        sessionConfig,
    });
    const search = new URLSearchParams(window.location.search);
    if (search.has("bundle")) {
        signer.authenticate({ type: "email", bundle: search.get("bundle") });
    }
    return signer;
};
exports.createSigner = createSigner;
const convertSignerStatusToState = (alchemySignerStatus) => ({
    status: alchemySignerStatus,
    isInitializing: alchemySignerStatus === types_js_1.AlchemySignerStatus.INITIALIZING,
    isAuthenticating: alchemySignerStatus === types_js_1.AlchemySignerStatus.AUTHENTICATING ||
        alchemySignerStatus === types_js_1.AlchemySignerStatus.AWAITING_EMAIL_AUTH,
    isConnected: alchemySignerStatus === types_js_1.AlchemySignerStatus.CONNECTED,
    isDisconnected: alchemySignerStatus === types_js_1.AlchemySignerStatus.DISCONNECTED,
});
exports.convertSignerStatusToState = convertSignerStatusToState;
const staticState = {
    status: "DISCONNECTED",
    account: undefined,
};
const defaultAccountState = () => staticState;
exports.defaultAccountState = defaultAccountState;
const createInitialClientState = (params) => {
    const accountConfigs = createEmptyAccountConfigState(params.chains);
    const baseState = {
        accountConfigs,
        config: params,
        signerStatus: (0, exports.convertSignerStatusToState)(types_js_1.AlchemySignerStatus.INITIALIZING),
    };
    if (typeof window === "undefined") {
        return baseState;
    }
    const accounts = (0, exports.createDefaultAccountState)(params.chains);
    return {
        accounts,
        ...baseState,
    };
};
const addClientSideStoreListeners = (store) => {
    if (typeof window === "undefined") {
        return;
    }
    store.subscribe(({ signer }) => signer, (signer) => {
        if (!signer)
            return;
        signer.on("statusChanged", (status) => {
            store.setState({ signerStatus: (0, exports.convertSignerStatusToState)(status) });
        });
        signer.on("connected", (user) => store.setState({ user }));
        signer.on("disconnected", () => {
            store.setState({
                user: undefined,
                accountConfigs: createEmptyAccountConfigState(store.getState().config.chains),
                accounts: (0, exports.createDefaultAccountState)(store.getState().config.chains),
            });
        });
    }, { fireImmediately: true });
};
const createEmptyAccountConfigState = (chains) => {
    return chains.reduce((acc, chain) => {
        acc[chain.id] = {};
        return acc;
    }, {});
};
const createDefaultAccountState = (chains) => {
    return chains.reduce((acc, chain) => {
        acc[chain.id] = {
            LightAccount: (0, exports.defaultAccountState)(),
            MultiOwnerModularAccount: (0, exports.defaultAccountState)(),
        };
        return acc;
    }, {});
};
exports.createDefaultAccountState = createDefaultAccountState;
//# sourceMappingURL=client.js.map