"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCoreStore = void 0;
const middleware_1 = require("zustand/middleware");
const vanilla_1 = require("zustand/vanilla");
const rpcClient_js_1 = require("../../client/rpcClient.js");
const replacer_js_1 = require("../utils/replacer.js");
const reviver_js_1 = require("../utils/reviver.js");
const types_js_1 = require("./types.js");
const createCoreStore = (params) => {
    const { connections, chain, storage = typeof window !== "undefined" ? localStorage : undefined, ssr, } = params;
    const coreStore = (0, vanilla_1.createStore)((0, middleware_1.subscribeWithSelector)(storage
        ? (0, middleware_1.persist)(() => createInitialCoreState(connections, chain), {
            name: `${types_js_1.DEFAULT_STORAGE_KEY}:core`,
            storage: (0, middleware_1.createJSONStorage)(() => storage, {
                replacer: (key, value) => {
                    if (key === "bundlerClient") {
                        const client = value;
                        return {
                            connection: connections.find((x) => x.chain.id === client.chain.id),
                        };
                    }
                    return (0, replacer_js_1.bigintMapReplacer)(key, value);
                },
                reviver: (key, value) => {
                    if (key === "bundlerClient") {
                        const connection = value;
                        return (0, rpcClient_js_1.createAlchemyPublicRpcClient)({
                            chain: connection.chain,
                            connectionConfig: connection,
                        });
                    }
                    return (0, reviver_js_1.bigintMapReviver)(key, value);
                },
            }),
            version: 1,
            skipHydration: ssr,
        })
        : () => createInitialCoreState(connections, chain)));
    return coreStore;
};
exports.createCoreStore = createCoreStore;
const createInitialCoreState = (connections, chain) => {
    const connectionMap = connections.reduce((acc, connection) => {
        acc.set(connection.chain.id, connection);
        return acc;
    }, new Map());
    if (!connectionMap.has(chain.id)) {
        throw new Error("Chain not found in connections");
    }
    const bundlerClient = (0, rpcClient_js_1.createAlchemyPublicRpcClient)({
        chain,
        connectionConfig: connectionMap.get(chain.id),
    });
    return {
        bundlerClient,
        chain,
        connections: connectionMap,
    };
};
//# sourceMappingURL=core.js.map