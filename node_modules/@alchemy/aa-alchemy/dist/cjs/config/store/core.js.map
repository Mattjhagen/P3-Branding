{"version":3,"file":"core.js","sourceRoot":"","sources":["../../../../src/config/store/core.ts"],"names":[],"mappings":";;;AACA,mDAI4B;AAC5B,6CAA8C;AAC9C,4DAAyE;AAEzE,sDAAyD;AACzD,oDAAuD;AACvD,yCAIoB;AAoBb,MAAM,eAAe,GAAG,CAAC,MAA6B,EAAa,EAAE;IAC1E,MAAM,EACJ,WAAW,EACX,KAAK,EACL,OAAO,GAAG,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,EAClE,GAAG,GACJ,GAAG,MAAM,CAAC;IAIX,MAAM,SAAS,GAAG,IAAA,qBAAW,EAC3B,IAAA,kCAAqB,EACnB,OAAO;QACL,CAAC,CAAC,IAAA,oBAAO,EAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE;YACxD,IAAI,EAAE,GAAG,8BAAmB,OAAO;YACnC,OAAO,EAAE,IAAA,8BAAiB,EAAY,GAAG,EAAE,CAAC,OAAO,EAAE;gBACnD,QAAQ,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACvB,IAAI,GAAG,KAAK,eAAe,EAAE,CAAC;wBAC5B,MAAM,MAAM,GAAG,KAAmC,CAAC;wBACnD,OAAO;4BACL,UAAU,EAAE,WAAW,CAAC,IAAI,CAC1B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE,CACtC;yBACF,CAAC;oBACJ,CAAC;oBACD,OAAO,IAAA,+BAAiB,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBACvC,CAAC;gBACD,OAAO,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACtB,IAAI,GAAG,KAAK,eAAe,EAAE,CAAC;wBAC5B,MAAM,UAAU,GAAG,KAAmB,CAAC;wBACvC,OAAO,IAAA,2CAA4B,EAAC;4BAClC,KAAK,EAAE,UAAU,CAAC,KAAK;4BACvB,gBAAgB,EAAE,UAAU;yBAC7B,CAAC,CAAC;oBACL,CAAC;oBAED,OAAO,IAAA,6BAAgB,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBACtC,CAAC;aACF,CAAC;YACF,OAAO,EAAE,CAAC;YACV,aAAa,EAAE,GAAG;SACnB,CAAC;QACJ,CAAC,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC,WAAW,EAAE,KAAK,CAAC,CACrD,CACF,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AA/CW,QAAA,eAAe,mBA+C1B;AAEF,MAAM,sBAAsB,GAAG,CAC7B,WAAyB,EACzB,KAAY,EACD,EAAE;IACb,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,EAAE;QAC3D,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QACzC,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,IAAI,GAAG,EAAsB,CAAC,CAAC;IAElC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,aAAa,GAAG,IAAA,2CAA4B,EAAC;QACjD,KAAK;QACL,gBAAgB,EAAE,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAE;KAC/C,CAAC,CAAC;IAEH,OAAO;QACL,aAAa;QACb,KAAK;QACL,WAAW,EAAE,aAAa;KAC3B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Chain } from \"viem\";\nimport {\n  createJSONStorage,\n  persist,\n  subscribeWithSelector,\n} from \"zustand/middleware\";\nimport { createStore } from \"zustand/vanilla\";\nimport { createAlchemyPublicRpcClient } from \"../../client/rpcClient.js\";\nimport type { Connection } from \"../types.js\";\nimport { bigintMapReplacer } from \"../utils/replacer.js\";\nimport { bigintMapReviver } from \"../utils/reviver.js\";\nimport {\n  DEFAULT_STORAGE_KEY,\n  type CoreState,\n  type CoreStore,\n} from \"./types.js\";\n\nexport type CreateCoreStoreParams = {\n  connections: Connection[];\n  chain: Chain;\n  storage?: Storage;\n  ssr?: boolean;\n};\n\n/**\n * Create the core store for alchemy accounts. This store contains the bundler client\n * as well as the chain configs (including the initial chain to use)\n *\n * @param params connections configs\n * @param params.connections a collection of chains and their connection configs\n * @param params.chain the initial chain to use\n * @param params.storage the storage to use for persisting the state\n * @param params.ssr whether the store is being created on the server\n * @returns the core store\n */\nexport const createCoreStore = (params: CreateCoreStoreParams): CoreStore => {\n  const {\n    connections,\n    chain,\n    storage = typeof window !== \"undefined\" ? localStorage : undefined,\n    ssr,\n  } = params;\n\n  // State defined in here should work either on the server or on the client\n  // bundler client for example can be used in either setting to make RPC calls\n  const coreStore = createStore(\n    subscribeWithSelector(\n      storage\n        ? persist(() => createInitialCoreState(connections, chain), {\n            name: `${DEFAULT_STORAGE_KEY}:core`,\n            storage: createJSONStorage<CoreState>(() => storage, {\n              replacer: (key, value) => {\n                if (key === \"bundlerClient\") {\n                  const client = value as CoreState[\"bundlerClient\"];\n                  return {\n                    connection: connections.find(\n                      (x) => x.chain.id === client.chain.id\n                    ),\n                  };\n                }\n                return bigintMapReplacer(key, value);\n              },\n              reviver: (key, value) => {\n                if (key === \"bundlerClient\") {\n                  const connection = value as Connection;\n                  return createAlchemyPublicRpcClient({\n                    chain: connection.chain,\n                    connectionConfig: connection,\n                  });\n                }\n\n                return bigintMapReviver(key, value);\n              },\n            }),\n            version: 1,\n            skipHydration: ssr,\n          })\n        : () => createInitialCoreState(connections, chain)\n    )\n  );\n\n  return coreStore;\n};\n\nconst createInitialCoreState = (\n  connections: Connection[],\n  chain: Chain\n): CoreState => {\n  const connectionMap = connections.reduce((acc, connection) => {\n    acc.set(connection.chain.id, connection);\n    return acc;\n  }, new Map<number, Connection>());\n\n  if (!connectionMap.has(chain.id)) {\n    throw new Error(\"Chain not found in connections\");\n  }\n\n  const bundlerClient = createAlchemyPublicRpcClient({\n    chain,\n    connectionConfig: connectionMap.get(chain.id)!,\n  });\n\n  return {\n    bundlerClient,\n    chain,\n    connections: connectionMap,\n  };\n};\n"]}