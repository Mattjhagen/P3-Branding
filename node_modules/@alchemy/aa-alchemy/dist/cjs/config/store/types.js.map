{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/config/store/types.ts"],"names":[],"mappings":";;;AAmBa,QAAA,mBAAmB,GAAG,uBAAuB,CAAC","sourcesContent":["import type { State as WagmiState } from \"@wagmi/core\";\nimport type { Address, Chain } from \"viem\";\nimport type { PartialBy } from \"viem/chains\";\nimport type { Mutate, StoreApi } from \"zustand/vanilla\";\nimport type { ClientWithAlchemyMethods } from \"../../client/types\";\nimport type {\n  AlchemySigner,\n  AlchemySignerClient,\n  AlchemySignerParams,\n  AlchemySignerStatus,\n  User,\n} from \"../../signer\";\nimport type { AccountConfig } from \"../actions/createAccount\";\nimport type {\n  Connection,\n  SupportedAccount,\n  SupportedAccountTypes,\n} from \"../types\";\n\nexport const DEFAULT_STORAGE_KEY = \"alchemy-account-state\";\n\nexport type AccountState<TAccount extends SupportedAccountTypes> =\n  | {\n      status: \"INITIALIZING\";\n      account: Promise<SupportedAccount<TAccount>>;\n    }\n  | {\n      status: \"RECONNECTING\";\n      account: {\n        address: Address;\n      };\n    }\n  | {\n      status: \"READY\";\n      account: SupportedAccount<TAccount>;\n    }\n  | { status: \"DISCONNECTED\"; account: undefined }\n  | { status: \"ERROR\"; account: undefined; error: Error };\n\nexport type CreateClientStoreParams = {\n  client: PartialBy<\n    Exclude<AlchemySignerParams[\"client\"], AlchemySignerClient>,\n    \"iframeConfig\"\n  >;\n  chains: Chain[];\n  sessionConfig?: AlchemySignerParams[\"sessionConfig\"];\n  storage?: Storage;\n  ssr?: boolean;\n};\n\nexport type SignerStatus = {\n  status: AlchemySignerStatus;\n  isInitializing: boolean;\n  isAuthenticating: boolean;\n  isConnected: boolean;\n  isDisconnected: boolean;\n};\n\nexport type ClientState = {\n  // non-serializable\n  // getting this state should throw an error if not on the client\n  signer?: AlchemySigner;\n  accounts?: {\n    [chain: number]: {\n      [key in SupportedAccountTypes]: AccountState<key>;\n    };\n  };\n  // serializable state\n  // NOTE: in some cases this can be serialized to cookie storage\n  // be mindful of how big this gets. cookie limit 4KB\n  config: CreateClientStoreParams;\n  accountConfigs: {\n    [chain: number]: Partial<{\n      [key in SupportedAccountTypes]: AccountConfig<key>;\n    }>;\n  };\n  user?: User;\n  signerStatus: SignerStatus;\n};\n\nexport type ClientStore = Mutate<\n  StoreApi<ClientState>,\n  [[\"zustand/subscribeWithSelector\", never], [\"zustand/persist\", ClientState]]\n>;\n\nexport type CoreState = {\n  bundlerClient: ClientWithAlchemyMethods;\n  chain: Chain;\n  connections: Map<number, Connection>;\n};\n\nexport type CoreStore = Mutate<\n  StoreApi<CoreState>,\n  [[\"zustand/subscribeWithSelector\", never], [\"zustand/persist\", CoreState]]\n>;\n\nexport type StoredState =\n  | Omit<ClientState, \"signer\" | \"accounts\">\n  | {\n      alchemy: Omit<ClientState, \"signer\" | \"accounts\">;\n      wagmi?: WagmiState;\n    };\n"]}