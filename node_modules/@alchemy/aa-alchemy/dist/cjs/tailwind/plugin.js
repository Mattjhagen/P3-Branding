"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAccountKitUi = exports.accountKitUi = exports.getAccountKitContentPath = void 0;
const plugin_1 = __importDefault(require("tailwindcss/plugin"));
const buttons_js_1 = require("./components/buttons.js");
const colorsvars_js_1 = require("./components/colorsvars.js");
const form_controls_js_1 = require("./components/form-controls.js");
const input_js_1 = require("./components/input.js");
const modal_js_1 = require("./components/modal.js");
const theme_js_1 = require("./theme.js");
const borders_js_1 = require("./utilities/borders.js");
const utils_js_1 = require("./utils.js");
const getAccountKitContentPath = () => {
    const pathToMe = require.resolve("@alchemy/aa-alchemy");
    const contentPath = `${pathToMe.replace("index.js", "")}**/*.{js,ts,jsx,tsx,mdx}`;
    return contentPath;
};
exports.getAccountKitContentPath = getAccountKitContentPath;
const accountKitUi = (themeOverride) => {
    const defaultTheme = (0, theme_js_1.createDefaultTheme)();
    const accountKitTheme = (0, utils_js_1.apply)(defaultTheme, themeOverride);
    const { colors, ...rest } = accountKitTheme;
    return (0, plugin_1.default)(({ addComponents, addUtilities }) => {
        addUtilities(borders_js_1.borderUtilities);
        addComponents((0, colorsvars_js_1.colorVariables)(accountKitTheme));
        addComponents(buttons_js_1.buttonComponents);
        addComponents(input_js_1.inputComponents);
        addComponents(form_controls_js_1.formControlComponents);
        addComponents(modal_js_1.modalComponents);
    }, {
        theme: {
            extend: {
                ...rest,
                colors: Object.keys(colors).reduce((acc, key) => ({
                    ...acc,
                    [key]: `var(${(0, utils_js_1.getColorVariableName)(key)})`,
                }), {}),
            },
        },
    });
};
exports.accountKitUi = accountKitUi;
const withAccountKitUi = (config, themeOverride) => ({
    ...config,
    content: Array.isArray(config.content)
        ? [...config.content, (0, exports.getAccountKitContentPath)()]
        : {
            ...config.content,
            files: [...config.content.files, (0, exports.getAccountKitContentPath)()],
        },
    plugins: [...(config.plugins ?? []), (0, exports.accountKitUi)(themeOverride)],
});
exports.withAccountKitUi = withAccountKitUi;
//# sourceMappingURL=plugin.js.map