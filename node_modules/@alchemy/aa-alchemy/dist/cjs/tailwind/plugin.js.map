{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../../src/tailwind/plugin.ts"],"names":[],"mappings":";;;;;;AACA,gEAAwC;AACxC,wDAA2D;AAC3D,8DAA4D;AAC5D,oEAAsE;AACtE,oDAAwD;AACxD,oDAAwD;AACxD,yCAAgD;AAEhD,uDAAyD;AACzD,yCAAyD;AA2BlD,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IACxD,MAAM,WAAW,GAAG,GAAG,QAAQ,CAAC,OAAO,CACrC,UAAU,EACV,EAAE,CACH,0BAA0B,CAAC;IAE5B,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AARW,QAAA,wBAAwB,4BAQnC;AA0BK,MAAM,YAAY,GAEH,CAAC,aAAa,EAAE,EAAE;IACtC,MAAM,YAAY,GAAG,IAAA,6BAAkB,GAAE,CAAC;IAC1C,MAAM,eAAe,GAAG,IAAA,gBAAK,EAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IAC3D,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,eAAe,CAAC;IAE5C,OAAO,IAAA,gBAAM,EACX,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE;QAElC,YAAY,CAAC,4BAAe,CAAC,CAAC;QAG9B,aAAa,CAAC,IAAA,8BAAc,EAAC,eAAe,CAAC,CAAC,CAAC;QAC/C,aAAa,CAAC,6BAAgB,CAAC,CAAC;QAChC,aAAa,CAAC,0BAAe,CAAC,CAAC;QAC/B,aAAa,CAAC,wCAAqB,CAAC,CAAC;QACrC,aAAa,CAAC,0BAAe,CAAC,CAAC;IACjC,CAAC,EACD;QACE,KAAK,EAAE;YACL,MAAM,EAAE;gBACN,GAAG,IAAI;gBACP,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAChC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;oBACb,GAAG,GAAG;oBACN,CAAC,GAAG,CAAC,EAAE,OAAO,IAAA,+BAAoB,EAChC,GAA2B,CAC5B,GAAG;iBACL,CAAC,EACF,EAA0C,CAC3C;aACF;SACF;KACF,CACF,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,YAAY,gBAoCvB;AASK,MAAM,gBAAgB,GAAG,CAC9B,MAAsB,EACtB,aAAuC,EACvB,EAAE,CAAC,CAAC;IACpB,GAAG,MAAM;IACT,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;QACpC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,IAAA,gCAAwB,GAAE,CAAC;QACjD,CAAC,CAAC;YACE,GAAG,MAAM,CAAC,OAAO;YACjB,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,IAAA,gCAAwB,GAAE,CAAC;SAC7D;IAEL,OAAO,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,IAAA,oBAAY,EAAC,aAAa,CAAC,CAAC;CAClE,CAAC,CAAC;AAbU,QAAA,gBAAgB,oBAa1B","sourcesContent":["import type { Config as TailwindConfig } from \"tailwindcss\";\nimport plugin from \"tailwindcss/plugin\";\nimport { buttonComponents } from \"./components/buttons.js\";\nimport { colorVariables } from \"./components/colorsvars.js\";\nimport { formControlComponents } from \"./components/form-controls.js\";\nimport { inputComponents } from \"./components/input.js\";\nimport { modalComponents } from \"./components/modal.js\";\nimport { createDefaultTheme } from \"./theme.js\";\nimport type { AccountKitThemeColor, AccountKitThemeOverride } from \"./types\";\nimport { borderUtilities } from \"./utilities/borders.js\";\nimport { apply, getColorVariableName } from \"./utils.js\";\n\ntype TailWindPlugin = ReturnType<typeof plugin>;\n\n/**\n * Get the path to the aa-alchemy package and the tailwind content.\n * This is used within the tailwind.config.js to include the aa-alchemy content.\n *\n * @example\n * ```ts\n *\n * import accountKitUi, { getAccountKitContentPath } from \"@alchemy/aa-alchemy/tailwind\";\n * import type { Config } from \"tailwindcss\";\n *\n * const config: Config = {\n *  content: [\n *    ...otheContetPaths\n *   getAccountKitContentPath()\n *  ],\n *  theme: {},\n *  plugins: [accountKitUi()],\n * };\n *\n * export default config;\n * ```\n * @returns The resolved path to the aa-alchemy package and the tailwind content\n */\nexport const getAccountKitContentPath = () => {\n  const pathToMe = require.resolve(\"@alchemy/aa-alchemy\");\n  const contentPath = `${pathToMe.replace(\n    \"index.js\",\n    \"\"\n  )}**/*.{js,ts,jsx,tsx,mdx}`;\n\n  return contentPath;\n};\n\n/**\n * Given an optional theme override, returns a tailwind plugin that\n * creates all of the necessary css to use the account kit ui components.\n *\n * @example\n * ```ts\n *\n * import accountKitUi, { getAccountKitContentPath } from \"@alchemy/aa-alchemy/tailwind\";\n * import type { Config } from \"tailwindcss\";\n *\n * const config: Config = {\n *  content: [\n *    ...otheContetPaths\n *   getAccountKitContentPath()\n *  ],\n *  theme: {},\n *  plugins: [accountKitUi()],\n * };\n *\n * export default config;\n * ```\n * @param themeOverride optional parameter that allows for overriding any of the default account kit theme values\n * @returns a TailwindPlugin to be used within the tailwind.config.js\n */\nexport const accountKitUi: (\n  themeOverride?: AccountKitThemeOverride\n) => TailWindPlugin = (themeOverride) => {\n  const defaultTheme = createDefaultTheme();\n  const accountKitTheme = apply(defaultTheme, themeOverride);\n  const { colors, ...rest } = accountKitTheme;\n\n  return plugin(\n    ({ addComponents, addUtilities }) => {\n      // utilities\n      addUtilities(borderUtilities);\n\n      // components\n      addComponents(colorVariables(accountKitTheme));\n      addComponents(buttonComponents);\n      addComponents(inputComponents);\n      addComponents(formControlComponents);\n      addComponents(modalComponents);\n    },\n    {\n      theme: {\n        extend: {\n          ...rest,\n          colors: Object.keys(colors).reduce(\n            (acc, key) => ({\n              ...acc,\n              [key]: `var(${getColorVariableName(\n                key as AccountKitThemeColor\n              )})`,\n            }),\n            {} as Record<AccountKitThemeColor, string>\n          ),\n        },\n      },\n    }\n  );\n};\n\n/**\n * A utility function for augmenting an existing tailwind config with the account kit ui components\n *\n * @param config the existing tailwind config\n * @param themeOverride optional parameter that allows overrides to Account Kit UI theme styles\n * @returns the augmented tailwind config\n */\nexport const withAccountKitUi = (\n  config: TailwindConfig,\n  themeOverride?: AccountKitThemeOverride\n): TailwindConfig => ({\n  ...config,\n  content: Array.isArray(config.content)\n    ? [...config.content, getAccountKitContentPath()]\n    : {\n        ...config.content,\n        files: [...config.content.files, getAccountKitContentPath()],\n      },\n  // TODO: this isn't good. it means if someone is already using daisy then we'll end up destroying their config\n  plugins: [...(config.plugins ?? []), accountKitUi(themeOverride)],\n});\n"]}