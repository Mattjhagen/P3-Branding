{"version":3,"file":"simulateUserOperationChanges.js","sourceRoot":"","sources":["../../../src/actions/simulateUserOperationChanges.ts"],"names":[],"mappings":";;;AAAA,8CAM0B;AAE1B,6FAAuF;AAIhF,MAAM,4BAA4B,GAQiB,KAAK,EAC7D,MAAM,EACN,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE,EAClD,EAAE;IACF,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,8BAAoB,EAAE,CAAC;IACnC,CAAC;IAED,IAAI,CAAC,IAAA,4DAA2B,EAAC,MAAM,CAAC,EAAE,CAAC;QACzC,MAAM,IAAI,iCAAuB,CAC/B,2BAA2B,EAC3B,mCAAmC,EACnC,MAAM,CACP,CAAC;IACJ,CAAC;IAED,MAAM,QAAQ,GAAG,IAAA,qBAAW,EAC1B,MAAM,MAAM,CAAC,kBAAkB,CAAC;QAC9B,GAAG,MAAM;QACT,OAAO;QACP,SAAS;KACV,CAAC,CACH,CAAC;IAEF,OAAO,MAAM,CAAC,OAAO,CAAC;QACpB,MAAM,EAAE,2CAA2C;QACnD,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC;KACpD,CAAC,CAAC;AACL,CAAC,CAAC;AApCW,QAAA,4BAA4B,gCAoCvC","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  deepHexlify,\n  type SendUserOperationParameters,\n  type SmartContractAccount,\n} from \"@alchemy/aa-core\";\nimport type { Chain, Client, Transport } from \"viem\";\nimport { isAlchemySmartAccountClient } from \"../client/isAlchemySmartAccountClient.js\";\nimport type { AlchemyRpcSchema } from \"../client/types\";\nimport type { SimulateUserOperationAssetChangesResponse } from \"./types\";\n\nexport const simulateUserOperationChanges: <\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: Client<Transport, TChain, TAccount, AlchemyRpcSchema>,\n  args: SendUserOperationParameters<TAccount>\n) => Promise<SimulateUserOperationAssetChangesResponse> = async (\n  client,\n  { account = client.account, overrides, ...params }\n) => {\n  if (!account) {\n    throw new AccountNotFoundError();\n  }\n\n  if (!isAlchemySmartAccountClient(client)) {\n    throw new IncompatibleClientError(\n      \"AlchemySmartAccountClient\",\n      \"SimulateUserOperationAssetChanges\",\n      client\n    );\n  }\n\n  const uoStruct = deepHexlify(\n    await client.buildUserOperation({\n      ...params,\n      account,\n      overrides,\n    })\n  );\n\n  return client.request({\n    method: \"alchemy_simulateUserOperationAssetChanges\",\n    params: [uoStruct, account.getEntryPoint().address],\n  });\n};\n"]}