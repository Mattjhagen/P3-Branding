{"version":3,"file":"lightAccountClient.js","sourceRoot":"","sources":["../../../src/client/lightAccountClient.ts"],"names":[],"mappings":";;;AAAA,sDAM8B;AAE9B,+BAAgF;AAChF,4CAA2D;AAC3D,0FAAuG;AACvG,iDAA8D;AA8BvD,KAAK,UAAU,+BAA+B,CACnD,MAAuC;IAEvC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,gBAAgB,EAAE,GACxC,uCAA2B,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,IAAA,2CAA4B,EAAC;QAC1C,KAAK;QACL,gBAAgB;KACjB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,IAAA,gCAAkB,EAAC;QACvC,SAAS,EAAE,IAAA,aAAM,EAAC,MAAM,CAAC;QACzB,GAAG,MAAM;KACV,CAAC,CAAC;IAEH,OAAO,IAAA,2EAA4C,EAAC;QAClD,GAAG,MAAM;QACT,MAAM;QACN,OAAO;QACP,IAAI;KACL,CAAC,CAAC,MAAM,CAAC,uCAAyB,CAAC,CAAC;AACvC,CAAC;AAtBD,0EAsBC","sourcesContent":["import {\n  createLightAccount,\n  lightAccountClientActions,\n  type CreateLightAccountParams,\n  type LightAccount,\n  type LightAccountClientActions,\n} from \"@alchemy/aa-accounts\";\nimport type { HttpTransport, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { custom, type Chain, type CustomTransport, type Transport } from \"viem\";\nimport { AlchemyProviderConfigSchema } from \"../schema.js\";\nimport { createAlchemySmartAccountClientFromRpcClient } from \"./internal/smartAccountClientFromRpc.js\";\nimport { createAlchemyPublicRpcClient } from \"./rpcClient.js\";\nimport {\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"./smartAccountClient.js\";\n\nexport type AlchemyLightAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateLightAccountParams<HttpTransport, TSigner>,\n  \"transport\" | \"chain\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<Transport, Chain, LightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport async function createLightAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyLightAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    CustomTransport,\n    Chain | undefined,\n    LightAccount<TSigner>,\n    LightAccountClientActions<TSigner>\n  >\n>;\n\nexport async function createLightAccountAlchemyClient(\n  config: AlchemyLightAccountClientConfig\n): Promise<AlchemySmartAccountClient> {\n  const { chain, opts, ...connectionConfig } =\n    AlchemyProviderConfigSchema.parse(config);\n\n  const client = createAlchemyPublicRpcClient({\n    chain,\n    connectionConfig,\n  });\n\n  const account = await createLightAccount({\n    transport: custom(client),\n    ...config,\n  });\n\n  return createAlchemySmartAccountClientFromRpcClient({\n    ...config,\n    client,\n    account,\n    opts,\n  }).extend(lightAccountClientActions);\n}\n"]}