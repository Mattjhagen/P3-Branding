{"version":3,"file":"multiOwnerLightAccountClient.js","sourceRoot":"","sources":["../../../src/client/multiOwnerLightAccountClient.ts"],"names":[],"mappings":";;;AAAA,sDAM8B;AAE9B,+BAAgF;AAChF,4CAA2D;AAC3D,0FAAuG;AACvG,iDAA8D;AAkCvD,KAAK,UAAU,yCAAyC,CAC7D,MAAiD;IAEjD,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,gBAAgB,EAAE,GACxC,uCAA2B,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,IAAA,2CAA4B,EAAC;QAC1C,KAAK;QACL,gBAAgB;KACjB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,IAAA,0CAA4B,EAAC;QACjD,SAAS,EAAE,IAAA,aAAM,EAAC,MAAM,CAAC;QACzB,GAAG,MAAM;KACV,CAAC,CAAC;IAEH,OAAO,IAAA,2EAA4C,EAAC;QAClD,GAAG,MAAM;QACT,MAAM;QACN,OAAO;QACP,IAAI;KACL,CAAC,CAAC,MAAM,CAAC,iDAAmC,CAAC,CAAC;AACjD,CAAC;AAtBD,8FAsBC","sourcesContent":["import {\n  createMultiOwnerLightAccount,\n  multiOwnerLightAccountClientActions,\n  type CreateMultiOwnerLightAccountParams,\n  type MultiOwnerLightAccount,\n  type MultiOwnerLightAccountClientActions,\n} from \"@alchemy/aa-accounts\";\nimport type { HttpTransport, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { custom, type Chain, type CustomTransport, type Transport } from \"viem\";\nimport { AlchemyProviderConfigSchema } from \"../schema.js\";\nimport { createAlchemySmartAccountClientFromRpcClient } from \"./internal/smartAccountClientFromRpc.js\";\nimport { createAlchemyPublicRpcClient } from \"./rpcClient.js\";\nimport {\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"./smartAccountClient.js\";\n\nexport type AlchemyMultiOwnerLightAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultiOwnerLightAccountParams<HttpTransport, TSigner>,\n  \"transport\" | \"chain\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<\n      Transport,\n      Chain,\n      MultiOwnerLightAccount<TSigner>\n    >,\n    \"account\"\n  >;\n\nexport async function createMultiOwnerLightAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyMultiOwnerLightAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    CustomTransport,\n    Chain | undefined,\n    MultiOwnerLightAccount<TSigner>,\n    MultiOwnerLightAccountClientActions<TSigner>\n  >\n>;\n\nexport async function createMultiOwnerLightAccountAlchemyClient(\n  config: AlchemyMultiOwnerLightAccountClientConfig\n): Promise<AlchemySmartAccountClient> {\n  const { chain, opts, ...connectionConfig } =\n    AlchemyProviderConfigSchema.parse(config);\n\n  const client = createAlchemyPublicRpcClient({\n    chain,\n    connectionConfig,\n  });\n\n  const account = await createMultiOwnerLightAccount({\n    transport: custom(client),\n    ...config,\n  });\n\n  return createAlchemySmartAccountClientFromRpcClient({\n    ...config,\n    client,\n    account,\n    opts,\n  }).extend(multiOwnerLightAccountClientActions);\n}\n"]}