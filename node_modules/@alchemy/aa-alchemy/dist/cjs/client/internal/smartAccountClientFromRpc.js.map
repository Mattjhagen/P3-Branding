{"version":3,"file":"smartAccountClientFromRpc.js","sourceRoot":"","sources":["../../../../src/client/internal/smartAccountClientFromRpc.ts"],"names":[],"mappings":";;;AAAA,8CAO0B;AAE1B,sEAAuE;AACvE,kEAA6E;AAC7E,0FAA2F;AAC3F,mEAA+D;AAmB/D,SAAgB,mBAAmB,CAEjC,OAAiB;IACjB,OAAO,EAAE,uBAAuB,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE,CAAC;AACrE,CAAC;AAJD,kDAIC;AA2BD,SAAgB,4CAA4C,CAAC,EAC3D,IAAI,EACJ,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,YAAY,EACZ,YAAY,EACZ,gBAAgB,EAChB,iBAAiB,EACjB,MAAM,GACuC;IAC7C,MAAM,UAAU,GACd,IAAI,EAAE,UAAU,IAAI,IAAA,2CAAiC,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEtE,MAAM,SAAS,GAAG,IAAA,8CAAoC,EAAC;QACrD,OAAO;QACP,MAAM;QACN,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE;YACJ,GAAG,IAAI;YACP,UAAU;SACX;QACD,gBAAgB,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;YACvC,IAAI,IAAA,kCAAwB,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC3C,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1D,CAAC;YAED,OAAO,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACpE,CAAC;QACD,YAAY,EAAE,YAAY,IAAI,IAAA,qCAAmB,EAAC,MAAM,CAAC;QACzD,sBAAsB,EAAE,aAAa;YACnC,CAAC,CAAC,IAAA,yDAA6B,EAAC,MAAM,CAAC;YACvC,CAAC,CAAC,SAAS;QACb,YAAY;QACZ,GAAG,CAAC,gBAAgB;YAClB,IAAA,2CAA2B,EAAC,MAAM,EAAE;gBAClC,GAAG,gBAAgB;gBACnB,oBAAoB,EAAE;oBACpB,GAAG,gBAAgB,CAAC,oBAAoB;oBACxC,oBAAoB,EAClB,gBAAgB,CAAC,oBAAoB,EAAE,oBAAoB;wBAC3D,KAAK;oBACP,qBAAqB,EACnB,gBAAgB,CAAC,oBAAoB,EAAE,qBAAqB;wBAC5D,YAAY;oBACd,oBAAoB,EAClB,gBAAgB,CAAC,oBAAoB,EAAE,oBAAoB;wBAC3D,YAAY;iBACf;aACF,CAAC,CAAC;QACL,iBAAiB;KAClB,CAAC,CAAC,MAAM,CAAC,gCAAc,CAAC,CAAC;IAE1B,IAAI,OAAO,IAAI,IAAA,kCAAwB,EAAC,OAAO,CAAC,EAAE,CAAC;QACjD,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AA1DD,oGA0DC","sourcesContent":["import {\n  createSmartAccountClientFromExisting,\n  getDefaultUserOperationFeeOptions,\n  isSmartAccountWithSigner,\n  type SmartContractAccount,\n  type SmartContractAccountWithSigner,\n  type UserOperationContext,\n} from \"@alchemy/aa-core\";\nimport type { Chain, CustomTransport, Transport } from \"viem\";\nimport { alchemyFeeEstimator } from \"../../middleware/feeEstimator.js\";\nimport { alchemyGasManagerMiddleware } from \"../../middleware/gasManager.js\";\nimport { alchemyUserOperationSimulator } from \"../../middleware/userOperationSimulator.js\";\nimport { alchemyActions } from \"../decorators/smartAccount.js\";\nimport type {\n  AlchemySmartAccountClient,\n  AlchemySmartAccountClientConfig,\n} from \"../smartAccountClient\";\nimport type { ClientWithAlchemyMethods } from \"../types\";\n\nexport type CreateAlchemySmartAccountClientFromRpcClient<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n> = Omit<\n  AlchemySmartAccountClientConfig<Transport, Chain, TAccount, TContext>,\n  \"rpcUrl\" | \"chain\" | \"apiKey\" | \"jwt\"\n> & { client: ClientWithAlchemyMethods };\n\nexport function getSignerTypeHeader<\n  TAccount extends SmartContractAccountWithSigner\n>(account: TAccount) {\n  return { \"Alchemy-Aa-Sdk-Signer\": account.getSigner().signerType };\n}\n\n/**\n * Helper method meant to be used internally to create an alchemy smart account client\n * from an existing Alchemy Rpc Client\n *\n * @param args configuration for the client\n * @returns a smart account client configured to use Alchemy's RPC\n */\nexport function createAlchemySmartAccountClientFromRpcClient<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n>(\n  args: CreateAlchemySmartAccountClientFromRpcClient<TAccount, TContext>\n): AlchemySmartAccountClient<\n  CustomTransport,\n  TChain,\n  TAccount,\n  Record<string, never>,\n  TContext\n>;\n\nexport function createAlchemySmartAccountClientFromRpcClient({\n  opts,\n  account,\n  useSimulation,\n  gasManagerConfig,\n  feeEstimator,\n  gasEstimator,\n  customMiddleware,\n  signUserOperation,\n  client,\n}: CreateAlchemySmartAccountClientFromRpcClient): AlchemySmartAccountClient {\n  const feeOptions =\n    opts?.feeOptions ?? getDefaultUserOperationFeeOptions(client.chain);\n\n  const scaClient = createSmartAccountClientFromExisting({\n    account,\n    client,\n    type: \"AlchemySmartAccountClient\",\n    opts: {\n      ...opts,\n      feeOptions,\n    },\n    customMiddleware: async (struct, args) => {\n      if (isSmartAccountWithSigner(args.account)) {\n        client.updateHeaders(getSignerTypeHeader(args.account));\n      }\n\n      return customMiddleware ? customMiddleware(struct, args) : struct;\n    },\n    feeEstimator: feeEstimator ?? alchemyFeeEstimator(client),\n    userOperationSimulator: useSimulation\n      ? alchemyUserOperationSimulator(client)\n      : undefined,\n    gasEstimator,\n    ...(gasManagerConfig &&\n      alchemyGasManagerMiddleware(client, {\n        ...gasManagerConfig,\n        gasEstimationOptions: {\n          ...gasManagerConfig.gasEstimationOptions,\n          disableGasEstimation:\n            gasManagerConfig.gasEstimationOptions?.disableGasEstimation ??\n            false,\n          fallbackFeeDataGetter:\n            gasManagerConfig.gasEstimationOptions?.fallbackFeeDataGetter ??\n            feeEstimator,\n          fallbackGasEstimator:\n            gasManagerConfig.gasEstimationOptions?.fallbackGasEstimator ??\n            gasEstimator,\n        },\n      })),\n    signUserOperation,\n  }).extend(alchemyActions);\n\n  if (account && isSmartAccountWithSigner(account)) {\n    client.updateHeaders(getSignerTypeHeader(account));\n  }\n\n  return scaClient;\n}\n"]}