"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAlchemySmartAccountClientFromRpcClient = exports.getSignerTypeHeader = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const feeEstimator_js_1 = require("../../middleware/feeEstimator.js");
const gasManager_js_1 = require("../../middleware/gasManager.js");
const userOperationSimulator_js_1 = require("../../middleware/userOperationSimulator.js");
const smartAccount_js_1 = require("../decorators/smartAccount.js");
function getSignerTypeHeader(account) {
    return { "Alchemy-Aa-Sdk-Signer": account.getSigner().signerType };
}
exports.getSignerTypeHeader = getSignerTypeHeader;
function createAlchemySmartAccountClientFromRpcClient({ opts, account, useSimulation, gasManagerConfig, feeEstimator, gasEstimator, customMiddleware, signUserOperation, client, }) {
    const feeOptions = opts?.feeOptions ?? (0, aa_core_1.getDefaultUserOperationFeeOptions)(client.chain);
    const scaClient = (0, aa_core_1.createSmartAccountClientFromExisting)({
        account,
        client,
        type: "AlchemySmartAccountClient",
        opts: {
            ...opts,
            feeOptions,
        },
        customMiddleware: async (struct, args) => {
            if ((0, aa_core_1.isSmartAccountWithSigner)(args.account)) {
                client.updateHeaders(getSignerTypeHeader(args.account));
            }
            return customMiddleware ? customMiddleware(struct, args) : struct;
        },
        feeEstimator: feeEstimator ?? (0, feeEstimator_js_1.alchemyFeeEstimator)(client),
        userOperationSimulator: useSimulation
            ? (0, userOperationSimulator_js_1.alchemyUserOperationSimulator)(client)
            : undefined,
        gasEstimator,
        ...(gasManagerConfig &&
            (0, gasManager_js_1.alchemyGasManagerMiddleware)(client, {
                ...gasManagerConfig,
                gasEstimationOptions: {
                    ...gasManagerConfig.gasEstimationOptions,
                    disableGasEstimation: gasManagerConfig.gasEstimationOptions?.disableGasEstimation ??
                        false,
                    fallbackFeeDataGetter: gasManagerConfig.gasEstimationOptions?.fallbackFeeDataGetter ??
                        feeEstimator,
                    fallbackGasEstimator: gasManagerConfig.gasEstimationOptions?.fallbackGasEstimator ??
                        gasEstimator,
                },
            })),
        signUserOperation,
    }).extend(smartAccount_js_1.alchemyActions);
    if (account && (0, aa_core_1.isSmartAccountWithSigner)(account)) {
        client.updateHeaders(getSignerTypeHeader(account));
    }
    return scaClient;
}
exports.createAlchemySmartAccountClientFromRpcClient = createAlchemySmartAccountClientFromRpcClient;
//# sourceMappingURL=smartAccountClientFromRpc.js.map