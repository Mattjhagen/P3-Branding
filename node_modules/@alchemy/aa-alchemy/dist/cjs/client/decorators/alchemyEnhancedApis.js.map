{"version":3,"file":"alchemyEnhancedApis.js","sourceRoot":"","sources":["../../../../src/client/decorators/alchemyEnhancedApis.ts"],"names":[],"mappings":";;;AAGA,+CAAyD;AAalD,MAAM,yBAAyB,GAUX,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE;IACjD,MAAM,UAAU,GAAG,kCAAsB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAEzD,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;QACrC,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,SACa,CAAC;QAErC,IACE,MAAM,CAAC,SAAS,CAAC,IAAI,KAAK,MAAM;YAChC,OAAO,CAAC,MAAM,CAAC,GAAG;YAClB,OAAO,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,EAC1B,CAAC;YACD,MAAM,IAAI,KAAK,CACb,yEAAyE,CAC1E,CAAC;QACJ,CAAC;IACH,CAAC;IAED,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,GAAG,EAAE,UAAU,CAAC,GAAG;QACnB,QAAQ,EAAE,UAAU,CAAC,QAAQ;QAC7B,KAAK,EAAE,UAAU,CAAC,KAAK;QACvB,EAAE,EAAE,UAAU,CAAC,EAAE;QACjB,MAAM,EAAE,UAAU,CAAC,MAAM;QACzB,MAAM,EAAE,UAAU,CAAC,MAAM;KAC1B,CAAC;AACJ,CAAC,CAAC;AArCW,QAAA,yBAAyB,6BAqCpC","sourcesContent":["import type { SmartContractAccount } from \"@alchemy/aa-core\";\nimport type { Alchemy } from \"alchemy-sdk\";\nimport type { Chain, HttpTransport, Transport } from \"viem\";\nimport { AlchemySdkClientSchema } from \"../../schema.js\";\nimport type { AlchemySmartAccountClient } from \"../smartAccountClient.js\";\n\nexport type AlchemyEnhancedApis = {\n  core: Alchemy[\"core\"];\n  nft: Alchemy[\"nft\"];\n  transact: Alchemy[\"transact\"];\n  debug: Alchemy[\"debug\"];\n  ws: Alchemy[\"ws\"];\n  notify: Alchemy[\"notify\"];\n  config: Alchemy[\"config\"];\n};\n\nexport const alchemyEnhancedApiActions: (\n  alchemy: Alchemy\n) => <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined\n>(\n  client: AlchemySmartAccountClient<TTransport, TChain, TAccount>\n) => AlchemyEnhancedApis = (alchemy) => (client) => {\n  const alchemySdk = AlchemySdkClientSchema.parse(alchemy);\n\n  if (client.transport.type === \"http\") {\n    const { url } = client.transport as ReturnType<HttpTransport>[\"config\"] &\n      ReturnType<HttpTransport>[\"value\"];\n\n    if (\n      client.transport.type === \"http\" &&\n      alchemy.config.url &&\n      alchemy.config.url !== url\n    ) {\n      throw new Error(\n        \"Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL\"\n      );\n    }\n  }\n\n  return {\n    core: alchemySdk.core,\n    nft: alchemySdk.nft,\n    transact: alchemySdk.transact,\n    debug: alchemySdk.debug,\n    ws: alchemySdk.ws,\n    notify: alchemySdk.notify,\n    config: alchemySdk.config,\n  };\n};\n"]}