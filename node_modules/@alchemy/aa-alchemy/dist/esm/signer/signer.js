import { z } from "zod";
import { BaseAlchemySigner } from "./base.js";
import { AlchemySignerClientParamsSchema, AlchemySignerWebClient, } from "./client/index.js";
import { SessionManagerParamsSchema } from "./session/manager.js";
export const AlchemySignerParamsSchema = z
    .object({
    client: z
        .custom()
        .or(AlchemySignerClientParamsSchema),
})
    .extend({
    sessionConfig: SessionManagerParamsSchema.omit({ client: true }).optional(),
});
export class AlchemySigner extends BaseAlchemySigner {
    constructor(params_) {
        const { sessionConfig, ...params } = AlchemySignerParamsSchema.parse(params_);
        let client;
        if ("connection" in params.client) {
            client = new AlchemySignerWebClient(params.client);
        }
        else {
            client = params.client;
        }
        super({
            client,
            sessionConfig,
        });
    }
}
//# sourceMappingURL=signer.js.map