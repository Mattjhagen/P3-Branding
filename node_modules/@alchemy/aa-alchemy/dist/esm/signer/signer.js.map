{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../../src/signer/signer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAC9C,OAAO,EACL,+BAA+B,EAC/B,sBAAsB,GACvB,MAAM,mBAAmB,CAAC;AAE3B,OAAO,EAAE,0BAA0B,EAAE,MAAM,sBAAsB,CAAC;AAgBlE,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC;KACvC,MAAM,CAAC;IACN,MAAM,EAAE,CAAC;SACN,MAAM,EAA0B;SAChC,EAAE,CAAC,+BAA+B,CAAC;CACvC,CAAC;KACD,MAAM,CAAC;IACN,aAAa,EAAE,0BAA0B,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE;CAC5E,CAAC,CAAC;AAOL,MAAM,OAAO,aAAc,SAAQ,iBAAyC;IAC1E,YAAY,OAA4B;QACtC,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,EAAE,GAChC,yBAAyB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE3C,IAAI,MAA8B,CAAC;QACnC,IAAI,YAAY,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;YAClC,MAAM,GAAG,IAAI,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QACzB,CAAC;QACD,KAAK,CAAC;YACJ,MAAM;YACN,aAAa;SACd,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { z } from \"zod\";\nimport { BaseAlchemySigner } from \"./base.js\";\nimport {\n  AlchemySignerClientParamsSchema,\n  AlchemySignerWebClient,\n} from \"./client/index.js\";\nimport type { CredentialCreationOptionOverrides } from \"./client/types\";\nimport { SessionManagerParamsSchema } from \"./session/manager.js\";\n\nexport type AuthParams =\n  | { type: \"email\"; email: string; redirectParams?: URLSearchParams }\n  | { type: \"email\"; bundle: string; orgId?: string }\n  | {\n      type: \"passkey\";\n      createNew: false;\n    }\n  | {\n      type: \"passkey\";\n      createNew: true;\n      username: string;\n      creationOpts?: CredentialCreationOptionOverrides;\n    };\n\nexport const AlchemySignerParamsSchema = z\n  .object({\n    client: z\n      .custom<AlchemySignerWebClient>()\n      .or(AlchemySignerClientParamsSchema),\n  })\n  .extend({\n    sessionConfig: SessionManagerParamsSchema.omit({ client: true }).optional(),\n  });\n\nexport type AlchemySignerParams = z.input<typeof AlchemySignerParamsSchema>;\n\n/**\n * A SmartAccountSigner that can be used with any SmartContractAccount\n */\nexport class AlchemySigner extends BaseAlchemySigner<AlchemySignerWebClient> {\n  constructor(params_: AlchemySignerParams) {\n    const { sessionConfig, ...params } =\n      AlchemySignerParamsSchema.parse(params_);\n\n    let client: AlchemySignerWebClient;\n    if (\"connection\" in params.client) {\n      client = new AlchemySignerWebClient(params.client);\n    } else {\n      client = params.client;\n    }\n    super({\n      client,\n      sessionConfig,\n    });\n  }\n}\n"]}