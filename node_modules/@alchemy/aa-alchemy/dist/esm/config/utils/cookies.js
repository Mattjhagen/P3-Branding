import { cookieToInitialState as wagmiCookieToInitialState } from "@wagmi/core";
import Cookies from "js-cookie";
import { DEFAULT_SESSION_MS } from "../../signer/session/manager.js";
import { deserialize } from "./deserialize.js";
export const cookieStorage = (config) => ({
    length: 0,
    clear: function () {
        throw new Error("clearing cookies is not supported as this could lead to unexpected behaviour.\n" +
            " Use removeItem instead or you can manually clear cookies with document.cookie = ''");
    },
    getItem: function (key) {
        if (typeof document === "undefined")
            return null;
        const cookieValue = Cookies.get(key);
        return cookieValue ? decodeURIComponent(cookieValue) : null;
    },
    key: function () {
        throw new Error("Function not implemented.");
    },
    removeItem: function (key) {
        if (typeof document === "undefined")
            return;
        Cookies.remove(key);
    },
    setItem: function (key, value) {
        if (typeof document === "undefined")
            return;
        Cookies.set(key, value, {
            expires: new Date(Date.now() + (config?.sessionLength ?? DEFAULT_SESSION_MS)),
        });
    },
});
export function cookieToInitialState(config, cookie) {
    if (!cookie)
        return;
    const state = parseCookie(cookie, config._internal.storageKey);
    if (!state)
        return;
    const alchemyClientState = deserialize(state).state;
    const wagmiClientState = wagmiCookieToInitialState(config._internal.wagmiConfig, cookie);
    return {
        alchemy: alchemyClientState,
        wagmi: wagmiClientState,
    };
}
export function parseCookie(cookie, key) {
    const keyValue = cookie.split("; ").find((x) => x.startsWith(`${key}=`));
    if (!keyValue)
        return undefined;
    return keyValue.substring(key.length + 1);
}
//# sourceMappingURL=cookies.js.map