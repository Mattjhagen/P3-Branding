{"version":3,"file":"cookies.js","sourceRoot":"","sources":["../../../../src/config/utils/cookies.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,IAAI,yBAAyB,EAAE,MAAM,aAAa,CAAC;AAChF,OAAO,OAAO,MAAM,WAAW,CAAC;AAChC,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AAGrE,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAQ/C,MAAM,CAAC,MAAM,aAAa,GAAoD,CAC5E,MAAM,EACN,EAAE,CAAC,CAAC;IAEJ,MAAM,EAAE,CAAC;IAET,KAAK,EAAE;QACL,MAAM,IAAI,KAAK,CACb,iFAAiF;YAC/E,qFAAqF,CACxF,CAAC;IACJ,CAAC;IAED,OAAO,EAAE,UAAU,GAAW;QAC5B,IAAI,OAAO,QAAQ,KAAK,WAAW;YAAE,OAAO,IAAI,CAAC;QAEjD,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrC,OAAO,WAAW,CAAC,CAAC,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9D,CAAC;IAGD,GAAG,EAAE;QACH,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC/C,CAAC;IAED,UAAU,EAAE,UAAU,GAAW;QAC/B,IAAI,OAAO,QAAQ,KAAK,WAAW;YAAE,OAAO;QAE5C,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAED,OAAO,EAAE,UAAU,GAAW,EAAE,KAAa;QAC3C,IAAI,OAAO,QAAQ,KAAK,WAAW;YAAE,OAAO;QAE5C,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE;YACtB,OAAO,EAAE,IAAI,IAAI,CACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE,aAAa,IAAI,kBAAkB,CAAC,CAC3D;SACF,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AASH,MAAM,UAAU,oBAAoB,CAClC,MAA6B,EAC7B,MAAe;IAEf,IAAI,CAAC,MAAM;QAAE,OAAO;IAEpB,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC/D,IAAI,CAAC,KAAK;QAAE,OAAO;IAEnB,MAAM,kBAAkB,GAAG,WAAW,CAEnC,KAAK,CAAC,CAAC,KAAK,CAAC;IAEhB,MAAM,gBAAgB,GAAG,yBAAyB,CAChD,MAAM,CAAC,SAAS,CAAC,WAAW,EAC5B,MAAM,CACP,CAAC;IAEF,OAAO;QACL,OAAO,EAAE,kBAAkB;QAC3B,KAAK,EAAE,gBAAgB;KACxB,CAAC;AACJ,CAAC;AASD,MAAM,UAAU,WAAW,CAAC,MAAc,EAAE,GAAW;IACrD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;IACzE,IAAI,CAAC,QAAQ;QAAE,OAAO,SAAS,CAAC;IAChC,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { cookieToInitialState as wagmiCookieToInitialState } from \"@wagmi/core\";\nimport Cookies from \"js-cookie\";\nimport { DEFAULT_SESSION_MS } from \"../../signer/session/manager.js\";\nimport type { ClientState, StoredState } from \"../store/types.js\";\nimport type { AlchemyAccountsConfig } from \"../types\";\nimport { deserialize } from \"./deserialize.js\";\n\n/**\n * Function to create cookie based Storage\n *\n * @param config optional config object that allows you to set the session length\n * @returns an instance of a browser storage object that leverages cookies\n */\nexport const cookieStorage: (config?: { sessionLength: number }) => Storage = (\n  config\n) => ({\n  // this is unused for now, we should update this if we do need it\n  length: 0,\n\n  clear: function (): void {\n    throw new Error(\n      \"clearing cookies is not supported as this could lead to unexpected behaviour.\\n\" +\n        \" Use removeItem instead or you can manually clear cookies with document.cookie = ''\"\n    );\n  },\n\n  getItem: function (key: string): string | null {\n    if (typeof document === \"undefined\") return null;\n\n    const cookieValue = Cookies.get(key);\n    return cookieValue ? decodeURIComponent(cookieValue) : null;\n  },\n\n  // we will not be using this, if we have need for it add it back later\n  key: function (): string | null {\n    throw new Error(\"Function not implemented.\");\n  },\n\n  removeItem: function (key: string): void {\n    if (typeof document === \"undefined\") return;\n\n    Cookies.remove(key);\n  },\n\n  setItem: function (key: string, value: string): void {\n    if (typeof document === \"undefined\") return;\n\n    Cookies.set(key, value, {\n      expires: new Date(\n        Date.now() + (config?.sessionLength ?? DEFAULT_SESSION_MS)\n      ),\n    });\n  },\n});\n\n/**\n * Converts a cookie into an initial state object\n *\n * @param config the account config containing the client store\n * @param cookie optional cookie string\n * @returns the deserialized AlchemyClientState if the cookie exists, otherwise undefined\n */\nexport function cookieToInitialState(\n  config: AlchemyAccountsConfig,\n  cookie?: string\n): StoredState | undefined {\n  if (!cookie) return;\n\n  const state = parseCookie(cookie, config._internal.storageKey);\n  if (!state) return;\n\n  const alchemyClientState = deserialize<{\n    state: Omit<ClientState, \"signer\" | \"accounts\">;\n  }>(state).state;\n\n  const wagmiClientState = wagmiCookieToInitialState(\n    config._internal.wagmiConfig,\n    cookie\n  );\n\n  return {\n    alchemy: alchemyClientState,\n    wagmi: wagmiClientState,\n  };\n}\n\n/**\n * Helper function that can be used to parse a cookie string on the server or client\n *\n * @param cookie the cookie string to parse\n * @param key the key of the cookie to parse\n * @returns the value of the cookie given a key if it exists, otherwise undefined\n */\nexport function parseCookie(cookie: string, key: string) {\n  const keyValue = cookie.split(\"; \").find((x) => x.startsWith(`${key}=`));\n  if (!keyValue) return undefined;\n  return keyValue.substring(key.length + 1);\n}\n"]}