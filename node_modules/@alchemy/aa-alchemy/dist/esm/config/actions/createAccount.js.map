{"version":3,"file":"createAccount.js","sourceRoot":"","sources":["../../../../src/config/actions/createAccount.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,8BAA8B,GAI/B,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAA2B,MAAM,kBAAkB,CAAC;AAC3D,OAAO,EAAE,MAAM,EAAkB,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,uBAAuB,EAAE,MAAM,cAAc,CAAC;AAMvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAuBvD,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,EAAiC,EAC9D,MAA6B;IAE7B,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IACvC,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;IACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,uBAAuB,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;IACxC,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;IAClC,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IACjC,MAAM,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IAE7C,IAAI,CAAC,YAAY,CAAC,WAAW,IAAI,CAAC,MAAM,EAAE,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACjD,IAAI,aAAa,CAAC,MAAM,KAAK,cAAc,IAAI,aAAa,CAAC,OAAO,EAAE,CAAC;QACrE,OAAO,aAAa,CAAC,OAAO,CAAC;IAC/B,CAAC;IACD,MAAM,YAAY,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE7E,MAAM,cAAc,GAAG,CAAC,GAAG,EAAE;QAC3B,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,cAAc;gBACjB,OAAO,kBAAkB,CAAC;oBACxB,GAAG,MAAM;oBACT,GAAG,YAAY;oBACf,MAAM;oBACN,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;oBAC1D,KAAK;iBACN,CAAC,CAAC;YACL,KAAK,0BAA0B;gBAC7B,OAAO,8BAA8B,CAAC;oBACpC,GAAG,MAAM;oBACT,GAAG,YAAY;oBACf,MAAM;oBACN,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;oBAC1D,KAAK;iBACN,CAAC,CAAC;YACL;gBACE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAChD,CAAC;IACH,CAAC,CAAC,EAAE,CAAC;IAEL,IAAI,aAAa,CAAC,MAAM,KAAK,cAAc,EAAE,CAAC;QAC5C,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;YAC1B,QAAQ,EAAE;gBACR,GAAG,QAAQ;gBACX,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBACV,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrB,CAAC,IAAI,CAAC,EAAE;wBACN,MAAM,EAAE,cAAc;wBACtB,OAAO,EAAE,cAAc;qBACxB;iBACF;aACF;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC;QACrC,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;QAC7C,WAAW,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC/B,QAAQ,EAAE;gBACR,GAAG,QAAQ;gBACX,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBACV,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrB,CAAC,IAAI,CAAC,EAAE;wBACN,MAAM,EAAE,OAAO;wBACf,OAAO;qBACR;iBACF;aACF;YACD,cAAc,EAAE;gBACd,GAAG,KAAK,CAAC,cAAc;gBACvB,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBACV,GAAG,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;oBACjC,CAAC,IAAI,CAAC,EAAE;wBACN,GAAG,MAAM;wBACT,cAAc,EAAE,OAAO,CAAC,OAAO;wBAC/B,QAAQ;qBACT;iBACF;aACF;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;YAC1B,QAAQ,EAAE;gBACR,GAAG,QAAQ;gBACX,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBACV,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrB,CAAC,IAAI,CAAC,EAAE;wBACN,MAAM,EAAE,OAAO;wBACf,KAAK;qBACN;iBACF;aACF;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import {\n  createLightAccount,\n  createMultiOwnerModularAccount,\n  type CreateLightAccountParams,\n  type CreateMultiOwnerModularAccountParams,\n  type GetLightAccountVersion,\n} from \"@alchemy/aa-accounts\";\nimport { type SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { custom, type Transport } from \"viem\";\nimport { ClientOnlyPropertyError } from \"../errors.js\";\nimport type {\n  AlchemyAccountsConfig,\n  SupportedAccountTypes,\n  SupportedAccounts,\n} from \"../types\";\nimport { getBundlerClient } from \"./getBundlerClient.js\";\nimport { getSigner } from \"./getSigner.js\";\nimport { getSignerStatus } from \"./getSignerStatus.js\";\n\nexport type AccountConfig<TAccount extends SupportedAccountTypes> =\n  TAccount extends \"LightAccount\"\n    ? Omit<\n        CreateLightAccountParams<\n          Transport,\n          SmartAccountSigner,\n          // we only support LightAccount version v1\n          Exclude<GetLightAccountVersion<\"LightAccount\">, \"v2.0.0\">\n        >,\n        \"signer\" | \"transport\" | \"chain\"\n      >\n    : Omit<\n        CreateMultiOwnerModularAccountParams,\n        \"signer\" | \"transport\" | \"chain\"\n      >;\n\nexport type CreateAccountParams<TAccount extends SupportedAccountTypes> = {\n  type: TAccount;\n  accountParams?: AccountConfig<TAccount>;\n};\n\nexport async function createAccount<TAccount extends SupportedAccountTypes>(\n  { type, accountParams: params }: CreateAccountParams<TAccount>,\n  config: AlchemyAccountsConfig\n): Promise<SupportedAccounts> {\n  const clientStore = config.clientStore;\n  const accounts = clientStore.getState().accounts;\n  if (!accounts) {\n    throw new ClientOnlyPropertyError(\"account\");\n  }\n\n  const bundlerClient = getBundlerClient(config);\n  const transport = custom(bundlerClient);\n  const chain = bundlerClient.chain;\n  const signer = getSigner(config);\n  const signerStatus = getSignerStatus(config);\n\n  if (!signerStatus.isConnected || !signer) {\n    throw new Error(\"Signer not connected\");\n  }\n\n  const cachedAccount = accounts[chain.id]?.[type];\n  if (cachedAccount.status !== \"RECONNECTING\" && cachedAccount.account) {\n    return cachedAccount.account;\n  }\n  const cachedConfig = clientStore.getState().accountConfigs[chain.id]?.[type];\n\n  const accountPromise = (() => {\n    switch (type) {\n      case \"LightAccount\":\n        return createLightAccount({\n          ...params,\n          ...cachedConfig,\n          signer,\n          transport: (opts) => transport({ ...opts, retryCount: 0 }),\n          chain,\n        });\n      case \"MultiOwnerModularAccount\":\n        return createMultiOwnerModularAccount({\n          ...params,\n          ...cachedConfig,\n          signer,\n          transport: (opts) => transport({ ...opts, retryCount: 0 }),\n          chain,\n        });\n      default:\n        throw new Error(\"Unsupported account type\");\n    }\n  })();\n\n  if (cachedAccount.status !== \"RECONNECTING\") {\n    clientStore.setState(() => ({\n      accounts: {\n        ...accounts,\n        [chain.id]: {\n          ...accounts[chain.id],\n          [type]: {\n            status: \"INITIALIZING\",\n            account: accountPromise,\n          },\n        },\n      },\n    }));\n  }\n\n  try {\n    const account = await accountPromise;\n    const initCode = await account.getInitCode();\n    clientStore.setState((state) => ({\n      accounts: {\n        ...accounts,\n        [chain.id]: {\n          ...accounts[chain.id],\n          [type]: {\n            status: \"READY\",\n            account,\n          },\n        },\n      },\n      accountConfigs: {\n        ...state.accountConfigs,\n        [chain.id]: {\n          ...state.accountConfigs[chain.id],\n          [type]: {\n            ...params,\n            accountAddress: account.address,\n            initCode,\n          },\n        },\n      },\n    }));\n  } catch (error) {\n    clientStore.setState(() => ({\n      accounts: {\n        ...accounts,\n        [chain.id]: {\n          ...accounts[chain.id],\n          [type]: {\n            status: \"ERROR\",\n            error,\n          },\n        },\n      },\n    }));\n  }\n\n  return accountPromise;\n}\n"]}