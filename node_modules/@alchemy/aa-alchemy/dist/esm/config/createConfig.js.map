{"version":3,"file":"createConfig.js","sourceRoot":"","sources":["../../../src/config/createConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConnectionConfigSchema } from \"@alchemy/aa-core\";\nimport { createStorage, createConfig as createWagmiConfig } from \"@wagmi/core\";\nimport { DEFAULT_SESSION_MS } from \"../signer/session/manager.js\";\nimport { createClientStore } from \"./store/client.js\";\nimport { createCoreStore } from \"./store/core.js\";\nimport { DEFAULT_STORAGE_KEY } from \"./store/types.js\";\nimport type {\n  AlchemyAccountsConfig,\n  Connection,\n  CreateConfigProps,\n} from \"./types\";\n\nexport const DEFAULT_IFRAME_CONTAINER_ID = \"alchemy-signer-iframe-container\";\n\n/**\n * Creates an AlchemyAccountsConfig object that can be used in conjunction with\n * the actions exported from `@alchemy/aa-alchemy/config`.\n *\n * The config contains core and client stores that can be used to manage account state\n * in your application.\n *\n * @param params {@link CreateConfigProps} to use for creating an alchemy account config\n * @returns an alchemy account config object containing the core and client store\n */\nexport const createConfig = (\n  params: CreateConfigProps\n): AlchemyAccountsConfig => {\n  const {\n    chain,\n    iframeConfig,\n    rootOrgId,\n    rpId,\n    sessionConfig,\n    signerConnection,\n    ssr,\n    storage,\n    connectors,\n    ...connectionConfig\n  } = params;\n\n  const connections: Connection[] = [];\n  if (connectionConfig.connections != null) {\n    connectionConfig.connections.forEach(({ chain, ...config }) => {\n      connections.push({\n        ...ConnectionConfigSchema.parse(config),\n        chain,\n      });\n    });\n  } else {\n    connections.push({\n      ...ConnectionConfigSchema.parse(connectionConfig),\n      chain,\n    });\n  }\n\n  const coreStore = createCoreStore({\n    connections,\n    chain,\n    storage: storage?.(),\n    ssr,\n  });\n\n  const clientStore = createClientStore({\n    client: {\n      connection: signerConnection ?? connections[0],\n      iframeConfig,\n      rootOrgId,\n      rpId,\n    },\n    sessionConfig,\n    storage: storage?.(\n      sessionConfig?.expirationTimeMs\n        ? { sessionLength: sessionConfig.expirationTimeMs }\n        : undefined\n    ),\n    // TODO: this is duplicated from the core store\n    chains: connections.map((x) => x.chain),\n    ssr,\n  });\n\n  const wagmiConfig = createWagmiConfig({\n    connectors,\n    chains: [chain, ...connections.map((c) => c.chain)],\n    client: () => config.coreStore.getState().bundlerClient,\n    storage: createStorage({\n      key: `${DEFAULT_STORAGE_KEY}:wagmi`,\n      storage: storage\n        ? storage()\n        : typeof window !== \"undefined\"\n        ? localStorage\n        : undefined,\n    }),\n    ssr,\n  });\n\n  const config: AlchemyAccountsConfig = {\n    coreStore,\n    clientStore,\n    _internal: {\n      ssr,\n      wagmiConfig,\n      storageKey: \"alchemy-account-state\",\n      sessionLength: sessionConfig?.expirationTimeMs ?? DEFAULT_SESSION_MS,\n    },\n  };\n\n  return config;\n};\n"]}