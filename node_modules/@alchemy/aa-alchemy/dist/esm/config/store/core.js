import { createJSONStorage, persist, subscribeWithSelector, } from "zustand/middleware";
import { createStore } from "zustand/vanilla";
import { createAlchemyPublicRpcClient } from "../../client/rpcClient.js";
import { bigintMapReplacer } from "../utils/replacer.js";
import { bigintMapReviver } from "../utils/reviver.js";
import { DEFAULT_STORAGE_KEY, } from "./types.js";
export const createCoreStore = (params) => {
    const { connections, chain, storage = typeof window !== "undefined" ? localStorage : undefined, ssr, } = params;
    const coreStore = createStore(subscribeWithSelector(storage
        ? persist(() => createInitialCoreState(connections, chain), {
            name: `${DEFAULT_STORAGE_KEY}:core`,
            storage: createJSONStorage(() => storage, {
                replacer: (key, value) => {
                    if (key === "bundlerClient") {
                        const client = value;
                        return {
                            connection: connections.find((x) => x.chain.id === client.chain.id),
                        };
                    }
                    return bigintMapReplacer(key, value);
                },
                reviver: (key, value) => {
                    if (key === "bundlerClient") {
                        const connection = value;
                        return createAlchemyPublicRpcClient({
                            chain: connection.chain,
                            connectionConfig: connection,
                        });
                    }
                    return bigintMapReviver(key, value);
                },
            }),
            version: 1,
            skipHydration: ssr,
        })
        : () => createInitialCoreState(connections, chain)));
    return coreStore;
};
const createInitialCoreState = (connections, chain) => {
    const connectionMap = connections.reduce((acc, connection) => {
        acc.set(connection.chain.id, connection);
        return acc;
    }, new Map());
    if (!connectionMap.has(chain.id)) {
        throw new Error("Chain not found in connections");
    }
    const bundlerClient = createAlchemyPublicRpcClient({
        chain,
        connectionConfig: connectionMap.get(chain.id),
    });
    return {
        bundlerClient,
        chain,
        connections: connectionMap,
    };
};
//# sourceMappingURL=core.js.map