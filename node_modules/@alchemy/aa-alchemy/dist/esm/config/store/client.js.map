{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../src/config/store/client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NoUndefined } from \"@alchemy/aa-core\";\nimport type { Chain } from \"viem\";\nimport {\n  createJSONStorage,\n  persist,\n  subscribeWithSelector,\n} from \"zustand/middleware\";\nimport { createStore } from \"zustand/vanilla\";\nimport { AlchemySigner } from \"../../signer/signer.js\";\nimport { AlchemySignerStatus } from \"../../signer/types.js\";\nimport { DEFAULT_IFRAME_CONTAINER_ID } from \"../createConfig.js\";\nimport type { SupportedAccountTypes } from \"../types.js\";\nimport { bigintMapReplacer } from \"../utils/replacer.js\";\nimport { bigintMapReviver } from \"../utils/reviver.js\";\nimport {\n  DEFAULT_STORAGE_KEY,\n  type AccountState,\n  type ClientState,\n  type ClientStore,\n  type CreateClientStoreParams,\n  type SignerStatus,\n} from \"./types.js\";\n\n/**\n * Creates a zustand store instance containing the client only state\n *\n * @param config the configuration object for the client store\n * @returns a zustand store instance that maintains the client state\n */\nexport const createClientStore = (config: CreateClientStoreParams) => {\n  const {\n    storage = typeof window !== \"undefined\" ? localStorage : undefined,\n    ssr,\n  } = config;\n\n  const clientStore = createStore(\n    subscribeWithSelector(\n      storage\n        ? persist(() => createInitialClientState(config), {\n            name: DEFAULT_STORAGE_KEY,\n            storage: createJSONStorage<ClientState>(() => storage, {\n              replacer: bigintMapReplacer,\n              reviver: bigintMapReviver,\n            }),\n            skipHydration: ssr,\n            partialize: ({ signer, accounts, ...writeableState }) =>\n              writeableState,\n            version: 1,\n          })\n        : () => createInitialClientState(config)\n    )\n  );\n\n  addClientSideStoreListeners(clientStore);\n\n  return clientStore;\n};\n\n/**\n * Given initial client store parameters, it initializes an AlchemySigner instance.\n * This should only be called on the client.\n *\n * @param params {@link CreateClientStoreParams} to configure and create the signer\n * @returns an instance of the {@link AlchemySigner}\n */\nexport const createSigner = (params: CreateClientStoreParams) => {\n  const { client, sessionConfig } = params;\n  const { iframeContainerId } = client.iframeConfig ?? {\n    iframeContainerId: DEFAULT_IFRAME_CONTAINER_ID,\n  };\n\n  let iframeContainer = document.getElementById(iframeContainerId);\n  if (iframeContainer !== null) {\n    iframeContainer.innerHTML = \"\";\n    iframeContainer.style.display = \"none\";\n  } else {\n    iframeContainer = document.createElement(\"div\");\n    iframeContainer.id = iframeContainerId;\n    iframeContainer.style.display = \"none\";\n    document.body.appendChild(iframeContainer);\n  }\n\n  const signer = new AlchemySigner({\n    client: {\n      ...client,\n      iframeConfig: {\n        ...client.iframeConfig,\n        iframeContainerId,\n      },\n    },\n    sessionConfig,\n  });\n\n  const search = new URLSearchParams(window.location.search);\n  if (search.has(\"bundle\")) {\n    signer.authenticate({ type: \"email\", bundle: search.get(\"bundle\")! });\n  }\n\n  return signer;\n};\n\n/**\n * Converts the AlchemySigner's status to a more readable object\n *\n * @param alchemySignerStatus Enum value of the AlchemySigner's status to convert\n * @returns an object containing the original status as well as booleans to check the current state\n */\nexport const convertSignerStatusToState = (\n  alchemySignerStatus: AlchemySignerStatus\n): SignerStatus => ({\n  status: alchemySignerStatus,\n  isInitializing: alchemySignerStatus === AlchemySignerStatus.INITIALIZING,\n  isAuthenticating:\n    alchemySignerStatus === AlchemySignerStatus.AUTHENTICATING ||\n    alchemySignerStatus === AlchemySignerStatus.AWAITING_EMAIL_AUTH,\n  isConnected: alchemySignerStatus === AlchemySignerStatus.CONNECTED,\n  isDisconnected: alchemySignerStatus === AlchemySignerStatus.DISCONNECTED,\n});\n\n// This is done this way to avoid issues with React requiring static state\nconst staticState: AccountState<SupportedAccountTypes> = {\n  status: \"DISCONNECTED\",\n  account: undefined,\n};\n\nexport const defaultAccountState = <\n  T extends SupportedAccountTypes\n>(): AccountState<T> => staticState;\n\nconst createInitialClientState = (\n  params: CreateClientStoreParams\n): ClientState => {\n  const accountConfigs = createEmptyAccountConfigState(params.chains);\n  const baseState = {\n    accountConfigs,\n    config: params,\n    signerStatus: convertSignerStatusToState(AlchemySignerStatus.INITIALIZING),\n  };\n\n  if (typeof window === \"undefined\") {\n    return baseState;\n  }\n\n  const accounts = createDefaultAccountState(params.chains);\n  return {\n    accounts,\n    ...baseState,\n  };\n};\n\nconst addClientSideStoreListeners = (store: ClientStore) => {\n  if (typeof window === \"undefined\") {\n    return;\n  }\n\n  store.subscribe(\n    ({ signer }) => signer,\n    (signer) => {\n      if (!signer) return;\n      signer.on(\"statusChanged\", (status) => {\n        store.setState({ signerStatus: convertSignerStatusToState(status) });\n      });\n\n      signer.on(\"connected\", (user) => store.setState({ user }));\n\n      signer.on(\"disconnected\", () => {\n        store.setState({\n          user: undefined,\n          accountConfigs: createEmptyAccountConfigState(\n            store.getState().config.chains\n          ),\n          accounts: createDefaultAccountState(store.getState().config.chains),\n        });\n      });\n    },\n    { fireImmediately: true }\n  );\n};\n\nconst createEmptyAccountConfigState = (chains: Chain[]) => {\n  return chains.reduce((acc, chain) => {\n    acc[chain.id] = {};\n    return acc;\n  }, {} as ClientState[\"accountConfigs\"]);\n};\n\nexport const createDefaultAccountState = (chains: Chain[]) => {\n  return chains.reduce((acc, chain) => {\n    acc[chain.id] = {\n      LightAccount: defaultAccountState<\"LightAccount\">(),\n      MultiOwnerModularAccount:\n        defaultAccountState<\"MultiOwnerModularAccount\">(),\n    };\n    return acc;\n  }, {} as NoUndefined<ClientState[\"accounts\"]>);\n};\n"]}