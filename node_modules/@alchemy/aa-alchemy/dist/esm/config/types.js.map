{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/config/types.ts"],"names":[],"mappings":"AAMA,OAAO,EAA8B,MAAM,aAAa,CAAC","sourcesContent":["import type {\n  LightAccount,\n  MultiOwnerModularAccount,\n} from \"@alchemy/aa-accounts\";\nimport type { ConnectionConfig } from \"@alchemy/aa-core\";\nimport type { CreateConnectorFn } from \"@wagmi/core\";\nimport { type Config as WagmiConfig } from \"@wagmi/core\";\nimport type { Chain } from \"viem\";\nimport type { PartialBy } from \"viem/chains\";\nimport type { AlchemyGasManagerConfig } from \"../middleware/gasManager\";\nimport type {\n  AlchemySigner,\n  AlchemySignerClient,\n  AlchemySignerParams,\n} from \"../signer\";\nimport type { ClientStore, CoreStore, StoredState } from \"./store/types\";\n\nexport type SupportedAccountTypes = \"LightAccount\" | \"MultiOwnerModularAccount\";\n\nexport type SupportedAccounts =\n  | LightAccount<AlchemySigner>\n  | MultiOwnerModularAccount<AlchemySigner>;\n\nexport type SupportedAccount<T extends SupportedAccountTypes> =\n  T extends \"LightAccount\"\n    ? LightAccount<AlchemySigner>\n    : T extends \"MultiOwnerModularAccount\"\n    ? MultiOwnerModularAccount<AlchemySigner>\n    : never;\n\nexport type AlchemyAccountsConfig = {\n  coreStore: CoreStore;\n  clientStore: ClientStore;\n  _internal: {\n    wagmiConfig: WagmiConfig;\n    ssr?: boolean;\n    storageKey: string;\n    sessionLength: number;\n  };\n};\n\n// [!region CreateConfigProps]\nexport type Connection = ConnectionConfig & {\n  chain: Chain;\n  gasManagerConfig?: AlchemyGasManagerConfig;\n};\n\ntype RpcConnectionConfig =\n  | (Connection & {\n      /**\n       * Optional parameter that allows you to specify a different RPC Url\n       * or connection to be used specifically by the signer.\n       * This is useful if you have a different backend proxy for the signer\n       * than for your Bundler or Node RPC calls.\n       */\n      signerConnection?: ConnectionConfig;\n      connections?: never;\n    })\n  | {\n      connections: Connection[];\n      chain: Chain;\n      /**\n       * When providing multiple connections, you must specify the signer connection config\n       * to use since the signer is chain agnostic and has a different RPC url.\n       */\n      signerConnection: ConnectionConfig;\n    };\n\nexport type CreateConfigProps = RpcConnectionConfig & {\n  chain: Chain;\n  sessionConfig?: AlchemySignerParams[\"sessionConfig\"];\n  /**\n   * Enable this parameter if you are using the config in an SSR setting (eg. NextJS)\n   * Turing this setting on will disable automatic hydration of the client store\n   */\n  ssr?: boolean;\n\n  // TODO: should probably abstract this out into a function\n  storage?: (config?: { sessionLength: number }) => Storage;\n\n  connectors?: CreateConnectorFn[];\n} & Omit<\n    PartialBy<\n      Exclude<AlchemySignerParams[\"client\"], AlchemySignerClient>,\n      \"iframeConfig\"\n    >,\n    \"connection\"\n  >;\n// [!endregion CreateConfigProps]\n\nexport type AlchemyClientState = StoredState;\n"]}