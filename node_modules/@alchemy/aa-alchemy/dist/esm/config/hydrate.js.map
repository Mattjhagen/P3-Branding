{"version":3,"file":"hydrate.js","sourceRoot":"","sources":["../../../src/config/hydrate.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Address } from \"@alchemy/aa-core\";\nimport { hydrate as wagmi_hydrate } from \"@wagmi/core\";\nimport { AlchemySignerStatus } from \"../signer/index.js\";\nimport { reconnect } from \"./actions/reconnect.js\";\nimport {\n  convertSignerStatusToState,\n  createDefaultAccountState,\n  defaultAccountState,\n} from \"./store/client.js\";\nimport type { AccountState, ClientState, StoredState } from \"./store/types\";\nimport type { AlchemyAccountsConfig, SupportedAccountTypes } from \"./types\";\n\n/**\n * Will hydrate the client store with the provided initial state if one is provided.\n *\n * @param config the config containing the client store\n * @param initialState optional param detailing the initial ClientState\n * @returns an object containing an onMount function that can be called when your component first renders on the client\n */\nexport function hydrate(\n  config: AlchemyAccountsConfig,\n  initialState?: StoredState\n) {\n  const initialAlchemyState =\n    initialState != null && \"alchemy\" in initialState\n      ? initialState.alchemy\n      : initialState;\n\n  if (initialAlchemyState && !config.clientStore.persist.hasHydrated()) {\n    const { accountConfigs, signerStatus, ...rest } = initialAlchemyState;\n    const shouldReconnectAccounts =\n      signerStatus.isConnected || signerStatus.isAuthenticating;\n\n    config.clientStore.setState({\n      ...rest,\n      accountConfigs,\n      signerStatus: convertSignerStatusToState(\n        AlchemySignerStatus.INITIALIZING\n      ),\n      accounts: hydrateAccountState(\n        accountConfigs,\n        shouldReconnectAccounts,\n        config\n      ),\n    });\n  }\n\n  const initialWagmiState =\n    initialState != null && \"wagmi\" in initialState\n      ? initialState.wagmi\n      : undefined;\n  const { onMount: wagmi_onMount } = wagmi_hydrate(\n    config._internal.wagmiConfig,\n    {\n      initialState: initialWagmiState,\n      reconnectOnMount: true,\n    }\n  );\n\n  return {\n    async onMount() {\n      if (config._internal.ssr) {\n        await config.clientStore.persist.rehydrate();\n        await config.coreStore.persist.rehydrate();\n      }\n\n      await wagmi_onMount();\n\n      await reconnect(config);\n    },\n  };\n}\n\nconst reconnectingState = <T extends SupportedAccountTypes>(\n  address: Address\n): AccountState<T> => ({\n  status: \"RECONNECTING\",\n  account: {\n    address,\n  },\n});\n\nconst hydrateAccountState = (\n  accountConfigs: ClientState[\"accountConfigs\"],\n  shouldReconnectAccounts: boolean,\n  config: AlchemyAccountsConfig\n): ClientState[\"accounts\"] => {\n  const chains = Array.from(\n    config.coreStore.getState().connections.entries()\n  ).map(([, cnx]) => cnx.chain);\n  const initialState = createDefaultAccountState(chains);\n\n  return Object.entries(accountConfigs).reduce((acc, [chainKey, config]) => {\n    const chainId = Number(chainKey);\n    acc[chainId] = {\n      LightAccount:\n        config.LightAccount && shouldReconnectAccounts\n          ? reconnectingState(config.LightAccount.accountAddress!)\n          : defaultAccountState(),\n      MultiOwnerModularAccount:\n        config.MultiOwnerModularAccount && shouldReconnectAccounts\n          ? reconnectingState(config.MultiOwnerModularAccount.accountAddress!)\n          : defaultAccountState(),\n    };\n\n    return acc;\n  }, initialState);\n};\n"]}