{"version":3,"file":"modularAccountClient.js","sourceRoot":"","sources":["../../../src/client/modularAccountClient.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mBAAmB,EACnB,8BAA8B,EAC9B,uBAAuB,EACvB,oBAAoB,GAOrB,MAAM,sBAAsB,CAAC;AAE9B,OAAO,EACL,MAAM,GAKP,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,2BAA2B,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAE,4CAA4C,EAAE,MAAM,yCAAyC,CAAC;AACvG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gBAAgB,CAAC;AAgC9D,MAAM,CAAC,KAAK,UAAU,iCAAiC,CACrD,MAAyC;IAEzC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,gBAAgB,EAAE,GACxC,2BAA2B,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,4BAA4B,CAAC;QAC1C,KAAK;QACL,gBAAgB;KACjB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,8BAA8B,CAAC;QACnD,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC;QACzB,GAAG,MAAM;KACV,CAAC,CAAC;IAEH,OAAO,4CAA4C,CAAC;QAClD,GAAG,MAAM;QACT,MAAM;QACN,OAAO;QACP,IAAI;KACL,CAAC;SACC,MAAM,CAAC,uBAAuB,CAAC;SAC/B,MAAM,CAAC,oBAAoB,CAAC;SAC5B,MAAM,CAAC,mBAAmB,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import {\n  accountLoupeActions,\n  createMultiOwnerModularAccount,\n  multiOwnerPluginActions,\n  pluginManagerActions,\n  type AccountLoupeActions,\n  type CreateMultiOwnerModularAccountParams,\n  type LightAccount,\n  type MultiOwnerModularAccount,\n  type MultiOwnerPluginActions,\n  type PluginManagerActions,\n} from \"@alchemy/aa-accounts\";\nimport type { SmartAccountSigner } from \"@alchemy/aa-core\";\nimport {\n  custom,\n  type Chain,\n  type CustomTransport,\n  type HttpTransport,\n  type Transport,\n} from \"viem\";\nimport { AlchemyProviderConfigSchema } from \"../schema.js\";\nimport { createAlchemySmartAccountClientFromRpcClient } from \"./internal/smartAccountClientFromRpc.js\";\nimport { createAlchemyPublicRpcClient } from \"./rpcClient.js\";\nimport type {\n  AlchemySmartAccountClient,\n  AlchemySmartAccountClientConfig,\n} from \"./smartAccountClient\";\n\nexport type AlchemyModularAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultiOwnerModularAccountParams<HttpTransport, TSigner>,\n  \"transport\" | \"chain\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<Transport, Chain, LightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport function createModularAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyModularAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    CustomTransport,\n    Chain | undefined,\n    MultiOwnerModularAccount<TSigner>,\n    MultiOwnerPluginActions<MultiOwnerModularAccount<TSigner>> &\n      PluginManagerActions<MultiOwnerModularAccount<TSigner>> &\n      AccountLoupeActions<MultiOwnerModularAccount<TSigner>>\n  >\n>;\n\nexport async function createModularAccountAlchemyClient(\n  config: AlchemyModularAccountClientConfig\n): Promise<AlchemySmartAccountClient> {\n  const { chain, opts, ...connectionConfig } =\n    AlchemyProviderConfigSchema.parse(config);\n\n  const client = createAlchemyPublicRpcClient({\n    chain,\n    connectionConfig,\n  });\n\n  const account = await createMultiOwnerModularAccount({\n    transport: custom(client),\n    ...config,\n  });\n\n  return createAlchemySmartAccountClientFromRpcClient({\n    ...config,\n    client,\n    account,\n    opts,\n  })\n    .extend(multiOwnerPluginActions)\n    .extend(pluginManagerActions)\n    .extend(accountLoupeActions);\n}\n"]}