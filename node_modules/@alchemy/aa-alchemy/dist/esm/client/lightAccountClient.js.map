{"version":3,"file":"lightAccountClient.js","sourceRoot":"","sources":["../../../src/client/lightAccountClient.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,yBAAyB,GAI1B,MAAM,sBAAsB,CAAC;AAE9B,OAAO,EAAE,MAAM,EAAoD,MAAM,MAAM,CAAC;AAChF,OAAO,EAAE,2BAA2B,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAE,4CAA4C,EAAE,MAAM,yCAAyC,CAAC;AACvG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gBAAgB,CAAC;AAC9D,OAAO,EAGN,MAAM,yBAAyB,CAAC;AA0BjC,MAAM,CAAC,KAAK,UAAU,+BAA+B,CACnD,MAAuC;IAEvC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,gBAAgB,EAAE,GACxC,2BAA2B,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,4BAA4B,CAAC;QAC1C,KAAK;QACL,gBAAgB;KACjB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC;QACvC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC;QACzB,GAAG,MAAM;KACV,CAAC,CAAC;IAEH,OAAO,4CAA4C,CAAC;QAClD,GAAG,MAAM;QACT,MAAM;QACN,OAAO;QACP,IAAI;KACL,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import {\n  createLightAccount,\n  lightAccountClientActions,\n  type CreateLightAccountParams,\n  type LightAccount,\n  type LightAccountClientActions,\n} from \"@alchemy/aa-accounts\";\nimport type { HttpTransport, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport { custom, type Chain, type CustomTransport, type Transport } from \"viem\";\nimport { AlchemyProviderConfigSchema } from \"../schema.js\";\nimport { createAlchemySmartAccountClientFromRpcClient } from \"./internal/smartAccountClientFromRpc.js\";\nimport { createAlchemyPublicRpcClient } from \"./rpcClient.js\";\nimport {\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"./smartAccountClient.js\";\n\nexport type AlchemyLightAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateLightAccountParams<HttpTransport, TSigner>,\n  \"transport\" | \"chain\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<Transport, Chain, LightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport async function createLightAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyLightAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    CustomTransport,\n    Chain | undefined,\n    LightAccount<TSigner>,\n    LightAccountClientActions<TSigner>\n  >\n>;\n\nexport async function createLightAccountAlchemyClient(\n  config: AlchemyLightAccountClientConfig\n): Promise<AlchemySmartAccountClient> {\n  const { chain, opts, ...connectionConfig } =\n    AlchemyProviderConfigSchema.parse(config);\n\n  const client = createAlchemyPublicRpcClient({\n    chain,\n    connectionConfig,\n  });\n\n  const account = await createLightAccount({\n    transport: custom(client),\n    ...config,\n  });\n\n  return createAlchemySmartAccountClientFromRpcClient({\n    ...config,\n    client,\n    account,\n    opts,\n  }).extend(lightAccountClientActions);\n}\n"]}