import { accountLoupeActions, createMultisigModularAccount, multisigPluginActions, multisigSignatureMiddleware, pluginManagerActions, } from "@alchemy/aa-accounts";
import { smartAccountClientActions, } from "@alchemy/aa-core";
import { custom, } from "viem";
import { AlchemyProviderConfigSchema } from "../schema.js";
import { createAlchemySmartAccountClientFromRpcClient } from "./internal/smartAccountClientFromRpc.js";
import { createAlchemyPublicRpcClient } from "./rpcClient.js";
export async function createMultisigAccountAlchemyClient(config) {
    const { chain, opts, ...connectionConfig } = AlchemyProviderConfigSchema.parse(config);
    const client = createAlchemyPublicRpcClient({
        chain,
        connectionConfig,
    });
    const account = await createMultisigModularAccount({
        transport: custom(client),
        ...config,
    });
    return createAlchemySmartAccountClientFromRpcClient({
        ...config,
        client,
        account,
        opts,
        signUserOperation: multisigSignatureMiddleware,
    })
        .extend(smartAccountClientActions)
        .extend(multisigPluginActions)
        .extend(pluginManagerActions)
        .extend(accountLoupeActions);
}
//# sourceMappingURL=multisigAccountClient.js.map