import { createSmartAccountClientFromExisting, getDefaultUserOperationFeeOptions, isSmartAccountWithSigner, } from "@alchemy/aa-core";
import { alchemyFeeEstimator } from "../../middleware/feeEstimator.js";
import { alchemyGasManagerMiddleware } from "../../middleware/gasManager.js";
import { alchemyUserOperationSimulator } from "../../middleware/userOperationSimulator.js";
import { alchemyActions } from "../decorators/smartAccount.js";
export function getSignerTypeHeader(account) {
    return { "Alchemy-Aa-Sdk-Signer": account.getSigner().signerType };
}
export function createAlchemySmartAccountClientFromRpcClient({ opts, account, useSimulation, gasManagerConfig, feeEstimator, gasEstimator, customMiddleware, signUserOperation, client, }) {
    const feeOptions = opts?.feeOptions ?? getDefaultUserOperationFeeOptions(client.chain);
    const scaClient = createSmartAccountClientFromExisting({
        account,
        client,
        type: "AlchemySmartAccountClient",
        opts: {
            ...opts,
            feeOptions,
        },
        customMiddleware: async (struct, args) => {
            if (isSmartAccountWithSigner(args.account)) {
                client.updateHeaders(getSignerTypeHeader(args.account));
            }
            return customMiddleware ? customMiddleware(struct, args) : struct;
        },
        feeEstimator: feeEstimator ?? alchemyFeeEstimator(client),
        userOperationSimulator: useSimulation
            ? alchemyUserOperationSimulator(client)
            : undefined,
        gasEstimator,
        ...(gasManagerConfig &&
            alchemyGasManagerMiddleware(client, {
                ...gasManagerConfig,
                gasEstimationOptions: {
                    ...gasManagerConfig.gasEstimationOptions,
                    disableGasEstimation: gasManagerConfig.gasEstimationOptions?.disableGasEstimation ??
                        false,
                    fallbackFeeDataGetter: gasManagerConfig.gasEstimationOptions?.fallbackFeeDataGetter ??
                        feeEstimator,
                    fallbackGasEstimator: gasManagerConfig.gasEstimationOptions?.fallbackGasEstimator ??
                        gasEstimator,
                },
            })),
        signUserOperation,
    }).extend(alchemyActions);
    if (account && isSmartAccountWithSigner(account)) {
        client.updateHeaders(getSignerTypeHeader(account));
    }
    return scaClient;
}
//# sourceMappingURL=smartAccountClientFromRpc.js.map