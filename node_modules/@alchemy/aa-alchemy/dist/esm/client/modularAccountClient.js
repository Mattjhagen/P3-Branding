import { accountLoupeActions, createMultiOwnerModularAccount, multiOwnerPluginActions, pluginManagerActions, } from "@alchemy/aa-accounts";
import { custom, } from "viem";
import { AlchemyProviderConfigSchema } from "../schema.js";
import { createAlchemySmartAccountClientFromRpcClient } from "./internal/smartAccountClientFromRpc.js";
import { createAlchemyPublicRpcClient } from "./rpcClient.js";
export async function createModularAccountAlchemyClient(config) {
    const { chain, opts, ...connectionConfig } = AlchemyProviderConfigSchema.parse(config);
    const client = createAlchemyPublicRpcClient({
        chain,
        connectionConfig,
    });
    const account = await createMultiOwnerModularAccount({
        transport: custom(client),
        ...config,
    });
    return createAlchemySmartAccountClientFromRpcClient({
        ...config,
        client,
        account,
        opts,
    })
        .extend(multiOwnerPluginActions)
        .extend(pluginManagerActions)
        .extend(accountLoupeActions);
}
//# sourceMappingURL=modularAccountClient.js.map