{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/client/types.ts"],"names":[],"mappings":"AAAA,OAAO,EAGN,MAAM,kBAAkB,CAAC","sourcesContent":["import {\n  type BundlerClient,\n  type UserOperationRequest,\n} from \"@alchemy/aa-core\";\nimport type { Address, Hex, HttpTransport } from \"viem\";\nimport type {\n  SimulateUserOperationAssetChangesRequest,\n  SimulateUserOperationAssetChangesResponse,\n} from \"../actions/types\";\nimport type {\n  RequestGasAndPaymasterAndDataOverrides,\n  RequestGasAndPaymasterAndDataResponse,\n  RequestPaymasterAndDataResponse,\n} from \"../middleware/gasManager\";\n\nexport type AlchemyRpcSchema = [\n  {\n    Method: \"alchemy_requestPaymasterAndData\";\n    Parameters: [\n      {\n        policyId: string;\n        entryPoint: Address;\n        userOperation: UserOperationRequest;\n      }\n    ];\n    ReturnType: RequestPaymasterAndDataResponse;\n  },\n  {\n    Method: \"alchemy_requestGasAndPaymasterAndData\";\n    Parameters: [\n      {\n        policyId: string;\n        entryPoint: Address;\n        userOperation: UserOperationRequest;\n        dummySignature: Hex;\n        overrides?: RequestGasAndPaymasterAndDataOverrides;\n      }\n    ];\n    ReturnType: RequestGasAndPaymasterAndDataResponse;\n  },\n  {\n    Method: \"alchemy_simulateUserOperationAssetChanges\";\n    Parameters: SimulateUserOperationAssetChangesRequest;\n    ReturnType: SimulateUserOperationAssetChangesResponse;\n  },\n  {\n    Method: \"rundler_maxPriorityFeePerGas\";\n    Parameters: [];\n    ReturnType: UserOperationRequest[\"maxPriorityFeePerGas\"];\n  }\n];\n\nexport type ClientWithAlchemyMethods = BundlerClient<HttpTransport> & {\n  request: BundlerClient<HttpTransport>[\"request\"] &\n    {\n      request(args: {\n        method: \"alchemy_requestPaymasterAndData\";\n        params: [\n          {\n            policyId: string;\n            entryPoint: Address;\n            userOperation: UserOperationRequest;\n          }\n        ];\n      }): Promise<RequestPaymasterAndDataResponse>;\n\n      request(args: {\n        method: \"alchemy_requestGasAndPaymasterAndData\";\n        params: [\n          {\n            policyId: string;\n            entryPoint: Address;\n            userOperation: UserOperationRequest;\n            dummySignature: Hex;\n            overrides?: RequestGasAndPaymasterAndDataOverrides;\n          }\n        ];\n      }): Promise<RequestGasAndPaymasterAndDataResponse>;\n\n      request(args: {\n        method: \"alchemy_simulateUserOperationAssetChanges\";\n        params: SimulateUserOperationAssetChangesRequest;\n      }): Promise<SimulateUserOperationAssetChangesResponse>;\n\n      request(args: {\n        method: \"rundler_maxPriorityFeePerGas\";\n        params: [];\n      }): Promise<UserOperationRequest[\"maxPriorityFeePerGas\"]>;\n    }[\"request\"];\n} & {\n  updateHeaders: (headers: HeadersInit) => void;\n};\n"]}