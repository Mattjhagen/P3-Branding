{"version":3,"file":"userOperationSimulator.js","sourceRoot":"","sources":["../../../src/middleware/userOperationSimulator.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,WAAW,EACX,iBAAiB,GAElB,MAAM,kBAAkB,CAAC;AAG1B,MAAM,UAAU,6BAA6B,CAE3C,MAAS;IACT,OAAO,KAAK,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;QACnC,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC;YACvC,MAAM,EAAE,2CAA2C;YACnD,MAAM,EAAE;gBACN,WAAW,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBAC5C,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO;aAChC;SACF,CAAC,CAAC;QAEH,IAAI,WAAW,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import {\n  deepHexlify,\n  resolveProperties,\n  type ClientMiddlewareFn,\n} from \"@alchemy/aa-core\";\nimport type { ClientWithAlchemyMethods } from \"../client/types\";\n\nexport function alchemyUserOperationSimulator<\n  C extends ClientWithAlchemyMethods\n>(client: C): ClientMiddlewareFn {\n  return async (struct, { account }) => {\n    const uoSimResult = await client.request({\n      method: \"alchemy_simulateUserOperationAssetChanges\",\n      params: [\n        deepHexlify(await resolveProperties(struct)),\n        account.getEntryPoint().address,\n      ],\n    });\n\n    if (uoSimResult.error) {\n      throw new Error(uoSimResult.error.message);\n    }\n\n    return struct;\n  };\n}\n"]}