{"version":3,"file":"feeEstimator.js","sourceRoot":"","sources":["../../../src/middleware/feeEstimator.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,8BAA8B,EAAE,MAAM,kBAAkB,CAAC;AAGlE,MAAM,CAAC,MAAM,mBAAmB,GAG9B,CAAC,MAAM,EAAE,EAAE,CACX,KAAK,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,EAAE;IAC1C,IAAI,CAAC,KAAK,EAAE,4BAA4B,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAC5D,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;QAEvC,MAAM,CAAC,OAAO,CAAC;YACb,MAAM,EAAE,8BAA8B;YACtC,MAAM,EAAE,EAAE;SACX,CAAC;KACH,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;IAC1C,IAAI,aAAa,IAAI,IAAI,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC3C,CAAC;IAED,MAAM,oBAAoB,GAAG,8BAA8B,CACzD,4BAA4B,EAC5B,SAAS,EAAE,oBAAoB,EAC/B,UAAU,EAAE,oBAAoB,CACjC,CAAC;IACF,MAAM,YAAY,GAAG,8BAA8B,CACjD,aAAa,GAAG,MAAM,CAAC,oBAAoB,CAAC,EAC5C,SAAS,EAAE,YAAY,EACvB,UAAU,EAAE,YAAY,CACzB,CAAC;IAEF,OAAO;QACL,GAAG,MAAM;QACT,oBAAoB;QACpB,YAAY;KACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { ClientMiddlewareFn } from \"@alchemy/aa-core\";\nimport { applyUserOpOverrideOrFeeOption } from \"@alchemy/aa-core\";\nimport type { ClientWithAlchemyMethods } from \"../client/types\";\n\nexport const alchemyFeeEstimator: <C extends ClientWithAlchemyMethods>(\n  client: C\n) => ClientMiddlewareFn =\n  (client) =>\n  async (struct, { overrides, feeOptions }) => {\n    let [block, maxPriorityFeePerGasEstimate] = await Promise.all([\n      client.getBlock({ blockTag: \"latest\" }),\n      // it is a fair assumption that if someone is using this Alchemy Middleware, then they are using Alchemy RPC\n      client.request({\n        method: \"rundler_maxPriorityFeePerGas\",\n        params: [],\n      }),\n    ]);\n\n    const baseFeePerGas = block.baseFeePerGas;\n    if (baseFeePerGas == null) {\n      throw new Error(\"baseFeePerGas is null\");\n    }\n\n    const maxPriorityFeePerGas = applyUserOpOverrideOrFeeOption(\n      maxPriorityFeePerGasEstimate,\n      overrides?.maxPriorityFeePerGas,\n      feeOptions?.maxPriorityFeePerGas\n    );\n    const maxFeePerGas = applyUserOpOverrideOrFeeOption(\n      baseFeePerGas + BigInt(maxPriorityFeePerGas),\n      overrides?.maxFeePerGas,\n      feeOptions?.maxFeePerGas\n    );\n\n    return {\n      ...struct,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n    };\n  };\n"]}