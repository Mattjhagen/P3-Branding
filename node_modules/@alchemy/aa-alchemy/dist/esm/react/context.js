"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { QueryClientProvider } from "@tanstack/react-query";
import { createContext, useContext, useEffect, useMemo, useRef, useState, } from "react";
import { IS_SIGNUP_QP } from "./components/constants.js";
import { NoAlchemyAccountContextError } from "./errors.js";
import { useSignerStatus } from "./hooks/useSignerStatus.js";
import { Hydrate } from "./hydrate.js";
import { AuthModalContext } from "./components/auth/context.js";
import { AuthModal } from "./components/auth/modal.js";
export const AlchemyAccountContext = createContext(undefined);
export const useAlchemyAccountContext = (override) => {
    const context = useContext(AlchemyAccountContext);
    if (override != null)
        return override;
    if (context == null) {
        throw new NoAlchemyAccountContextError("useAlchemyAccountContext");
    }
    return context;
};
export const AlchemyAccountProvider = (props) => {
    const { config, queryClient, children, uiConfig } = props;
    const ref = useRef(null);
    const openAuthModal = () => ref.current?.showModal();
    const closeAuthModal = () => ref.current?.close();
    const initialContext = useMemo(() => ({
        config,
        queryClient,
        ui: uiConfig
            ? {
                openAuthModal,
                closeAuthModal,
            }
            : undefined,
    }), [config, queryClient, uiConfig]);
    const { status, isAuthenticating } = useSignerStatus(initialContext);
    const [authStep, setAuthStep] = useState({
        type: isAuthenticating ? "email_completing" : "initial",
    });
    useEffect(() => {
        if (status === "AWAITING_EMAIL_AUTH" &&
            uiConfig?.auth?.addPasskeyOnSignup) {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get(IS_SIGNUP_QP) !== "true")
                return;
            openAuthModal();
        }
    }, [status, uiConfig?.auth]);
    return (_jsx(Hydrate, { ...props, children: _jsx(AlchemyAccountContext.Provider, { value: initialContext, children: _jsx(QueryClientProvider, { client: queryClient, children: _jsxs(AuthModalContext.Provider, { value: {
                        authStep,
                        setAuthStep,
                    }, children: [children, uiConfig?.auth && (_jsx(AuthModal, { auth: uiConfig.auth, hideError: uiConfig.hideError, ref: ref }))] }) }) }) }));
};
//# sourceMappingURL=context.js.map