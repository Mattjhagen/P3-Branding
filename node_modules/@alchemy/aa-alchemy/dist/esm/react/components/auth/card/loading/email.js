import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { useAuthenticate } from "../../../../hooks/useAuthenticate.js";
import { useSignerStatus } from "../../../../hooks/useSignerStatus.js";
import { MailIllustration } from "../../../../icons/mail.js";
import { Button } from "../../../button.js";
import { PoweredBy } from "../../../poweredby.js";
import { useAuthContext } from "../../context.js";
import { Spinner } from "../../../../icons/spinner.js";
import { ls } from "../../../../strings.js";
export const LoadingEmail = ({ context }) => {
    const [emailResent, setEmailResent] = useState(false);
    const { setAuthStep } = useAuthContext();
    const { authenticate } = useAuthenticate({
        onSuccess: () => {
            setAuthStep({ type: "complete" });
        },
    });
    useEffect(() => {
        if (emailResent) {
            setTimeout(() => {
                setEmailResent(false);
            }, 2000);
        }
    }, [emailResent]);
    return (_jsxs("div", { className: "flex flex-col gap-5 items-center", children: [_jsx("div", { className: "flex flex-col items-center justify-center h-12 w-12", children: _jsx(MailIllustration, {}) }), _jsx("h3", { className: "font-semibold text-lg", children: ls.loadingEmail.title }), _jsxs("p", { className: "text-fg-secondary text-center text-sm", children: [ls.loadingEmail.verificationSent, _jsx("br", {}), _jsx("span", { className: "font-medium", children: context.email })] }), _jsxs("div", { className: "flex flex-col w-full items-center gap-1", children: [_jsxs("div", { className: "flex items-center justify-center py-2 gap-x-2", children: [_jsx("p", { className: "text-fg-tertiary text-xs", children: ls.loadingEmail.emailNotReceived }), _jsx(Button, { variant: "link", className: "text-xs font-normal underline", onClick: () => {
                                    authenticate({
                                        type: "email",
                                        email: context.email,
                                    });
                                    setEmailResent(true);
                                }, children: emailResent ? ls.loadingEmail.resent : ls.loadingEmail.resend })] }), _jsx(PoweredBy, {})] })] }));
};
export const CompletingEmailAuth = ({ context }) => {
    const { isConnected } = useSignerStatus();
    const { setAuthStep } = useAuthContext();
    useEffect(() => {
        if (isConnected && context.createPasskeyAfter) {
            setAuthStep({ type: "passkey_create" });
        }
        else if (isConnected) {
            setAuthStep({ type: "complete" });
        }
    }, [context.createPasskeyAfter, isConnected, setAuthStep]);
    return (_jsxs("div", { className: "flex flex-col gap-5 items-center", children: [_jsx("div", { className: "flex flex-col items-center justify-center h-12 w-12", children: _jsx(Spinner, { className: "animate-spin" }) }), _jsx("p", { className: "text-fg-secondary text-center text-sm", children: ls.completingEmail.body }), _jsx(PoweredBy, {})] }));
};
//# sourceMappingURL=email.js.map