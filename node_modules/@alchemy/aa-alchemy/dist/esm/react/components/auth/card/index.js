import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useLayoutEffect, useMemo } from "react";
import { useSignerStatus } from "../../../hooks/useSignerStatus.js";
import { IS_SIGNUP_QP } from "../../constants.js";
import { useAuthContext } from "../context.js";
import { Step } from "./steps.js";
import { Notification } from "../../notification.js";
import { useAuthError } from "../../../hooks/useAuthError.js";
import { Navigation } from "../../navigation.js";
import { useAuthModal } from "../../../hooks/useAuthModal.js";
export const AuthCard = (props) => {
    const { showClose = false, onAuthSuccess, hideError } = props;
    const { closeAuthModal } = useAuthModal();
    const { status, isAuthenticating } = useSignerStatus();
    const { authStep, setAuthStep } = useAuthContext();
    const error = useAuthError();
    const canGoBack = useMemo(() => {
        return ["email_verify"].includes(authStep.type);
    }, [authStep]);
    const onBack = useCallback(() => {
        switch (authStep.type) {
            case "email_verify":
                setAuthStep({ type: "initial" });
                break;
            default:
                console.warn("Unhandled back action for auth step", authStep);
        }
    }, [authStep, setAuthStep]);
    useLayoutEffect(() => {
        if (authStep.type === "complete") {
            onAuthSuccess?.();
        }
        else if (isAuthenticating && authStep.type === "initial") {
            const urlParams = new URLSearchParams(window.location.search);
            setAuthStep({
                type: "email_completing",
                createPasskeyAfter: urlParams.get(IS_SIGNUP_QP) === "true",
            });
        }
    }, [authStep, status, isAuthenticating, setAuthStep, onAuthSuccess]);
    return (_jsxs("div", { className: "relative", children: [_jsx("div", { id: "akui-default-error-container", className: "absolute bottom-[calc(100%+8px)] w-full", children: !hideError && error && error.message && (_jsx(Notification, { message: error.message, type: "error" })) }), _jsxs("div", { className: "modal-box relative flex flex-col items-center gap-5 text-fg-primary", children: [(canGoBack || showClose) && (_jsx(Navigation, { showClose: showClose, showBack: canGoBack, onBack: onBack, onClose: closeAuthModal })), _jsx(Step, { ...props })] })] }));
};
//# sourceMappingURL=index.js.map