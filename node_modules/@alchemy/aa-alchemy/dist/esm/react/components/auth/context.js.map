{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../../src/react/components/auth/context.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAiBlD,MAAM,CAAC,MAAM,gBAAgB,GAAG,aAAa,CAC3C,SAAS,CACV,CAAC;AAGF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAoB,EAAE;IAClD,MAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAC7C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CACb,6DAA6D,CAC9D,CAAC;IACJ,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import type { Connector } from \"@wagmi/core\";\nimport { createContext, useContext } from \"react\";\n\nexport type AuthStep =\n  | { type: \"email_verify\"; email: string }\n  | { type: \"passkey_verify\"; error?: Error }\n  | { type: \"passkey_create\" }\n  | { type: \"passkey_create_success\" }\n  | { type: \"email_completing\"; createPasskeyAfter?: boolean }\n  | { type: \"initial\" }\n  | { type: \"complete\" }\n  | { type: \"eoa_connect\"; connector: Connector; error?: Error };\n\ntype AuthContextType = {\n  authStep: AuthStep;\n  setAuthStep: (step: AuthStep) => void;\n};\n\nexport const AuthModalContext = createContext<AuthContextType | undefined>(\n  undefined\n);\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport const useAuthContext = (): AuthContextType => {\n  const context = useContext(AuthModalContext);\n  if (!context) {\n    throw new Error(\n      \"useAuthModalContext must be used within a AuthModalProvider\"\n    );\n  }\n\n  return context;\n};\n"]}