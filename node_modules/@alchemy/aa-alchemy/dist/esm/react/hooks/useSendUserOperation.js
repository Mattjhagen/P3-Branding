"use client";
import { WaitForUserOperationError } from "@alchemy/aa-core";
import { useMutation, } from "@tanstack/react-query";
import { sendTransaction as wagmi_sendTransaction } from "@wagmi/core";
import { useAccount as wagmi_useAccount } from "wagmi";
import { useAlchemyAccountContext } from "../context.js";
import { ClientUndefinedHookError, UnsupportedEOAActionError, } from "../errors.js";
import {} from "./useSmartAccountClient.js";
export function useSendUserOperation(params) {
    const { client, waitForTxn = false, ...mutationArgs } = params;
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = useAlchemyAccountContext();
    const { isConnected } = wagmi_useAccount({ config: wagmiConfig });
    const { mutate: sendUserOperation, mutateAsync: sendUserOperationAsync, data: sendUserOperationResult, isPending: isSendingUserOperation, error, } = useMutation({
        mutationFn: async (params) => {
            if (isConnected) {
                console.warn("useSendUserOperation: connected to an EOA, sending as a transaction instead");
                const { uo } = params;
                if (Array.isArray(uo)) {
                    throw new UnsupportedEOAActionError("useSendUserOperation", "batch execute");
                }
                if (typeof uo === "string") {
                    throw new UnsupportedEOAActionError("useSendUserOperation", "hex user operation");
                }
                const tx = await wagmi_sendTransaction(wagmiConfig, {
                    to: uo.target,
                    data: uo.data,
                    value: uo.value,
                });
                return {
                    hash: tx,
                };
            }
            if (!client) {
                throw new ClientUndefinedHookError("useSendUserOperation");
            }
            if (!waitForTxn) {
                return client.sendUserOperation(params);
            }
            const { hash, request } = await client.sendUserOperation(params);
            const txnHash = await client
                .waitForUserOperationTransaction({ hash })
                .catch((e) => {
                throw new WaitForUserOperationError(request, e);
            });
            return {
                hash: txnHash,
                request,
            };
        },
        ...mutationArgs,
    }, queryClient);
    return {
        sendUserOperation,
        sendUserOperationAsync,
        sendUserOperationResult,
        isSendingUserOperation,
        error,
    };
}
//# sourceMappingURL=useSendUserOperation.js.map