"use client";
import { useMutation, } from "@tanstack/react-query";
import { signTypedData as wagmi_signTypedData } from "@wagmi/core";
import { useAccount as wagmi_useAccount } from "wagmi";
import { useAlchemyAccountContext } from "../context.js";
import { ClientUndefinedHookError } from "../errors.js";
export function useSignTypedData({ client, ...mutationArgs }) {
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = useAlchemyAccountContext();
    const { isConnected } = wagmi_useAccount({ config: wagmiConfig });
    const { mutate: signTypedData, mutateAsync: signTypedDataAsync, data: signedTypedData, isPending: isSigningTypedData, error, } = useMutation({
        mutationFn: async (params) => {
            if (isConnected) {
                return wagmi_signTypedData(wagmiConfig, params.typedData);
            }
            if (!client) {
                throw new ClientUndefinedHookError("useSignTypedData");
            }
            return client.signTypedDataWith6492({ ...params });
        },
        ...mutationArgs,
    }, queryClient);
    return {
        signTypedData,
        signTypedDataAsync,
        signedTypedData,
        isSigningTypedData,
        error,
    };
}
//# sourceMappingURL=useSignTypedData.js.map