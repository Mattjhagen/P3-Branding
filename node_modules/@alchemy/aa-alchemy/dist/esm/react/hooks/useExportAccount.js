"use client";
import { useMutation } from "@tanstack/react-query";
import { createElement, useCallback } from "react";
import { DEFAULT_IFRAME_CONTAINER_ID } from "../../config/createConfig.js";
import { useAlchemyAccountContext } from "../context.js";
import { useSigner } from "./useSigner.js";
export function useExportAccount(args) {
    const { params, ...mutationArgs } = args ?? {};
    const { queryClient } = useAlchemyAccountContext();
    const signer = useSigner();
    const { iframeContainerId } = params ?? {
        iframeContainerId: DEFAULT_IFRAME_CONTAINER_ID,
    };
    const { mutate: exportAccount, isPending, error, data, } = useMutation({
        mutationFn: async () => signer.exportWallet(params ?? { iframeContainerId }),
        ...mutationArgs,
    }, queryClient);
    const ExportAccountComponent = useCallback(({ iframeCss, className, isExported }) => {
        const iframeCssString = Object.entries(iframeCss ?? {}).reduce((acc, [key, value]) => {
            const kebabKey = key
                .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2")
                .toLocaleLowerCase();
            return `${acc}\n${kebabKey}: ${value};`;
        }, "");
        return createElement("div", {
            className,
            style: {
                display: !isExported ? "none" : "block",
            },
            id: iframeContainerId,
        }, createElement("style", {}, `iframe { ${iframeCssString} } `));
    }, [iframeContainerId]);
    return {
        isExported: !!data,
        exportAccount,
        isExporting: isPending,
        error,
        ExportAccountComponent,
    };
}
//# sourceMappingURL=useExportAccount.js.map