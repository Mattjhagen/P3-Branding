import { type GetEntryPointFromAccount, type SendTransactionsParameters, type UserOperationContext } from "@alchemy/aa-core";
import { type UseMutateAsyncFunction, type UseMutateFunction } from "@tanstack/react-query";
import { type Chain, type Hash, type Hex, type Transport } from "viem";
import type { SupportedAccounts } from "../../config/types.js";
import type { BaseHookMutationArgs } from "../types.js";
import { type UseSmartAccountClientResult } from "./useSmartAccountClient.js";
export type UseSendTransactionsMutationArgs<TAccount extends SupportedAccounts = SupportedAccounts> = BaseHookMutationArgs<Hash, SendTransactionsParameters<TAccount>>;
export type UseSendTransactionsArgs<TAccount extends SupportedAccounts = SupportedAccounts> = {
    client: UseSmartAccountClientResult<Transport, Chain | undefined, TAccount>["client"] | undefined;
} & UseSendTransactionsMutationArgs<TAccount>;
export type UseSendTransactionsResult<TAccount extends SupportedAccounts = SupportedAccounts, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>> = {
    sendTransactions: UseMutateFunction<Hex, Error, SendTransactionsParameters<TAccount, TContext, TEntryPointVersion>, unknown>;
    sendTransactionsAsync: UseMutateAsyncFunction<Hex, Error, SendTransactionsParameters<TAccount, TContext, TEntryPointVersion>, unknown>;
    sendTransactionsResult: Hex | undefined;
    isSendingTransactions: boolean;
    error: Error | null;
};
export declare function useSendTransactions<TAccount extends SupportedAccounts = SupportedAccounts, TContext extends UserOperationContext | undefined = UserOperationContext | undefined, TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>>(params: UseSendTransactionsArgs<TAccount>): UseSendTransactionsResult<TAccount, TContext, TEntryPointVersion>;
