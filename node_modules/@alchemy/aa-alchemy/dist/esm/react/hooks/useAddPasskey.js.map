{"version":3,"file":"useAddPasskey.js","sourceRoot":"","sources":["../../../../src/react/hooks/useAddPasskey.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,WAAW,EAA0B,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AAEzD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAkB3C,MAAM,UAAU,aAAa,CAC3B,YAAwC;IAExC,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IACnD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAE3B,MAAM,EACJ,MAAM,EAAE,UAAU,EAClB,SAAS,EAAE,eAAe,EAC1B,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EACf,MAAoD,EACpD,EAAE;YACF,OAAO,MAAO,CAAC,UAAU,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC;QACjD,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,UAAU;QACV,eAAe;QACf,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { useSigner } from \"./useSigner.js\";\n\nexport type UseAddPasskeyMutationArgs = BaseHookMutationArgs<\n  string[],\n  CredentialCreationOptions | undefined | void\n>;\n\nexport type UseAddPasskeyResult = {\n  addPasskey: UseMutateFunction<\n    string[],\n    Error,\n    CredentialCreationOptions | undefined | void,\n    unknown\n  >;\n  isAddingPasskey: boolean;\n  error: Error | null;\n};\n\nexport function useAddPasskey(\n  mutationArgs?: UseAddPasskeyMutationArgs\n): UseAddPasskeyResult {\n  const { queryClient } = useAlchemyAccountContext();\n  const signer = useSigner();\n\n  const {\n    mutate: addPasskey,\n    isPending: isAddingPasskey,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (\n        params: CredentialCreationOptions | undefined | void\n      ) => {\n        return signer!.addPasskey(params ?? undefined);\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    addPasskey,\n    isAddingPasskey,\n    error,\n  };\n}\n"]}