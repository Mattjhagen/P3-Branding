{"version":3,"file":"useAuthenticate.js","sourceRoot":"","sources":["../../../../src/react/hooks/useAuthenticate.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EACL,WAAW,GAGZ,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AAGjE,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AAEzD,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAc3C,MAAM,UAAU,eAAe,CAC7B,YAA0C;IAE1C,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IACnD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,MAAM,EACJ,MAAM,EAAE,YAAY,EACpB,WAAW,EAAE,iBAAiB,EAC9B,SAAS,EACT,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EAAE,UAAsB,EAAE,EAAE;YAC3C,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAC9C,CAAC;YAED,OAAO,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACzC,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,YAAY;QACZ,iBAAiB,EAAE,iBAAiB;QACpC,SAAS;QACT,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { ClientOnlyPropertyError } from \"../../config/errors.js\";\nimport type { User } from \"../../signer/index.js\";\nimport type { AuthParams } from \"../../signer/signer.js\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { useSigner } from \"./useSigner.js\";\n\nexport type UseAuthenticateMutationArgs = BaseHookMutationArgs<\n  User,\n  AuthParams\n>;\n\nexport type UseAuthenticateResult = {\n  authenticate: UseMutateFunction<User, Error, AuthParams, unknown>;\n  authenticateAsync: UseMutateAsyncFunction<User, Error, AuthParams, unknown>;\n  isPending: boolean;\n  error: Error | null;\n};\n\nexport function useAuthenticate(\n  mutationArgs?: UseAuthenticateMutationArgs\n): UseAuthenticateResult {\n  const { queryClient } = useAlchemyAccountContext();\n  const signer = useSigner();\n  const {\n    mutate: authenticate,\n    mutateAsync: authenticateAsync,\n    isPending,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (authParams: AuthParams) => {\n        if (!signer) {\n          throw new ClientOnlyPropertyError(\"signer\");\n        }\n\n        return signer.authenticate(authParams);\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    authenticate,\n    authenticateAsync: authenticateAsync,\n    isPending,\n    error,\n  };\n}\n"]}