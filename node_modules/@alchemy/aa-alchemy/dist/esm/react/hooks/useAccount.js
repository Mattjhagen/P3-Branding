"use client";
import { useMutation } from "@tanstack/react-query";
import { useEffect, useSyncExternalStore } from "react";
import { createAccount } from "../../config/actions/createAccount.js";
import { getAccount, } from "../../config/actions/getAccount.js";
import { watchAccount } from "../../config/actions/watchAccount.js";
import {} from "../../config/index.js";
import { useAlchemyAccountContext } from "../context.js";
import { useSignerStatus } from "./useSignerStatus.js";
export function useAccount(params) {
    const { type, accountParams, skipCreate, ...mutationArgs } = params;
    const { config, queryClient } = useAlchemyAccountContext();
    const status = useSignerStatus();
    const account = useSyncExternalStore(watchAccount(type, config), () => getAccount(params, config), () => getAccount(params, config));
    const { mutate, isPending } = useMutation({
        mutationFn: async () => {
            if (account.status !== "RECONNECTING" && account?.account) {
                return account.account;
            }
            return createAccount(params, config);
        },
        mutationKey: ["createAccount", type],
        ...mutationArgs,
    }, queryClient);
    useEffect(() => {
        if (!skipCreate && status.isConnected && !account?.account && !isPending) {
            mutate();
        }
    }, [account, isPending, mutate, skipCreate, status.isConnected]);
    return {
        account: account.status === "READY" ? account?.account : undefined,
        address: account.status === "RECONNECTING" || account.status === "READY"
            ? account.account.address
            : undefined,
        isLoadingAccount: isPending ||
            account?.status === "INITIALIZING" ||
            account?.status === "RECONNECTING" ||
            status.isAuthenticating ||
            status.isInitializing,
    };
}
//# sourceMappingURL=useAccount.js.map