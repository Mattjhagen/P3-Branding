{"version":3,"file":"useSmartAccountClient.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSmartAccountClient.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EACL,mBAAmB,EACnB,yBAAyB,EACzB,uBAAuB,EACvB,oBAAoB,GAOrB,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAE,UAAU,IAAI,gBAAgB,EAAE,MAAM,OAAO,CAAC;AACvD,OAAO,EAAE,4CAA4C,EAAE,MAAM,oDAAoD,CAAC;AAYlH,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAiDnD,MAAM,UAAU,qBAAqB,CAAC,EACpC,aAAa,EACb,IAAI,EACJ,GAAG,YAAY,EACY;IAC3B,MAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;IACzC,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,MAAM,EACJ,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,wBAAwB,EAAE,CAAC;IAE/B,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,UAAU,CAAC;QACxD,IAAI;QACJ,aAAa;KACd,CAAC,CAAC;IAEH,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,gBAAgB,CAAC;QAC5D,MAAM,EAAE,WAAW;KACpB,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE;QAC7B,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAC;QAC9B,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAEhE,OAAO;YACL,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,UAAU;YACnB,eAAe,EAAE,KAAK;SACvB,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAE9B,IAAI,SAAS,EAAE,CAAC;QACd,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,IAAI,CAAC,OAAO,IAAI,gBAAgB,EAAE,CAAC;QACjC,OAAO;YACL,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,eAAe,EAAE,IAAI;SACtB,CAAC;IACJ,CAAC;IAED,QAAQ,OAAO,CAAC,MAAM,EAAE,CAAC;QACvB,KAAK,cAAc;YACjB,OAAO;gBACL,MAAM,EAAE,4CAA4C,CAAC;oBACnD,MAAM,EAAE,aAAa;oBACrB,OAAO;oBACP,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;oBAC7C,GAAG,YAAY;iBAChB,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC;gBACpC,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,eAAe,EAAE,KAAK;aACvB,CAAC;QACJ,KAAK,0BAA0B;YAC7B,OAAO;gBACL,MAAM,EAAE,4CAA4C,CAAC;oBACnD,MAAM,EAAE,aAAa;oBACrB,OAAO;oBACP,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;oBAC7C,GAAG,YAAY;iBAChB,CAAC;qBACC,MAAM,CAAC,uBAAuB,CAAC;qBAC/B,MAAM,CAAC,oBAAoB,CAAC;qBAC5B,MAAM,CAAC,mBAAmB,CAAC;gBAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,eAAe,EAAE,KAAK;aACvB,CAAC;QACJ;YACE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAChD,CAAC;AACH,CAAC","sourcesContent":["\"use client\";\n\nimport {\n  accountLoupeActions,\n  lightAccountClientActions,\n  multiOwnerPluginActions,\n  pluginManagerActions,\n  type AccountLoupeActions,\n  type LightAccount,\n  type LightAccountClientActions,\n  type MultiOwnerModularAccount,\n  type MultiOwnerPluginActions,\n  type PluginManagerActions,\n} from \"@alchemy/aa-accounts\";\nimport { useMemo } from \"react\";\nimport type { Address, Chain, Transport } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { createAlchemySmartAccountClientFromRpcClient } from \"../../client/internal/smartAccountClientFromRpc.js\";\nimport type {\n  AlchemySmartAccountClient,\n  AlchemySmartAccountClientConfig,\n} from \"../../client/smartAccountClient\";\nimport type {\n  SupportedAccount,\n  SupportedAccountTypes,\n  SupportedAccounts,\n} from \"../../config\";\nimport type { GetAccountParams } from \"../../config/actions/getAccount.js\";\nimport type { AlchemySigner } from \"../../signer\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport { useAccount } from \"./useAccount.js\";\nimport { useBundlerClient } from \"./useBundlerClient.js\";\nimport { useConnection } from \"./useConnection.js\";\n\nexport type UseSmartAccountClientProps<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccountTypes = SupportedAccountTypes\n> = Omit<\n  AlchemySmartAccountClientConfig<\n    TTransport,\n    TChain,\n    SupportedAccount<TAccount>\n  >,\n  \"rpcUrl\" | \"chain\" | \"apiKey\" | \"jwt\" | \"account\"\n> &\n  GetAccountParams<TAccount>;\n\nexport type ClientActions<\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = TAccount extends LightAccount\n  ? LightAccountClientActions<AlchemySigner>\n  : TAccount extends MultiOwnerModularAccount\n  ? MultiOwnerPluginActions<MultiOwnerModularAccount<AlchemySigner>> &\n      PluginManagerActions<MultiOwnerModularAccount<AlchemySigner>> &\n      AccountLoupeActions<MultiOwnerModularAccount<AlchemySigner>>\n  : never;\n\nexport type UseSmartAccountClientResult<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  client?: AlchemySmartAccountClient<\n    TTransport,\n    TChain,\n    TAccount,\n    ClientActions<TAccount>\n  >;\n  address?: Address;\n  isLoadingClient: boolean;\n};\n\nexport function useSmartAccountClient<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccountTypes = SupportedAccountTypes\n>(\n  args: UseSmartAccountClientProps<TTransport, TChain, TAccount>\n): UseSmartAccountClientResult<TTransport, TChain, SupportedAccount<TAccount>>;\n\nexport function useSmartAccountClient({\n  accountParams,\n  type,\n  ...clientParams\n}: UseSmartAccountClientProps): UseSmartAccountClientResult {\n  const bundlerClient = useBundlerClient();\n  const connection = useConnection();\n\n  const {\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n\n  const { account, address, isLoadingAccount } = useAccount({\n    type,\n    accountParams,\n  });\n\n  const { isConnected, address: eoaAddress } = wagmi_useAccount({\n    config: wagmiConfig,\n  });\n\n  const eoaClient = useMemo(() => {\n    if (!isConnected) return null;\n    console.warn(\"EOA is connected, will not return an SCA client\");\n\n    return {\n      client: undefined,\n      address: eoaAddress,\n      isLoadingClient: false,\n    };\n  }, [eoaAddress, isConnected]);\n\n  if (eoaClient) {\n    return eoaClient;\n  }\n\n  if (!account || isLoadingAccount) {\n    return {\n      client: undefined,\n      address,\n      isLoadingClient: true,\n    };\n  }\n\n  switch (account.source) {\n    case \"LightAccount\":\n      return {\n        client: createAlchemySmartAccountClientFromRpcClient({\n          client: bundlerClient,\n          account,\n          gasManagerConfig: connection.gasManagerConfig,\n          ...clientParams,\n        }).extend(lightAccountClientActions),\n        address: account.address,\n        isLoadingClient: false,\n      };\n    case \"MultiOwnerModularAccount\":\n      return {\n        client: createAlchemySmartAccountClientFromRpcClient({\n          client: bundlerClient,\n          account,\n          gasManagerConfig: connection.gasManagerConfig,\n          ...clientParams,\n        })\n          .extend(multiOwnerPluginActions)\n          .extend(pluginManagerActions)\n          .extend(accountLoupeActions),\n        address: account.address,\n        isLoadingClient: false,\n      };\n    default:\n      throw new Error(\"Unsupported account type\");\n  }\n}\n"]}