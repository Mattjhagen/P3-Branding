import { type UseMutateAsyncFunction, type UseMutateFunction } from "@tanstack/react-query";
import type { Hex, SignableMessage } from "viem";
import type { BaseHookMutationArgs } from "../types.js";
import { type UseSmartAccountClientResult } from "./useSmartAccountClient.js";
export type SignMessageArgs = {
    message: SignableMessage;
};
export type UseSignMessagedMutationArgs = BaseHookMutationArgs<Hex, SignMessageArgs>;
export type UseSignMessageArgs = {
    client: UseSmartAccountClientResult["client"] | undefined;
} & UseSignMessagedMutationArgs;
export type UseSignMessageResult = {
    signMessage: UseMutateFunction<Hex, Error, SignMessageArgs, unknown>;
    signMessageAsync: UseMutateAsyncFunction<Hex, Error, SignMessageArgs, unknown>;
    signedMessage: Hex | undefined;
    isSigningMessage: boolean;
    error: Error | null;
};
export declare function useSignMessage({ client, ...mutationArgs }: UseSignMessageArgs): UseSignMessageResult;
