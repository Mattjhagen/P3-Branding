import { useMutation } from "@tanstack/react-query";
import { useCallback } from "react";
import { ClientUndefinedHookError } from "../errors.js";
export function useClientActions(args) {
    const { client, actions } = args;
    const { mutate, isPending: isExecutingAction, error, mutateAsync, data, } = useMutation({
        mutationFn: async ({ functionName, args, }) => {
            if (!client) {
                throw new ClientUndefinedHookError("useClientActions");
            }
            const actions_ = actions(client);
            return actions_[functionName](...args);
        },
    });
    const executeAction = useCallback((params) => {
        const { functionName, args } = params;
        return mutate({ functionName, args });
    }, [mutate]);
    const executeActionAsync = useCallback(async (params) => {
        const { functionName, args } = params;
        return mutateAsync({ functionName, args });
    }, [mutateAsync]);
    return {
        executeAction,
        executeActionAsync,
        data,
        isExecutingAction,
        error,
    };
}
//# sourceMappingURL=useClientActions.js.map