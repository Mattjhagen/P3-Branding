"use client";
import { TransactionMissingToParamError } from "@alchemy/aa-core";
import { useMutation, } from "@tanstack/react-query";
import { sendTransaction as wagmi_sendTransaction } from "@wagmi/core";
import { useAccount as wagmi_useAccount } from "wagmi";
import { useAlchemyAccountContext } from "../context.js";
import { ClientUndefinedHookError } from "../errors.js";
import {} from "./useSmartAccountClient.js";
export function useSendTransaction(params) {
    const { client, ...mutationArgs } = params;
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = useAlchemyAccountContext();
    const { isConnected } = wagmi_useAccount({ config: wagmiConfig });
    const { mutate: sendTransaction, mutateAsync: sendTransactionAsync, data: sendTransactionResult, isPending: isSendingTransaction, error, } = useMutation({
        ...mutationArgs,
        mutationFn: async (params) => {
            if (isConnected) {
                const { to, ...txn } = params;
                if (to == null) {
                    throw new TransactionMissingToParamError();
                }
                return wagmi_sendTransaction(wagmiConfig, {
                    to,
                    ...txn,
                });
            }
            if (!client) {
                throw new ClientUndefinedHookError("useSendTransaction");
            }
            return client.sendTransaction(params);
        },
    }, queryClient);
    return {
        sendTransaction,
        sendTransactionAsync,
        sendTransactionResult,
        isSendingTransaction,
        error,
    };
}
//# sourceMappingURL=useSendTransaction.js.map