"use client";
import { accountLoupeActions, lightAccountClientActions, multiOwnerPluginActions, pluginManagerActions, } from "@alchemy/aa-accounts";
import { useMemo } from "react";
import { useAccount as wagmi_useAccount } from "wagmi";
import { createAlchemySmartAccountClientFromRpcClient } from "../../client/internal/smartAccountClientFromRpc.js";
import { useAlchemyAccountContext } from "../context.js";
import { useAccount } from "./useAccount.js";
import { useBundlerClient } from "./useBundlerClient.js";
import { useConnection } from "./useConnection.js";
export function useSmartAccountClient({ accountParams, type, ...clientParams }) {
    const bundlerClient = useBundlerClient();
    const connection = useConnection();
    const { config: { _internal: { wagmiConfig }, }, } = useAlchemyAccountContext();
    const { account, address, isLoadingAccount } = useAccount({
        type,
        accountParams,
    });
    const { isConnected, address: eoaAddress } = wagmi_useAccount({
        config: wagmiConfig,
    });
    const eoaClient = useMemo(() => {
        if (!isConnected)
            return null;
        console.warn("EOA is connected, will not return an SCA client");
        return {
            client: undefined,
            address: eoaAddress,
            isLoadingClient: false,
        };
    }, [eoaAddress, isConnected]);
    if (eoaClient) {
        return eoaClient;
    }
    if (!account || isLoadingAccount) {
        return {
            client: undefined,
            address,
            isLoadingClient: true,
        };
    }
    switch (account.source) {
        case "LightAccount":
            return {
                client: createAlchemySmartAccountClientFromRpcClient({
                    client: bundlerClient,
                    account,
                    gasManagerConfig: connection.gasManagerConfig,
                    ...clientParams,
                }).extend(lightAccountClientActions),
                address: account.address,
                isLoadingClient: false,
            };
        case "MultiOwnerModularAccount":
            return {
                client: createAlchemySmartAccountClientFromRpcClient({
                    client: bundlerClient,
                    account,
                    gasManagerConfig: connection.gasManagerConfig,
                    ...clientParams,
                })
                    .extend(multiOwnerPluginActions)
                    .extend(pluginManagerActions)
                    .extend(accountLoupeActions),
                address: account.address,
                isLoadingClient: false,
            };
        default:
            throw new Error("Unsupported account type");
    }
}
//# sourceMappingURL=useSmartAccountClient.js.map