{"version":3,"file":"useSigner.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSigner.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,EAAE,WAAW,EAAE,MAAM,qCAAqC,CAAC;AAClE,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAElD,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AAEzD,MAAM,CAAC,MAAM,SAAS,GAAG,GAAyB,EAAE;IAClD,MAAM,EAAE,MAAM,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAK9C,OAAO,oBAAoB,CACzB,WAAW,CAAC,MAAM,CAAC,EACnB,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,EAEvB,GAAG,EAAE,CAAC,IAAI,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["\"use client\";\n\nimport { useSyncExternalStore } from \"react\";\nimport { watchSigner } from \"../../config/actions/watchSigner.js\";\nimport { getSigner } from \"../../config/index.js\";\nimport type { AlchemySigner } from \"../../signer/index.js\";\nimport { useAlchemyAccountContext } from \"../context.js\";\n\nexport const useSigner = (): AlchemySigner | null => {\n  const { config } = useAlchemyAccountContext();\n\n  // TODO: figure out how to handle this on the server\n  // I think we need a version of the signer that can be run on the server that essentially no-ops or errors\n  // for all calls\n  return useSyncExternalStore(\n    watchSigner(config),\n    () => getSigner(config),\n    // We don't want to return null here, should return something of type AlchemySigner\n    () => null\n  );\n};\n"]}