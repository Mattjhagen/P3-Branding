"use client";
import { useMutation, } from "@tanstack/react-query";
import { signMessage as wagmi_signMessage } from "@wagmi/core";
import { useCallback } from "react";
import { useAccount as wagmi_useAccount } from "wagmi";
import { useAlchemyAccountContext } from "../context.js";
import { ClientUndefinedHookError } from "../errors.js";
import {} from "./useSmartAccountClient.js";
export function useSignMessage({ client, ...mutationArgs }) {
    const { queryClient, config: { _internal: { wagmiConfig }, }, } = useAlchemyAccountContext();
    const { isConnected } = wagmi_useAccount({ config: wagmiConfig });
    const mutationFn = useCallback(async (params) => {
        if (isConnected) {
            return wagmi_signMessage(wagmiConfig, params);
        }
        if (!client) {
            throw new ClientUndefinedHookError("useSignMessage");
        }
        return client.signMessageWith6492(params);
    }, [client, isConnected, wagmiConfig]);
    const { mutate: signMessage, mutateAsync: signMessageAsync, data: signedMessage, isPending: isSigningMessage, error, } = useMutation({
        mutationKey: ["signMessage"],
        mutationFn,
        ...mutationArgs,
    }, queryClient);
    return {
        signMessage,
        signMessageAsync,
        signedMessage,
        isSigningMessage,
        error,
    };
}
//# sourceMappingURL=useSignMessage.js.map