{"version":3,"file":"useSendTransactions.js","sourceRoot":"","sources":["../../../../src/react/hooks/useSendTransactions.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAIN,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,WAAW,GAGZ,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAmD,MAAM,MAAM,CAAC;AACvE,OAAO,EAAE,UAAU,IAAI,gBAAgB,EAAE,MAAM,OAAO,CAAC;AAEvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EACL,wBAAwB,EACxB,yBAAyB,GAC1B,MAAM,cAAc,CAAC;AAEtB,OAAO,EAAoC,MAAM,4BAA4B,CAAC;AAmD9E,MAAM,UAAU,mBAAmB,CAOjC,MAAyC;IAEzC,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,CAAC;IAC3C,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,wBAAwB,EAAE,CAAC;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAElE,MAAM,EACJ,MAAM,EAAE,gBAAgB,EACxB,WAAW,EAAE,qBAAqB,EAClC,IAAI,EAAE,sBAAsB,EAC5B,SAAS,EAAE,qBAAqB,EAChC,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EACf,YAIC,EACD,EAAE;YACF,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,IAAI,yBAAyB,CACjC,qBAAqB,EACrB,oBAAoB,CACrB,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,wBAAwB,CAAC,qBAAqB,CAAC,CAAC;YAC5D,CAAC;YAED,OAAO,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAC/C,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,gBAAgB;QAChB,qBAAqB;QACrB,sBAAsB;QACtB,qBAAqB;QACrB,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport {\n  type GetEntryPointFromAccount,\n  type SendTransactionsParameters,\n  type UserOperationContext,\n} from \"@alchemy/aa-core\";\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { type Chain, type Hash, type Hex, type Transport } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport type { SupportedAccounts } from \"../../config/types.js\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport {\n  ClientUndefinedHookError,\n  UnsupportedEOAActionError,\n} from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { type UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type UseSendTransactionsMutationArgs<\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = BaseHookMutationArgs<Hash, SendTransactionsParameters<TAccount>>;\n\nexport type UseSendTransactionsArgs<\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  client:\n    | UseSmartAccountClientResult<\n        Transport,\n        Chain | undefined,\n        TAccount\n      >[\"client\"]\n    | undefined;\n} & UseSendTransactionsMutationArgs<TAccount>;\n\nexport type UseSendTransactionsResult<\n  TAccount extends SupportedAccounts = SupportedAccounts,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n> = {\n  sendTransactions: UseMutateFunction<\n    Hex,\n    Error,\n    SendTransactionsParameters<TAccount, TContext, TEntryPointVersion>,\n    unknown\n  >;\n  sendTransactionsAsync: UseMutateAsyncFunction<\n    Hex,\n    Error,\n    SendTransactionsParameters<TAccount, TContext, TEntryPointVersion>,\n    unknown\n  >;\n  sendTransactionsResult: Hex | undefined;\n  isSendingTransactions: boolean;\n  error: Error | null;\n};\n\n/**\n * @deprecated use useSendUserOperation instead\n *\n * Allows you to send a batch of transactions as a single user operation and await\n * the transaction to be mined.\n *\n * @param params - see {@link UseSendTransactionsArgs}\n * @returns a collection of functions and state for sending transactions {@link UseSendTransactionsResult}\n */\nexport function useSendTransactions<\n  TAccount extends SupportedAccounts = SupportedAccounts,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n>(\n  params: UseSendTransactionsArgs<TAccount>\n): UseSendTransactionsResult<TAccount, TContext, TEntryPointVersion> {\n  const { client, ...mutationArgs } = params;\n  const {\n    queryClient,\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n  const { isConnected } = wagmi_useAccount({ config: wagmiConfig });\n\n  const {\n    mutate: sendTransactions,\n    mutateAsync: sendTransactionsAsync,\n    data: sendTransactionsResult,\n    isPending: isSendingTransactions,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (\n        sendTxParams: SendTransactionsParameters<\n          TAccount,\n          TContext,\n          TEntryPointVersion\n        >\n      ) => {\n        if (isConnected) {\n          throw new UnsupportedEOAActionError(\n            \"useSendTransactions\",\n            \"batch transactions\"\n          );\n        }\n\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useSendTransactions\");\n        }\n\n        return client.sendTransactions(sendTxParams);\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    sendTransactions,\n    sendTransactionsAsync,\n    sendTransactionsResult,\n    isSendingTransactions,\n    error,\n  };\n}\n"]}