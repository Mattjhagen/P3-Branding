{"version":3,"file":"useDropAndReplaceUserOperation.js","sourceRoot":"","sources":["../../../../src/react/hooks/useDropAndReplaceUserOperation.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAOb,OAAO,EAAE,WAAW,EAA0B,MAAM,uBAAuB,CAAC;AAE5E,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,wBAAwB,EAAE,MAAM,cAAc,CAAC;AAoCxD,MAAM,UAAU,8BAA8B,CAG5C,EACA,MAAM,EACN,GAAG,YAAY,EAIhB;IACC,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAEnD,MAAM,EACJ,MAAM,EAAE,2BAA2B,EACnC,IAAI,EAAE,iCAAiC,EACvC,SAAS,EAAE,mCAAmC,EAC9C,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EACf,MAAuD,EACvD,EAAE;YACF,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,wBAAwB,CAAC,gCAAgC,CAAC,CAAC;YACvE,CAAC;YAED,OAAO,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,2BAA2B;QAC3B,iCAAiC;QACjC,mCAAmC;QACnC,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport type {\n  DropAndReplaceUserOperationParameters,\n  GetEntryPointFromAccount,\n  SendUserOperationResult,\n} from \"@alchemy/aa-core\";\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport type { SupportedAccounts } from \"../../config/types.js\";\nimport { useAlchemyAccountContext } from \"../context.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport type { UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type UseDropAndReplaceUserOperationMutationArgs<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = BaseHookMutationArgs<\n  SendUserOperationResult<TEntryPointVersion>,\n  DropAndReplaceUserOperationParameters<TAccount>\n>;\n\nexport type UseDropAndReplaceUserOperationArgs<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseDropAndReplaceUserOperationMutationArgs<TEntryPointVersion, TAccount>;\n\nexport type UseDropAndReplaceUserOperationResult<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  dropAndReplaceUserOperation: UseMutateFunction<\n    SendUserOperationResult<TEntryPointVersion>,\n    Error,\n    DropAndReplaceUserOperationParameters<TAccount>,\n    unknown\n  >;\n  dropAndReplaceUserOperationResult:\n    | SendUserOperationResult<TEntryPointVersion>\n    | undefined;\n  isDroppingAndReplacingUserOperation: boolean;\n  error: Error | null;\n};\n\nexport function useDropAndReplaceUserOperation<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n>({\n  client,\n  ...mutationArgs\n}: UseDropAndReplaceUserOperationArgs<\n  TEntryPointVersion,\n  TAccount\n>): UseDropAndReplaceUserOperationResult<TEntryPointVersion, TAccount> {\n  const { queryClient } = useAlchemyAccountContext();\n\n  const {\n    mutate: dropAndReplaceUserOperation,\n    data: dropAndReplaceUserOperationResult,\n    isPending: isDroppingAndReplacingUserOperation,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (\n        params: DropAndReplaceUserOperationParameters<TAccount>\n      ) => {\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useDropAndReplaceUserOperation\");\n        }\n\n        return client.dropAndReplaceUserOperation(params);\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    dropAndReplaceUserOperation,\n    dropAndReplaceUserOperationResult,\n    isDroppingAndReplacingUserOperation,\n    error,\n  };\n}\n"]}