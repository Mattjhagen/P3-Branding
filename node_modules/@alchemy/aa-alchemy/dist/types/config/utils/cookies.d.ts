import type { StoredState } from "../store/types.js";
import type { AlchemyAccountsConfig } from "../types";
/**
 * Function to create cookie based Storage
 *
 * @param config optional config object that allows you to set the session length
 * @returns an instance of a browser storage object that leverages cookies
 */
export declare const cookieStorage: (config?: {
    sessionLength: number;
}) => Storage;
/**
 * Converts a cookie into an initial state object
 *
 * @param config the account config containing the client store
 * @param cookie optional cookie string
 * @returns the deserialized AlchemyClientState if the cookie exists, otherwise undefined
 */
export declare function cookieToInitialState(config: AlchemyAccountsConfig, cookie?: string): StoredState | undefined;
/**
 * Helper function that can be used to parse a cookie string on the server or client
 *
 * @param cookie the cookie string to parse
 * @param key the key of the cookie to parse
 * @returns the value of the cookie given a key if it exists, otherwise undefined
 */
export declare function parseCookie(cookie: string, key: string): string | undefined;
//# sourceMappingURL=cookies.d.ts.map