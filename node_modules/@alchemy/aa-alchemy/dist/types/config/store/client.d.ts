import type { Chain } from "viem";
import { AlchemySigner } from "../../signer/signer.js";
import { AlchemySignerStatus } from "../../signer/types.js";
import type { SupportedAccountTypes } from "../types.js";
import { type AccountState, type ClientState, type CreateClientStoreParams, type SignerStatus } from "./types.js";
/**
 * Creates a zustand store instance containing the client only state
 *
 * @param config the configuration object for the client store
 * @returns a zustand store instance that maintains the client state
 */
export declare const createClientStore: (config: CreateClientStoreParams) => Omit<Omit<import("zustand/vanilla").StoreApi<ClientState>, "subscribe"> & {
    subscribe: {
        (listener: (selectedState: ClientState, previousSelectedState: ClientState) => void): () => void;
        <U>(selector: (state: ClientState) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
            equalityFn?: ((a: U, b: U) => boolean) | undefined;
            fireImmediately?: boolean | undefined;
        } | undefined): () => void;
    };
}, "persist"> & {
    persist: {
        setOptions: (options: Partial<import("zustand/middleware").PersistOptions<ClientState, {
            config: CreateClientStoreParams;
            accountConfigs: {
                [chain: number]: Partial<{
                    LightAccount: Omit<import("@alchemy/aa-accounts").CreateLightAccountParams<import("viem").Transport, import("@alchemy/aa-core").SmartAccountSigner<any>, "v1.0.1" | "v1.0.2" | "v1.1.0">, "chain" | "transport" | "signer">;
                    MultiOwnerModularAccount: Omit<import("@alchemy/aa-accounts").CreateMultiOwnerModularAccountParams, "chain" | "transport" | "signer">;
                }>;
            };
            user?: import("../../index.js").User | undefined;
            signerStatus: SignerStatus;
        }>>) => void;
        clearStorage: () => void;
        rehydrate: () => void | Promise<void>;
        hasHydrated: () => boolean;
        onHydrate: (fn: (state: ClientState) => void) => () => void;
        onFinishHydration: (fn: (state: ClientState) => void) => () => void;
        getOptions: () => Partial<import("zustand/middleware").PersistOptions<ClientState, {
            config: CreateClientStoreParams;
            accountConfigs: {
                [chain: number]: Partial<{
                    LightAccount: Omit<import("@alchemy/aa-accounts").CreateLightAccountParams<import("viem").Transport, import("@alchemy/aa-core").SmartAccountSigner<any>, "v1.0.1" | "v1.0.2" | "v1.1.0">, "chain" | "transport" | "signer">;
                    MultiOwnerModularAccount: Omit<import("@alchemy/aa-accounts").CreateMultiOwnerModularAccountParams, "chain" | "transport" | "signer">;
                }>;
            };
            user?: import("../../index.js").User | undefined;
            signerStatus: SignerStatus;
        }>>;
    };
};
/**
 * Given initial client store parameters, it initializes an AlchemySigner instance.
 * This should only be called on the client.
 *
 * @param params {@link CreateClientStoreParams} to configure and create the signer
 * @returns an instance of the {@link AlchemySigner}
 */
export declare const createSigner: (params: CreateClientStoreParams) => AlchemySigner;
/**
 * Converts the AlchemySigner's status to a more readable object
 *
 * @param alchemySignerStatus Enum value of the AlchemySigner's status to convert
 * @returns an object containing the original status as well as booleans to check the current state
 */
export declare const convertSignerStatusToState: (alchemySignerStatus: AlchemySignerStatus) => SignerStatus;
export declare const defaultAccountState: <T extends SupportedAccountTypes>() => AccountState<T>;
export declare const createDefaultAccountState: (chains: Chain[]) => {
    [chain: number]: {
        LightAccount: AccountState<"LightAccount">;
        MultiOwnerModularAccount: AccountState<"MultiOwnerModularAccount">;
    };
};
//# sourceMappingURL=client.d.ts.map