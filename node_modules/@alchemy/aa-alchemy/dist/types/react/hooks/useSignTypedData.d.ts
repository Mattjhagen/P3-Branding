import { type UseMutateAsyncFunction, type UseMutateFunction } from "@tanstack/react-query";
import type { Hex, TypedDataDefinition } from "viem";
import type { BaseHookMutationArgs } from "../types.js";
import type { UseSmartAccountClientResult } from "./useSmartAccountClient.js";
export type SignTypedDataArgs = {
    typedData: TypedDataDefinition;
};
export type UseSignTypedDataMutationArgs = BaseHookMutationArgs<Hex, SignTypedDataArgs>;
export type UseSignTypedDataArgs = {
    client: UseSmartAccountClientResult["client"] | undefined;
} & UseSignTypedDataMutationArgs;
export type UseSignTypedDataResult = {
    signTypedData: UseMutateFunction<Hex, Error, SignTypedDataArgs, unknown>;
    signTypedDataAsync: UseMutateAsyncFunction<Hex, Error, SignTypedDataArgs, unknown>;
    signedTypedData: Hex | undefined;
    isSigningTypedData: boolean;
    error: Error | null;
};
export declare function useSignTypedData({ client, ...mutationArgs }: UseSignTypedDataArgs): UseSignTypedDataResult;
//# sourceMappingURL=useSignTypedData.d.ts.map