/// <reference types="react" />
import type { NoUndefined } from "@alchemy/aa-core";
import { type QueryClient } from "@tanstack/react-query";
import type { AlchemyAccountsConfig, AlchemyClientState } from "../config";
import type { AuthCardProps } from "./components/auth/card/index.js";
export type AlchemyAccountContextProps = {
    config: AlchemyAccountsConfig;
    queryClient: QueryClient;
    ui?: {
        openAuthModal: () => void;
        closeAuthModal: () => void;
    };
} | undefined;
export declare const AlchemyAccountContext: import("react").Context<AlchemyAccountContextProps>;
export type AlchemyAccountsUIConfig = {
    auth?: AuthCardProps & {
        addPasskeyOnSignup?: boolean;
    };
    /**
     * If hideError is true, then the auth component will not
     * render the global error component
     */
    hideError?: boolean;
};
export type AlchemyAccountsProviderProps = {
    config: AlchemyAccountsConfig;
    initialState?: AlchemyClientState;
    queryClient: QueryClient;
    /**
     * If auth config is provided, then the auth modal will be added
     * to the DOM and can be controlled via the `useAuthModal` hook
     */
    uiConfig?: AlchemyAccountsUIConfig;
};
/**
 * Internal Only hook used to access the alchemy account context.
 * This hook is meant to be consumed by other hooks exported by this package.
 *
 * @param override optional context override that can be used to return a custom context
 * @returns The alchemy account context if one exists
 * @throws if used outside of the AlchemyAccountProvider
 */
export declare const useAlchemyAccountContext: (override?: AlchemyAccountContextProps) => NoUndefined<AlchemyAccountContextProps>;
/**
 * Provider for Alchemy accounts.
 *
 * @param props alchemy accounts provider props
 * @param props.config the acccount config generated using {@link createConfig}
 * @param props.queryClient the react-query query client to use
 * @param props.uiConfig optional UI configuration
 * @param props.children react components that should have this accounts context
 * @returns The element to wrap your application in for Alchemy Accounts context.
 */
export declare const AlchemyAccountProvider: (props: React.PropsWithChildren<AlchemyAccountsProviderProps>) => import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=context.d.ts.map