import { z } from "zod";
import { BaseAlchemySigner } from "./base.js";
import { AlchemySignerWebClient } from "./client/index.js";
import type { CredentialCreationOptionOverrides } from "./client/types";
export type AuthParams = {
    type: "email";
    email: string;
    redirectParams?: URLSearchParams;
} | {
    type: "email";
    bundle: string;
    orgId?: string;
} | {
    type: "passkey";
    createNew: false;
} | {
    type: "passkey";
    createNew: true;
    username: string;
    creationOpts?: CredentialCreationOptionOverrides;
};
export declare const AlchemySignerParamsSchema: z.ZodObject<{
    client: z.ZodUnion<[z.ZodType<AlchemySignerWebClient, z.ZodTypeDef, AlchemySignerWebClient>, z.ZodObject<{
        connection: z.ZodUnion<[z.ZodObject<{
            rpcUrl: z.ZodOptional<z.ZodNever>;
            apiKey: z.ZodString;
            jwt: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        }, {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        }>, z.ZodObject<{
            rpcUrl: z.ZodOptional<z.ZodNever>;
            apiKey: z.ZodOptional<z.ZodNever>;
            jwt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        }, {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        }>, z.ZodObject<{
            rpcUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodNever>;
            jwt: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        }, {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        }>, z.ZodObject<{
            rpcUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodNever>;
            jwt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        }, {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        }>]>;
        iframeConfig: z.ZodObject<{
            iframeElementId: z.ZodDefault<z.ZodString>;
            iframeContainerId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            iframeElementId: string;
            iframeContainerId: string;
        }, {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        }>;
        rpId: z.ZodOptional<z.ZodString>;
        rootOrgId: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        rootOrgId: string;
        iframeConfig: {
            iframeElementId: string;
            iframeContainerId: string;
        };
        rpId?: string | undefined;
    }, {
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        };
        rpId?: string | undefined;
        rootOrgId?: string | undefined;
    }>]>;
    sessionConfig: z.ZodOptional<z.ZodObject<Omit<{
        sessionKey: z.ZodDefault<z.ZodString>;
        storage: z.ZodUnion<[z.ZodDefault<z.ZodEnum<["localStorage", "sessionStorage"]>>, z.ZodType<Storage, z.ZodTypeDef, Storage>]>;
        expirationTimeMs: z.ZodDefault<z.ZodNumber>;
        client: z.ZodType<import("./index.js").BaseSignerClient<unknown>, z.ZodTypeDef, import("./index.js").BaseSignerClient<unknown>>;
    }, "client">, "strip", z.ZodTypeAny, {
        sessionKey: string;
        storage: ("localStorage" | "sessionStorage" | Storage) & ("localStorage" | "sessionStorage" | Storage | undefined);
        expirationTimeMs: number;
    }, {
        sessionKey?: string | undefined;
        storage?: "localStorage" | "sessionStorage" | Storage | undefined;
        expirationTimeMs?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    client: ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        rootOrgId: string;
        iframeConfig: {
            iframeElementId: string;
            iframeContainerId: string;
        };
        rpId?: string | undefined;
    } | AlchemySignerWebClient) & ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        rootOrgId: string;
        iframeConfig: {
            iframeElementId: string;
            iframeContainerId: string;
        };
        rpId?: string | undefined;
    } | AlchemySignerWebClient | undefined);
    sessionConfig?: {
        sessionKey: string;
        storage: ("localStorage" | "sessionStorage" | Storage) & ("localStorage" | "sessionStorage" | Storage | undefined);
        expirationTimeMs: number;
    } | undefined;
}, {
    client: ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        };
        rpId?: string | undefined;
        rootOrgId?: string | undefined;
    } | AlchemySignerWebClient) & ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        };
        rpId?: string | undefined;
        rootOrgId?: string | undefined;
    } | AlchemySignerWebClient | undefined);
    sessionConfig?: {
        sessionKey?: string | undefined;
        storage?: "localStorage" | "sessionStorage" | Storage | undefined;
        expirationTimeMs?: number | undefined;
    } | undefined;
}>;
export type AlchemySignerParams = z.input<typeof AlchemySignerParamsSchema>;
/**
 * A SmartAccountSigner that can be used with any SmartContractAccount
 */
export declare class AlchemySigner extends BaseAlchemySigner<AlchemySignerWebClient> {
    constructor(params_: AlchemySignerParams);
}
//# sourceMappingURL=signer.d.ts.map