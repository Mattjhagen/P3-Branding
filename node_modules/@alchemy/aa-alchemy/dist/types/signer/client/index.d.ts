import { z } from "zod";
import { BaseSignerClient } from "./base.js";
import type { CreateAccountParams, CredentialCreationOptionOverrides, EmailAuthParams, ExportWalletParams, User } from "./types";
export declare const AlchemySignerClientParamsSchema: z.ZodObject<{
    connection: z.ZodUnion<[z.ZodObject<{
        rpcUrl: z.ZodOptional<z.ZodNever>;
        apiKey: z.ZodString;
        jwt: z.ZodOptional<z.ZodNever>;
    }, "strip", z.ZodTypeAny, {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    }, {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    }>, z.ZodObject<{
        rpcUrl: z.ZodOptional<z.ZodNever>;
        apiKey: z.ZodOptional<z.ZodNever>;
        jwt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    }, {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    }>, z.ZodObject<{
        rpcUrl: z.ZodString;
        apiKey: z.ZodOptional<z.ZodNever>;
        jwt: z.ZodOptional<z.ZodNever>; /**
         * A lower level client used by the AlchemySigner used to communicate with
         * Alchemy's signer service.
         */
    }, "strip", z.ZodTypeAny, {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    }, {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    }>, z.ZodObject<{
        rpcUrl: z.ZodString;
        apiKey: z.ZodOptional<z.ZodNever>;
        jwt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    }, {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    }>]>;
    iframeConfig: z.ZodObject<{
        iframeElementId: z.ZodDefault<z.ZodString>;
        iframeContainerId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        iframeElementId: string;
        iframeContainerId: string;
    }, {
        iframeContainerId: string;
        iframeElementId?: string | undefined;
    }>;
    rpId: z.ZodOptional<z.ZodString>;
    rootOrgId: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    connection: {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    } | {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    } | {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    } | {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    };
    rootOrgId: string;
    iframeConfig: {
        iframeElementId: string;
        iframeContainerId: string;
    };
    rpId?: string | undefined;
}, {
    connection: {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    } | {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    } | {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    } | {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    };
    iframeConfig: {
        iframeContainerId: string;
        iframeElementId?: string | undefined;
    };
    rpId?: string | undefined;
    rootOrgId?: string | undefined;
}>;
export type AlchemySignerClientParams = z.input<typeof AlchemySignerClientParamsSchema>;
/**
 * A lower level client used by the AlchemySigner used to communicate with
 * Alchemy's signer service.
 */
export declare class AlchemySignerWebClient extends BaseSignerClient<ExportWalletParams> {
    private iframeStamper;
    private webauthnStamper;
    iframeContainerId: string;
    constructor(params: AlchemySignerClientParams);
    createAccount: (params: CreateAccountParams) => Promise<import("./types").SignupResponse>;
    initEmailAuth: (params: Omit<EmailAuthParams, "targetPublicKey">) => Promise<{
        orgId: string;
    }>;
    completeEmailAuth: ({ bundle, orgId, }: {
        bundle: string;
        orgId: string;
    }) => Promise<User>;
    lookupUserWithPasskey: (user?: User | undefined) => Promise<User>;
    exportWallet: ({ iframeContainerId, iframeElementId, }: ExportWalletParams) => Promise<boolean>;
    disconnect: () => Promise<void>;
    private initIframeStamper;
    private initWebauthnStamper;
    protected getWebAuthnAttestation: (options?: CredentialCreationOptionOverrides, userDetails?: {
        username: string;
    }) => Promise<{
        challenge: ArrayBuffer;
        authenticatorUserId: ArrayBuffer;
        attestation: {
            credentialId: string;
            clientDataJson: string;
            attestationObject: string;
            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
        };
    }>;
}
//# sourceMappingURL=index.d.ts.map