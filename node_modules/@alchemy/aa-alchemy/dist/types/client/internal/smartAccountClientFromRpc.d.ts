import { type SmartContractAccount, type SmartContractAccountWithSigner, type UserOperationContext } from "@alchemy/aa-core";
import type { Chain, CustomTransport, Transport } from "viem";
import type { AlchemySmartAccountClient, AlchemySmartAccountClientConfig } from "../smartAccountClient";
import type { ClientWithAlchemyMethods } from "../types";
export type CreateAlchemySmartAccountClientFromRpcClient<TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined> = Omit<AlchemySmartAccountClientConfig<Transport, Chain, TAccount, TContext>, "rpcUrl" | "chain" | "apiKey" | "jwt"> & {
    client: ClientWithAlchemyMethods;
};
export declare function getSignerTypeHeader<TAccount extends SmartContractAccountWithSigner>(account: TAccount): {
    "Alchemy-Aa-Sdk-Signer": string;
};
/**
 * Helper method meant to be used internally to create an alchemy smart account client
 * from an existing Alchemy Rpc Client
 *
 * @param args configuration for the client
 * @returns a smart account client configured to use Alchemy's RPC
 */
export declare function createAlchemySmartAccountClientFromRpcClient<TChain extends Chain | undefined = Chain | undefined, TAccount extends SmartContractAccount | undefined = SmartContractAccount | undefined, TContext extends UserOperationContext | undefined = UserOperationContext | undefined>(args: CreateAlchemySmartAccountClientFromRpcClient<TAccount, TContext>): AlchemySmartAccountClient<CustomTransport, TChain, TAccount, Record<string, never>, TContext>;
//# sourceMappingURL=smartAccountClientFromRpc.d.ts.map